/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-06-16 01:00:36.558622
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=IKsin(j[2]);
x7=IKsin(j[1]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKcos(j[5]);
x12=((0.076)*x0);
x13=((0.3425)*x1);
x14=((0.2845)*x7);
x15=((0.0535)*x4);
x16=((1.0)*x2);
x17=((0.0775)*x1);
x18=((1.0)*x1);
x19=((1.0)*x9);
x20=((1.0)*x10);
x21=((0.076)*x3);
x22=((1.0)*x0);
x23=((0.097)*x1);
x24=((1.0)*x3);
x25=((0.0775)*x0);
x26=((0.097)*x0);
x27=((0.3425)*x0);
x28=(x10*x3);
x29=(x5*x7);
x30=(x4*x5);
x31=(x4*x6);
x32=(x6*x7);
x33=(x0*x2);
x34=(x1*x2);
x35=(x3*x9);
x36=(x0*x16);
x37=((0.076)*x31);
x38=(x22*x32);
x39=(x18*x32);
x40=((((-1.0)*x30))+x32);
x41=((((1.0)*x29))+(((1.0)*x31)));
x42=((-1.0)*x41);
x43=((((-1.0)*x38))+((x0*x30)));
x44=((((-1.0)*x39))+((x1*x30)));
x45=(x3*x42);
x46=(x2*x41);
x47=(x22*(((((-1.0)*x31))+(((-1.0)*x29)))));
x48=(x18*(((((-1.0)*x31))+(((-1.0)*x29)))));
x49=(x3*x43);
x50=(x3*x44);
x51=(x10*x47);
x52=(x10*x48);
x53=(x34+x49);
x54=((((-1.0)*x36))+x50);
x55=(((x1*x3))+((x2*(((((-1.0)*x22*x30))+x38)))));
x56=(((x2*(((((-1.0)*x18*x30))+x39))))+(((-1.0)*x22*x3)));
x57=(x54*x9);
eerot[0]=(((x11*((((x53*x9))+x51))))+((x55*x8)));
eerot[1]=(((x8*(((((-1.0)*x20*x47))+(((-1.0)*x19*x53))))))+((x11*x55)));
eerot[2]=(((x47*x9))+((x10*(((((-1.0)*x1*x16))+(((-1.0)*x24*x43)))))));
IkReal x58=((1.0)*x26);
IkReal x59=((1.0)*x27);
IkReal x60=((1.0)*x12);
eetrans[0]=(((x0*x14))+((x0*x15))+(((-1.0)*x25*x32))+(((-1.0)*x31*x59))+((x10*(((((-0.097)*x49))+(((-0.097)*x34))))))+((x10*(((((-1.0)*x31*x60))+(((-1.0)*x29*x60))))))+(((-1.0)*x29*x59))+((x25*x30))+((x9*((((x21*x43))+(((0.076)*x34))))))+((x9*(((((-1.0)*x31*x58))+(((-1.0)*x29*x58)))))));
eerot[3]=(((x56*x8))+((x11*((x57+x52)))));
eerot[4]=(((x11*x56))+((x8*(((((-1.0)*x20*x48))+(((-1.0)*x19*x54)))))));
eerot[5]=(((x10*(((((-1.0)*x24*x44))+x36))))+((x48*x9)));
IkReal x61=((1.0)*x29);
IkReal x62=((1.0)*x31);
eetrans[1]=((((-1.0)*x13*x62))+(((-1.0)*x13*x61))+((x1*x15))+((x1*x14))+((x17*x30))+((x10*(((((-1.0)*x1*x37))+(((-0.076)*x1*x29))))))+((x10*(((((-0.097)*x50))+((x2*x26))))))+((x9*((((x21*x44))+(((-0.076)*x33))))))+(((-1.0)*x17*x32))+((x9*(((((-1.0)*x23*x61))+(((-1.0)*x23*x62)))))));
eerot[6]=(((x11*((((x35*x42))+((x10*x40))))))+((x46*x8)));
eerot[7]=(((x8*(((((-1.0)*x20*x40))+(((-1.0)*x19*x45))))))+((x11*x46)));
eerot[8]=(((x28*x41))+((x40*x9)));
eetrans[2]=((0.267)+(((-0.0535)*x7))+((x9*(((((-0.097)*x30))+(((0.097)*x32))))))+(((-0.0775)*x31))+((x10*(((((0.076)*x32))+(((-0.076)*x30))))))+((x35*(((((-1.0)*x37))+(((-0.076)*x29))))))+(((0.3425)*x32))+(((0.2845)*x4))+(((-0.0775)*x29))+(((-0.3425)*x30))+((x28*(((((0.097)*x29))+(((0.097)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.097)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.097)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.267)+(((-0.097)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x63=((1.0)*px);
IkReal x64=((1.0)*pz);
IkReal x65=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x65))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x64)));
rxp0_2=((((-1.0)*r10*x63))+((py*r00)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x64)));
rxp1_2=((((-1.0)*r11*x63))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x65)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x64)));
rxp2_2=((((-1.0)*r12*x63))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=((0.152)*r20);
IkReal x67=((0.076)*r21);
IkReal x68=((1.0)*rxp2_2);
IkReal x69=((0.685)*npz);
IkReal x70=((1.0)*pp);
IkReal x71=((0.307)*npx);
IkReal x72=((0.155)*npy);
IkReal x73=((0.003)*npx);
IkReal x74=((4.0)*rxp1_2);
IkReal x75=((2.0)*rxp0_2);
IkReal x76=((0.31)*npz);
IkReal x77=((1.37)*npx);
IkReal x78=(rxp2_2+(((-1.0)*x67)));
IkReal x79=((0.006)*npy);
IkReal x80=(x67+(((-1.0)*x68)));
IkReal x81=((-0.155)*npy);
IkReal x82=((-0.31)*npx);
IkReal x83=((-2.0)*rxp0_2);
IkReal x84=((-2.74)*npy);
IkReal x85=((-0.152)*r20);
IkReal x86=(rxp2_2+x67);
IkReal x87=((-0.614)*npy);
IkReal x88=((-0.033506)+x69);
IkReal x89=((-0.057066)+x69);
IkReal x90=((((-1.0)*x68))+(((-1.0)*x67)));
IkReal x91=(x70+x69);
IkReal x92=(x77+x76);
IkReal x93=(x73+x70);
op[0]=x80;
op[1]=x80;
op[2]=x66;
op[3]=x66;
op[4]=x90;
op[5]=x90;
op[6]=((((-1.0)*x70))+x71+x89);
op[7]=x81;
op[8]=x87;
op[9]=x82;
op[10]=((((-1.0)*x71))+(((-1.0)*x70))+x89);
op[11]=x72;
op[12]=x81;
op[13]=(x88+(((-1.0)*x93)));
op[14]=x82;
op[15]=x79;
op[16]=x72;
op[17]=((((-1.0)*x70))+x73+x88);
op[18]=0;
op[19]=x80;
op[20]=0;
op[21]=x66;
op[22]=0;
op[23]=x90;
op[24]=x83;
op[25]=x83;
op[26]=x74;
op[27]=x74;
op[28]=x75;
op[29]=x75;
op[30]=((-0.10412)+(((-1.0)*x76))+x77);
op[31]=0;
op[32]=x84;
op[33]=0;
op[34]=((-0.10412)+(((-1.0)*x92)));
op[35]=0;
op[36]=0;
op[37]=((-0.10412)+x92);
op[38]=0;
op[39]=x84;
op[40]=0;
op[41]=((-0.10412)+(((-1.0)*x77))+x76);
op[42]=0;
op[43]=x83;
op[44]=0;
op[45]=x74;
op[46]=0;
op[47]=x75;
op[48]=x78;
op[49]=x78;
op[50]=x85;
op[51]=x85;
op[52]=x86;
op[53]=x86;
op[54]=((-0.033506)+(((-1.0)*x73))+(((-1.0)*x91)));
op[55]=x81;
op[56]=x79;
op[57]=x82;
op[58]=((-0.033506)+x73+(((-1.0)*x91)));
op[59]=x72;
op[60]=x81;
op[61]=((-0.057066)+x71+(((-1.0)*x91)));
op[62]=x82;
op[63]=x87;
op[64]=x72;
op[65]=((-0.057066)+(((-1.0)*x71))+(((-1.0)*x91)));
op[66]=0;
op[67]=x78;
op[68]=0;
op[69]=x85;
op[70]=0;
op[71]=x86;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj3 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj3)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x94=htj4*htj4;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj4array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x96.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x96.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x97=htj5*htj5;
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+x97),-1);
if(!x98.valid){
continue;
}
cj5array[numsolutions]=((x98.value)*(((1.0)+(((-1.0)*x97)))));
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x99.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x99.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x100=htj3*htj3;
CheckValue<IkReal> x101=IKPowWithIntegerCheck(((1.0)+x100),-1);
if(!x101.valid){
continue;
}
cj3array[numsolutions]=((x101.value)*(((1.0)+(((-1.0)*x100)))));
CheckValue<IkReal> x102=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x102.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x102.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj3 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij4]-cj3array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij4]-sj3array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij3[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j3 = j3array[ij4]; cj3 = cj3array[ij4]; sj3 = sj3array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x103=(rxp0_2*sj5);
IkReal x104=(cj5*rxp1_2);
IkReal x105=((250.0)*cj3);
IkReal x106=((19.0)*cj3*sj5);
IkReal x107=((19.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x104))+(((-13.1578947368421)*x103)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x103))+(((-1.0)*x104))));
j0eval[2]=((IKabs(((((-1.0)*r11*x106))+((r10*x107))+(((-1.0)*py*x105)))))+(IKabs(((((-1.0)*r01*x106))+(((-1.0)*px*x105))+((r00*x107))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x108=((1.0)*cj3);
IkReal x109=(cj5*sj4);
IkReal x110=(cj3*sj4*sj5);
IkReal x111=(((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)));
j0eval[0]=x111;
j0eval[1]=IKsign(x111);
j0eval[2]=((IKabs(((((-1.0)*cj4*r02*x108))+((r01*x110))+(((-1.0)*r00*x108*x109)))))+(IKabs((((r11*x110))+(((-1.0)*r10*x108*x109))+(((-1.0)*cj4*r12*x108))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x112=(rxp2_2*sj4);
IkReal x113=((13.1578947368421)*cj4);
IkReal x114=(rxp1_2*sj5);
IkReal x115=((250.0)*sj3);
IkReal x116=((1.0)*sj4);
IkReal x117=(cj5*r21);
IkReal x118=((19.0)*sj3);
IkReal x119=(cj5*rxp0_2);
IkReal x120=(r20*sj5);
IkReal x121=((0.076)*sj4);
j0eval[0]=((((-1.0)*x116*x117))+(((-1.0)*x113*x119))+(((-1.0)*x116*x120))+((x113*x114))+(((13.1578947368421)*x112)));
j0eval[1]=IKsign(((((-1.0)*x120*x121))+(((-1.0)*x117*x121))+x112+((cj4*x114))+(((-1.0)*cj4*x119))));
j0eval[2]=((IKabs(((((-1.0)*px*x115))+((cj5*r00*x118))+(((-1.0)*r01*sj5*x118)))))+(IKabs((((cj5*r10*x118))+(((-1.0)*r11*sj5*x118))+(((-1.0)*py*x115))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x122=((0.076)*sj5);
IkReal x123=(rxp0_2*sj5);
IkReal x124=((0.076)*cj5);
IkReal x125=(cj5*rxp1_2);
j0eval[0]=((((-1.0)*r22))+(((-13.1578947368421)*x125))+(((-13.1578947368421)*x123)));
j0eval[1]=IKsign(((((-0.076)*r22))+(((-1.0)*x125))+(((-1.0)*x123))));
j0eval[2]=((IKabs((((r00*x124))+(((-1.0)*px))+(((-1.0)*r01*x122)))))+(IKabs(((((-1.0)*r11*x122))+(((-1.0)*py))+((r10*x124))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x126=(cj4*sj5);
IkReal x127=((1.0)*cj4*cj5);
IkReal x128=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x128;
j0eval[1]=((IKabs(((((-1.0)*r10*x127))+((r12*sj4))+((r11*x126)))))+(IKabs(((((-1.0)*r00*x127))+((r01*x126))+((r02*sj4))))));
j0eval[2]=IKsign(x128);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x129=r20*r20;
IkReal x130=cj5*cj5;
IkReal x131=((1.0)+((x129*x130))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x129))+(((-1.0)*x130*(r21*r21))));
j0eval[0]=x131;
j0eval[1]=IKsign(x131);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x132=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x132) < -0.00001)
continue;
IkReal x133=IKabs(IKsqrt(x132));
IkReal x139 = x132;
if(IKabs(x139)==0){
continue;
}
IkReal x134=pow(x139,-0.5);
IkReal x135=((13.1578947368421)*x134);
CheckValue<IkReal> x140=IKPowWithIntegerCheck(x133,-1);
if(!x140.valid){
continue;
}
IkReal x136=x140.value;
IkReal x137=(r22*x136);
if((((1.0)+(((-1.0)*(x137*x137))))) < -0.00001)
continue;
IkReal x138=IKsqrt(((1.0)+(((-1.0)*(x137*x137)))));
if( (x137) < -1-IKFAST_SINCOS_THRESH || (x137) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x141 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
IkReal gconst6=((IKasin(x137))+(((-1.0)*(x141.value))));
IkReal gconst7=(((rxp1_2*x135*x138))+(((-1.0)*rxp0_2*x135*x137)));
IkReal gconst8=((((-1.0)*rxp0_2*x135*x138))+(((-1.0)*rxp1_2*x135*x137)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x142=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x142.valid){
continue;
}
if( ((r22*(x142.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x142.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x143 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x143.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x142.value))))))+(x143.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x144=gconst7*gconst7;
IkReal x145=gconst8*gconst8;
CheckValue<IkReal> x146=IKPowWithIntegerCheck(IKsign((x144+x145+(((-1.0)*x145*(r21*r21)))+(((-2.0)*gconst7*gconst8*r20*r21))+(((-1.0)*x144*(r20*r20))))),-1);
if(!x146.valid){
continue;
}
CheckValue<IkReal> x147 = IKatan2WithCheck(IkReal((((gconst7*r00))+((gconst8*r01)))),IkReal(((((-1.0)*gconst7*r10))+(((-1.0)*gconst8*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x147.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x146.value)))+(x147.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x148=IKcos(j0);
IkReal x149=IKsin(j0);
IkReal x150=(cj4*gconst7);
IkReal x151=((0.076)*gconst7);
IkReal x152=(gconst8*r01);
IkReal x153=(gconst7*r10);
IkReal x154=(gconst7*sj4);
IkReal x155=(gconst7*r00);
IkReal x156=((1.0)*cj4);
IkReal x157=(r11*x148);
IkReal x158=((1.0)*x149);
IkReal x159=(r12*x148);
IkReal x160=(gconst8*r00*x149);
IkReal x161=(gconst8*r10*x148);
evalcond[0]=(((x149*x153))+((x148*x152))+((x148*x155))+((gconst8*r11*x149)));
evalcond[1]=((1.0)+(((-1.0)*x152*x158))+((gconst8*x157))+((x148*x153))+(((-1.0)*x155*x158)));
evalcond[2]=((((-1.0)*x151*x157))+((r01*x149*x151))+(((-1.0)*py*x148))+(((-0.076)*x160))+((px*x149))+(((0.076)*x161)));
evalcond[3]=((((-1.0)*r01*x154*x158))+((cj4*r02*x149))+((sj4*x160))+((x154*x157))+(((-1.0)*x156*x159))+(((-1.0)*sj4*x161)));
evalcond[4]=(((cj4*x160))+(((-1.0)*r02*sj4*x158))+((sj4*x159))+((x150*x157))+(((-1.0)*x156*x161))+(((-1.0)*r01*x150*x158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x162=x132;
if((x162) < -0.00001)
continue;
IkReal x163=IKabs(IKsqrt(x162));
IkReal x170 = x162;
if(IKabs(x170)==0){
continue;
}
IkReal x164=pow(x170,-0.5);
IkReal x165=((13.1578947368421)*x164);
CheckValue<IkReal> x171=IKPowWithIntegerCheck(x163,-1);
if(!x171.valid){
continue;
}
IkReal x166=x171.value;
IkReal x167=(r22*x166);
if((((1.0)+(((-1.0)*(x167*x167))))) < -0.00001)
continue;
IkReal x168=IKsqrt(((1.0)+(((-1.0)*(x167*x167)))));
if( (x167) < -1-IKFAST_SINCOS_THRESH || (x167) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x172 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x172.valid){
continue;
}
IkReal x169=((IKasin(x167))+(((-1.0)*(x172.value))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst7;
cj5=gconst8;
j5=x169;
IkReal gconst6=x169;
IkReal gconst7=(((rxp1_2*x165*x168))+(((-1.0)*rxp0_2*x165*x167)));
IkReal gconst8=((((-1.0)*rxp0_2*x165*x168))+(((-1.0)*rxp1_2*x165*x167)));
IkReal x173=((12.0)*pz);
IkReal x174=((4.0)*pz);
IkReal x175=((0.93)*gconst8);
IkReal x176=(sj0*sj4);
IkReal x177=(cj4*r20);
IkReal x178=(gconst7*sj4);
IkReal x179=((0.31)*cj0);
IkReal x180=((0.93)*gconst7);
IkReal x181=(gconst7*r21);
IkReal x182=(gconst8*sj4);
IkReal x183=((0.31)*cj4);
IkReal x184=(gconst8*r20);
IkReal x185=((0.31)*gconst8);
IkReal x186=(cj4*r22);
IkReal x187=(r22*sj4);
IkReal x188=(r12*sj0);
IkReal x189=((0.912)*x181);
IkReal x190=((4.11)*x186);
IkReal x191=((0.912)*x184);
IkReal x192=((1.37)*x186);
IkReal x193=((0.304)*x184);
IkReal x194=((0.304)*x181);
IkReal x195=(cj0*cj4*r02);
IkReal x196=((4.11)*r21*x178);
IkReal x197=((4.11)*r20*x182);
IkReal x198=(x175*x177);
IkReal x199=((1.37)*r20*x182);
IkReal x200=((1.37)*r21*x178);
IkReal x201=(r11*x176*x180);
IkReal x202=((0.93)*cj0*r01*x178);
IkReal x203=(x173+x196+x189);
IkReal x204=(x174+x194+x200);
IkReal x205=(x202+x201);
IkReal x206=(x191+x190+x197);
IkReal x207=(x199+x193+x192);
IkReal x208=(((cj4*r21*x180))+x203+(((0.93)*x187)));
IkReal x209=(((r10*x175*x176))+((cj0*r00*sj4*x175))+(((0.93)*cj4*x188))+x206+(((0.93)*x195)));
j1eval[0]=((3.424)+(IKabs(((-1.138)+((x177*x185))+(((-1.0)*x204))+x207+(((-0.31)*x187))+(((-1.0)*x181*x183)))))+(IKabs(((1.138)+(((0.31)*gconst7*r11*x176))+(((-1.0)*r10*x176*x185))+(((-1.0)*x207))+(((-1.0)*cj4*r02*x179))+x204+(((-1.0)*r00*x179*x182))+(((-1.0)*x183*x188))+((r01*x178*x179)))))+(IKabs(((1.138)+(((-1.0)*x209))+x205+x203)))+(IKabs(((-1.138)+x198+(((-1.0)*x208))+x206)))+(IKabs(((1.138)+x198+(((-1.0)*x208))+x206)))+(IKabs(((-1.138)+(((-1.0)*x209))+x205+x203))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x210=(gconst8*r20);
IkReal x211=((0.31)*cj4);
IkReal x212=(r22*sj4);
IkReal x213=((4.11)*sj4);
IkReal x214=(cj4*r22);
IkReal x215=(gconst7*r21);
IkReal x216=((1.37)*sj4);
IkReal x217=((0.93)*cj4);
IkReal x218=((4.11)*x214);
IkReal x219=((0.912)*x210);
IkReal x220=((1.37)*x214);
IkReal x221=((0.304)*x210);
IkReal x222=(x210*x213);
IkReal x223=(x210*x217);
IkReal x224=(x210*x211);
IkReal x225=(x210*x216);
IkReal x226=(x221+x220+x225+x224);
IkReal x227=(x218+x219+x223+x222);
IkReal x228=((((12.0)*pz))+((x213*x215))+((x215*x217))+(((0.912)*x215))+(((0.93)*x212)));
IkReal x229=((((0.304)*x215))+(((4.0)*pz))+((x215*x216))+((x211*x215))+(((0.31)*x212)));
op[0]=((-1.138)+x226+(((-1.0)*x229)));
op[1]=-0.428;
op[2]=((-1.138)+x227+(((-1.0)*x228)));
op[3]=-0.856;
op[4]=((1.138)+x227+(((-1.0)*x228)));
op[5]=-0.428;
op[6]=((1.138)+x226+(((-1.0)*x229)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x230=((4.0)*pz);
IkReal x231=((12.0)*pz);
IkReal x232=(gconst8*r10);
IkReal x233=((0.93)*cj0);
IkReal x234=(cj4*r02);
IkReal x235=(gconst7*sj4);
IkReal x236=((0.31)*cj0);
IkReal x237=(gconst7*r21);
IkReal x238=(gconst8*sj4);
IkReal x239=(gconst8*r20);
IkReal x240=((0.31)*sj0);
IkReal x241=(cj4*r22);
IkReal x242=(cj4*r12);
IkReal x243=((0.304)*x237);
IkReal x244=((0.912)*x237);
IkReal x245=((0.93)*sj0*sj4);
IkReal x246=((1.37)*r21*x235);
IkReal x247=((4.11)*r21*x235);
IkReal x248=((0.93)*r11*sj0*x235);
IkReal x249=(r01*x233*x235);
IkReal x250=(r01*x235*x236);
IkReal x251=(r11*x235*x240);
IkReal x252=(x231+x247+x244+x249+x248);
IkReal x253=(x250+x251+x230+x243+x246);
IkReal x254=((((4.11)*x241))+((x233*x234))+((r00*x233*x238))+((x232*x245))+(((4.11)*r20*x238))+(((0.93)*sj0*x242))+(((0.912)*x239)));
IkReal x255=(((x234*x236))+(((1.37)*r20*x238))+((x240*x242))+(((1.37)*x241))+(((0.304)*x239))+((r00*x236*x238))+((sj4*x232*x240)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1)*(((-1.138)+x252+(((-1.0)*x254))))))+(((0.428)*htj1))+(((htj1*htj1*htj1*htj1)*(((1.138)+x252+(((-1.0)*x254))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x253+(((-1.0)*x255))))))+x253+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x255)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x256=(cj1*cj4);
IkReal x257=(gconst7*r21);
IkReal x258=(sj1*sj4);
IkReal x259=(cj4*sj1);
IkReal x260=(cj1*sj4);
IkReal x261=(gconst8*r20*sj4);
IkReal x262=((1.0)*gconst8*r20);
if( IKabs((((r22*x260))+((gconst8*r20*x258))+((x256*x257))+(((-1.0)*x257*x258))+((r22*x259))+(((-1.0)*x256*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x256))+(((-1.0)*x259*x262))+((x257*x259))+((x257*x260))+((r22*x258))+(((-1.0)*x260*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x260))+((gconst8*r20*x258))+((x256*x257))+(((-1.0)*x257*x258))+((r22*x259))+(((-1.0)*x256*x262))))+IKsqr(((((-1.0)*r22*x256))+(((-1.0)*x259*x262))+((x257*x259))+((x257*x260))+((r22*x258))+(((-1.0)*x260*x262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x260))+((gconst8*r20*x258))+((x256*x257))+(((-1.0)*x257*x258))+((r22*x259))+(((-1.0)*x256*x262))), ((((-1.0)*r22*x256))+(((-1.0)*x259*x262))+((x257*x259))+((x257*x260))+((r22*x258))+(((-1.0)*x260*x262))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x263=IKcos(j2);
IkReal x264=IKsin(j2);
IkReal x265=((1.0)*cj4);
IkReal x266=(gconst7*r21);
IkReal x267=((0.076)*gconst7);
IkReal x268=(cj0*r01);
IkReal x269=((1.0)*sj4);
IkReal x270=(cj0*r02);
IkReal x271=(gconst8*r20);
IkReal x272=(r11*sj0);
IkReal x273=(r12*sj0);
IkReal x274=(cj4*gconst7);
IkReal x275=(gconst7*sj4);
IkReal x276=(cj1*x263);
IkReal x277=(cj0*gconst8*r00);
IkReal x278=(cj1*x264);
IkReal x279=(gconst8*r10*sj0);
IkReal x280=(sj1*x264);
IkReal x281=(sj1*x263);
IkReal x282=((1.0)*x280);
evalcond[0]=(((cj4*r22))+x276+(((-1.0)*x282))+(((-1.0)*x266*x269))+((sj4*x271)));
evalcond[1]=(((cj4*x271))+x278+x281+(((-1.0)*x265*x266))+(((-1.0)*r22*x269)));
evalcond[2]=((((-0.076)*x271))+(((0.0535)*sj1))+(((0.076)*x266))+(((0.0775)*x278))+(((-0.3425)*x280))+(((-0.2845)*cj1))+pz+(((0.0775)*x281))+(((0.3425)*x276)));
evalcond[3]=(((x272*x274))+x276+(((-1.0)*x265*x277))+(((-1.0)*x265*x279))+(((-1.0)*x282))+((sj4*x270))+((sj4*x273))+((x268*x274)));
evalcond[4]=(((x272*x275))+(((-1.0)*x278))+(((-1.0)*x269*x279))+(((-1.0)*x269*x277))+(((-1.0)*x281))+(((-1.0)*x265*x270))+(((-1.0)*x265*x273))+((x268*x275)));
evalcond[5]=((((0.2845)*sj1))+(((0.0775)*x276))+(((-0.3425)*x281))+(((0.076)*x279))+(((0.076)*x277))+(((-0.3425)*x278))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x267*x268))+(((-1.0)*x267*x272))+(((-0.0775)*x280))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x283=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x283) < -0.00001)
continue;
IkReal x284=IKabs(IKsqrt(x283));
IkReal x290 = x283;
if(IKabs(x290)==0){
continue;
}
IkReal x285=pow(x290,-0.5);
IkReal x286=((13.1578947368421)*x285);
CheckValue<IkReal> x291=IKPowWithIntegerCheck(x284,-1);
if(!x291.valid){
continue;
}
IkReal x287=x291.value;
IkReal x288=(r22*x287);
if((((1.0)+(((-1.0)*(x288*x288))))) < -0.00001)
continue;
IkReal x289=IKsqrt(((1.0)+(((-1.0)*(x288*x288)))));
if( (x288) < -1-IKFAST_SINCOS_THRESH || (x288) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(IKasin(x288))))+(((-1.0)*(x292.value))));
IkReal gconst10=((((-1.0)*rxp1_2*x286*x289))+(((-1.0)*rxp0_2*x286*x288)));
IkReal gconst11=((((-1.0)*rxp1_2*x286*x288))+((rxp0_2*x286*x289)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x293.valid){
continue;
}
if( ((r22*(x293.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x293.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x293.value))))+(x294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x295=gconst10*gconst10;
IkReal x296=gconst11*gconst11;
CheckValue<IkReal> x297=IKPowWithIntegerCheck(IKsign(((((-1.0)*x296*(r21*r21)))+(((-2.0)*gconst10*gconst11*r20*r21))+x295+x296+(((-1.0)*x295*(r20*r20))))),-1);
if(!x297.valid){
continue;
}
CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal((((gconst10*r00))+((gconst11*r01)))),IkReal(((((-1.0)*gconst10*r10))+(((-1.0)*gconst11*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x298.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x297.value)))+(x298.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x299=IKsin(j0);
IkReal x300=IKcos(j0);
IkReal x301=((1.0)*sj4);
IkReal x302=((1.0)*cj4);
IkReal x303=(gconst10*r00);
IkReal x304=(gconst11*x300);
IkReal x305=(gconst11*x299);
IkReal x306=(gconst10*x300);
IkReal x307=(r02*x299);
IkReal x308=(r12*x300);
IkReal x309=(gconst10*r01*x299);
evalcond[0]=(((r11*x305))+((gconst10*r10*x299))+((x300*x303))+((r01*x304)));
evalcond[1]=((1.0)+((r11*x304))+(((-1.0)*x299*x303))+(((-1.0)*r01*x305))+((r10*x306)));
evalcond[2]=((((-0.076)*r00*x305))+(((0.076)*x309))+(((-1.0)*py*x300))+((px*x299))+(((-0.076)*r11*x306))+(((0.076)*r10*x304)));
evalcond[3]=((((-1.0)*x301*x309))+(((-1.0)*x302*x308))+((r00*sj4*x305))+((r11*sj4*x306))+(((-1.0)*r10*x301*x304))+((cj4*x307)));
evalcond[4]=((((-1.0)*x301*x307))+(((-1.0)*r10*x302*x304))+(((-1.0)*x302*x309))+((cj4*r00*x305))+((cj4*r11*x306))+((sj4*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x310=x283;
if((x310) < -0.00001)
continue;
IkReal x311=IKabs(IKsqrt(x310));
IkReal x318 = x310;
if(IKabs(x318)==0){
continue;
}
IkReal x312=pow(x318,-0.5);
IkReal x313=((13.1578947368421)*x312);
CheckValue<IkReal> x319=IKPowWithIntegerCheck(x311,-1);
if(!x319.valid){
continue;
}
IkReal x314=x319.value;
IkReal x315=(r22*x314);
if((((1.0)+(((-1.0)*(x315*x315))))) < -0.00001)
continue;
IkReal x316=IKsqrt(((1.0)+(((-1.0)*(x315*x315)))));
CheckValue<IkReal> x320 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x320.valid){
continue;
}
if( (x315) < -1-IKFAST_SINCOS_THRESH || (x315) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x317=((((1.0)*(x320.value)))+(((1.0)*(IKasin(x315)))));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x317)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x317)));
IkReal gconst10=((((-1.0)*rxp0_2*x313*x315))+(((-1.0)*rxp1_2*x313*x316)));
IkReal gconst11=((((-1.0)*rxp1_2*x313*x315))+((rxp0_2*x313*x316)));
IkReal x321=((12.0)*pz);
IkReal x322=((4.0)*pz);
IkReal x323=(sj0*sj4);
IkReal x324=((0.93)*gconst10);
IkReal x325=((0.31)*gconst11);
IkReal x326=((0.93)*cj4);
IkReal x327=(cj0*r02);
IkReal x328=(gconst10*sj4);
IkReal x329=(r12*sj0);
IkReal x330=(cj0*r01);
IkReal x331=(gconst11*r20);
IkReal x332=(cj4*r21);
IkReal x333=((0.93)*gconst11);
IkReal x334=((0.31)*gconst10);
IkReal x335=(cj4*r22);
IkReal x336=((0.31)*cj4);
IkReal x337=(r22*sj4);
IkReal x338=(gconst10*r21);
IkReal x339=((0.912)*x338);
IkReal x340=((4.11)*x335);
IkReal x341=((0.912)*x331);
IkReal x342=((0.304)*x338);
IkReal x343=((1.37)*x335);
IkReal x344=((0.304)*x331);
IkReal x345=(cj0*r00*sj4);
IkReal x346=((4.11)*r21*x328);
IkReal x347=((4.11)*sj4*x331);
IkReal x348=(x326*x331);
IkReal x349=((1.37)*r21*x328);
IkReal x350=((1.37)*sj4*x331);
IkReal x351=(sj4*x324*x330);
IkReal x352=(r11*x323*x324);
IkReal x353=(x322+x342+x349);
IkReal x354=(x340+x341+x347);
IkReal x355=(x350+x343+x344);
IkReal x356=(((x324*x332))+x339+x321+x346+(((0.93)*x337)));
IkReal x357=(x339+x321+x351+x352+x346);
IkReal x358=(((x326*x329))+((x326*x327))+x354+((x333*x345))+((r10*x323*x333)));
j1eval[0]=((3.424)+(IKabs(((-1.138)+(((-1.0)*x353))+x355+(((-0.31)*x337))+((cj4*r20*x325))+(((-1.0)*x332*x334)))))+(IKabs(((1.138)+(((0.31)*x328*x330))+((r11*x323*x334))+(((-1.0)*x329*x336))+(((-1.0)*x355))+x353+(((-1.0)*x325*x345))+(((-1.0)*r10*x323*x325))+(((-1.0)*x327*x336)))))+(IKabs(((1.138)+(((-1.0)*x358))+x357)))+(IKabs(((1.138)+(((-1.0)*x356))+x354+x348)))+(IKabs(((-1.138)+(((-1.0)*x356))+x354+x348)))+(IKabs(((-1.138)+(((-1.0)*x358))+x357))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x359=(gconst11*r20);
IkReal x360=((1.37)*sj4);
IkReal x361=(r22*sj4);
IkReal x362=(gconst10*r21);
IkReal x363=((0.93)*cj4);
IkReal x364=(cj4*r22);
IkReal x365=((0.31)*cj4);
IkReal x366=((4.11)*sj4);
IkReal x367=((4.11)*x364);
IkReal x368=((0.912)*x359);
IkReal x369=((1.37)*x364);
IkReal x370=((0.304)*x359);
IkReal x371=(x359*x366);
IkReal x372=(x359*x363);
IkReal x373=(x359*x360);
IkReal x374=(x359*x365);
IkReal x375=(x372+x371+x368+x367);
IkReal x376=(x374+x373+x370+x369);
IkReal x377=((((12.0)*pz))+(((0.912)*x362))+(((0.93)*x361))+((x362*x366))+((x362*x363)));
IkReal x378=((((0.304)*x362))+(((4.0)*pz))+(((0.31)*x361))+((x360*x362))+((x362*x365)));
op[0]=((-1.138)+(((-1.0)*x378))+x376);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x377))+x375);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x377))+x375);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x378))+x376);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x379=((4.0)*pz);
IkReal x380=((12.0)*pz);
IkReal x381=(sj0*sj4);
IkReal x382=((0.93)*gconst10);
IkReal x383=(gconst11*r10);
IkReal x384=((0.93)*cj4);
IkReal x385=(cj0*r02);
IkReal x386=(r12*sj0);
IkReal x387=(gconst11*r20);
IkReal x388=((0.31)*gconst10);
IkReal x389=((1.37)*sj4);
IkReal x390=(cj4*r22);
IkReal x391=((0.31)*cj4);
IkReal x392=(gconst10*r21);
IkReal x393=((4.11)*sj4);
IkReal x394=((0.304)*x392);
IkReal x395=((0.912)*x392);
IkReal x396=(cj0*r01*sj4);
IkReal x397=(x392*x393);
IkReal x398=(x389*x392);
IkReal x399=(cj0*gconst11*r00*sj4);
IkReal x400=(r11*x381*x388);
IkReal x401=(x382*x396);
IkReal x402=(r11*x381*x382);
IkReal x403=(x388*x396);
IkReal x404=(x380+x395+x397+x401+x402);
IkReal x405=(x379+x394+x398+x400+x403);
IkReal x406=((((0.912)*x387))+((x384*x385))+((x384*x386))+(((0.93)*x381*x383))+(((4.11)*x390))+((x387*x393))+(((0.93)*x399)));
IkReal x407=(((x385*x391))+((x387*x389))+(((1.37)*x390))+(((0.31)*x381*x383))+(((0.31)*x399))+((x386*x391))+(((0.304)*x387)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1*htj1*htj1)*(((1.138)+x404+(((-1.0)*x406))))))+(((0.428)*htj1))+x405+(((htj1*htj1)*(((-1.138)+x404+(((-1.0)*x406))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x405+(((-1.0)*x407))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x407)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x408=((1.0)*cj1);
IkReal x409=(cj4*r22);
IkReal x410=(gconst11*r20);
IkReal x411=((1.0)*sj1);
IkReal x412=(sj1*sj4);
IkReal x413=(gconst10*r21*sj4);
IkReal x414=(cj4*gconst10*r21);
if( IKabs((((sj1*x409))+((x410*x412))+(((-1.0)*cj4*x408*x410))+(((-1.0)*x411*x413))+((cj1*r22*sj4))+((cj1*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x408*x410))+((sj1*x414))+(((-1.0)*cj4*x410*x411))+((r22*x412))+((cj1*x413))+(((-1.0)*x408*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x409))+((x410*x412))+(((-1.0)*cj4*x408*x410))+(((-1.0)*x411*x413))+((cj1*r22*sj4))+((cj1*x414))))+IKsqr(((((-1.0)*sj4*x408*x410))+((sj1*x414))+(((-1.0)*cj4*x410*x411))+((r22*x412))+((cj1*x413))+(((-1.0)*x408*x409))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x409))+((x410*x412))+(((-1.0)*cj4*x408*x410))+(((-1.0)*x411*x413))+((cj1*r22*sj4))+((cj1*x414))), ((((-1.0)*sj4*x408*x410))+((sj1*x414))+(((-1.0)*cj4*x410*x411))+((r22*x412))+((cj1*x413))+(((-1.0)*x408*x409))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x415=IKcos(j2);
IkReal x416=IKsin(j2);
IkReal x417=(gconst10*sj4);
IkReal x418=(cj0*r01);
IkReal x419=((0.076)*gconst11);
IkReal x420=((1.0)*r21);
IkReal x421=((0.076)*gconst10);
IkReal x422=(r11*sj0);
IkReal x423=(r10*sj0);
IkReal x424=(cj0*r00);
IkReal x425=(r12*sj0);
IkReal x426=(cj4*gconst10);
IkReal x427=(cj0*r02);
IkReal x428=((1.0)*cj4);
IkReal x429=(gconst11*sj4);
IkReal x430=(cj1*x415);
IkReal x431=(cj1*x416);
IkReal x432=(gconst11*x428);
IkReal x433=(sj1*x416);
IkReal x434=(sj1*x415);
IkReal x435=((1.0)*x433);
evalcond[0]=(((r20*x429))+(((-1.0)*x435))+((cj4*r22))+x430+(((-1.0)*x417*x420)));
evalcond[1]=((((-1.0)*x420*x426))+x431+x434+(((-1.0)*r22*sj4))+((cj4*gconst11*r20)));
evalcond[2]=(((r21*x421))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x433))+(((-1.0)*r20*x419))+pz+(((0.3425)*x430))+(((0.0775)*x431))+(((0.0775)*x434)));
evalcond[3]=((((-1.0)*x435))+((sj4*x425))+((sj4*x427))+((x418*x426))+(((-1.0)*x424*x432))+x430+((x422*x426))+(((-1.0)*x423*x432)));
evalcond[4]=((((-1.0)*x424*x429))+(((-1.0)*x431))+(((-1.0)*x434))+(((-1.0)*x427*x428))+(((-1.0)*x423*x429))+((x417*x418))+(((-1.0)*x425*x428))+((x417*x422)));
evalcond[5]=((((-1.0)*x421*x422))+(((0.2845)*sj1))+(((-0.3425)*x434))+(((-0.3425)*x431))+((x419*x423))+((x419*x424))+(((0.0535)*cj1))+(((-0.0775)*x433))+(((-1.0)*py*sj0))+(((-1.0)*x418*x421))+(((0.0775)*x430))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x436=cj5*cj5;
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign(((1.0)+(((r20*r20)*(((-1.0)+x436))))+(((-1.0)*x436*(r21*r21)))+(((-2.0)*cj5*r20*r21*sj5)))),-1);
if(!x438.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x437.value)+(((1.5707963267949)*(x438.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x439=IKcos(j0);
IkReal x440=IKsin(j0);
IkReal x441=((1.0)*r01);
IkReal x442=((1.0)*r10);
IkReal x443=(cj5*x440);
IkReal x444=(sj5*x439);
IkReal x445=(sj4*x440);
IkReal x446=(cj5*x439);
IkReal x447=(sj5*x440);
IkReal x448=(r12*x439);
evalcond[0]=(((r01*x446))+((r00*x444))+((r10*x447))+((r11*x443)));
evalcond[1]=((1.0)+(((-1.0)*r00*x447))+((r10*x444))+((r11*x446))+(((-1.0)*x441*x443)));
evalcond[2]=(((px*x440))+(((-0.076)*r11*x444))+(((-1.0)*py*x439))+(((-0.076)*r00*x443))+(((0.076)*r01*x447))+(((0.076)*r10*x446)));
evalcond[3]=(((cj4*r02*x440))+((r11*sj4*x444))+(((-1.0)*sj4*x442*x446))+(((-1.0)*cj4*x448))+((r00*sj4*x443))+(((-1.0)*sj5*x441*x445)));
evalcond[4]=(((sj4*x448))+(((-1.0)*cj4*x442*x446))+(((-1.0)*r02*x445))+(((-1.0)*cj4*x441*x447))+((cj4*r11*x444))+((cj4*r00*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x449=((4.11)*pz);
IkReal x450=(cj5*r20);
IkReal x451=((4.11)*sj4);
IkReal x452=((0.31)*cj4);
IkReal x453=((0.07068)*sj5);
IkReal x454=(cj0*r01);
IkReal x455=(r21*sj5);
IkReal x456=(r22*sj4);
IkReal x457=((0.93)*cj4);
IkReal x458=((1.37)*sj4);
IkReal x459=((0.07068)*cj5);
IkReal x460=(r10*sj0);
IkReal x461=(cj0*r00);
IkReal x462=((0.02356)*cj5);
IkReal x463=(cj0*px);
IkReal x464=((0.49325)*sj4);
IkReal x465=(cj4*r22);
IkReal x466=(r11*sj0);
IkReal x467=((0.02356)*sj5);
IkReal x468=(py*sj0);
IkReal x469=((1.47975)*sj4);
IkReal x470=((0.31236)*x455);
IkReal x471=((4.11)*x465);
IkReal x472=((0.912)*x450);
IkReal x473=(x459*x460);
IkReal x474=(x459*x461);
IkReal x475=(x455*x469);
IkReal x476=(x450*x457);
IkReal x477=(x450*x451);
IkReal x478=(x476+x477+x471+x472);
IkReal x479=(((x455*x457))+(((12.0)*pz))+(((0.912)*x455))+((x451*x455))+(((0.93)*x456)));
IkReal x480=(x449+x474+x475+x470+x473);
IkReal x481=(((x453*x454))+((x453*x466))+(((0.31236)*x450))+((x450*x469))+(((0.93)*x463))+(((0.93)*x468))+(((1.47975)*x465)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+(((-1.0)*x479))+x478)))+(IKabs(((1.138)+(((-1.0)*x479))+x478)))+(IKabs(((0.37318)+(((-1.0)*x481))+x480)))+(IKabs(((-0.37318)+(((-1.0)*x481))+x480)))+(IKabs(((0.37318)+(((-1.0)*x466*x467))+(((-0.49325)*x465))+(((-0.31)*x468))+(((-0.31)*x463))+((x455*x464))+(((1.37)*pz))+((x461*x462))+(((-0.10412)*x450))+(((-1.0)*x454*x467))+((x460*x462))+(((-1.0)*x450*x464))+(((0.10412)*x455)))))+(IKabs(((-1.138)+(((-0.31)*x456))+(((0.304)*x450))+(((1.37)*x465))+(((-0.304)*x455))+(((-1.0)*x455*x458))+(((-1.0)*x452*x455))+((x450*x452))+((x450*x458))+(((-4.0)*pz))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x482=(cj5*r20);
IkReal x483=((4.11)*sj4);
IkReal x484=(r21*sj5);
IkReal x485=((0.31)*cj4);
IkReal x486=((0.93)*cj4);
IkReal x487=(r22*sj4);
IkReal x488=(cj4*r22);
IkReal x489=((1.37)*sj4);
IkReal x490=((4.11)*x488);
IkReal x491=((0.912)*x482);
IkReal x492=((1.37)*x488);
IkReal x493=((0.304)*x482);
IkReal x494=(x482*x486);
IkReal x495=(x482*x483);
IkReal x496=(x482*x489);
IkReal x497=(x482*x485);
IkReal x498=(x492+x493+x496+x497);
IkReal x499=(x490+x491+x494+x495);
IkReal x500=(((x484*x486))+(((12.0)*pz))+((x483*x484))+(((0.93)*x487))+(((0.912)*x484)));
IkReal x501=(((x484*x485))+((x484*x489))+(((0.304)*x484))+(((4.0)*pz))+(((0.31)*x487)));
op[0]=((-1.138)+(((-1.0)*x501))+x498);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x500))+x499);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x500))+x499);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x501))+x498);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x502=((1.37)*pz);
IkReal x503=((4.11)*pz);
IkReal x504=((0.07068)*sj5);
IkReal x505=(cj0*r01);
IkReal x506=(cj5*r20);
IkReal x507=(r21*sj5);
IkReal x508=((0.07068)*cj5);
IkReal x509=(r10*sj0);
IkReal x510=(cj0*px);
IkReal x511=((0.49325)*sj4);
IkReal x512=(cj4*r22);
IkReal x513=(r11*sj0);
IkReal x514=(cj0*r00);
IkReal x515=((0.02356)*sj5);
IkReal x516=((0.02356)*cj5);
IkReal x517=(py*sj0);
IkReal x518=((1.47975)*sj4);
IkReal x519=((0.10412)*x507);
IkReal x520=((0.31236)*x507);
IkReal x521=(x509*x516);
IkReal x522=(x508*x509);
IkReal x523=(x508*x514);
IkReal x524=(x507*x518);
IkReal x525=(x514*x516);
IkReal x526=(x507*x511);
IkReal x527=(x503+x522+x523+x520+x524);
IkReal x528=(x502+x521+x526+x525+x519);
IkReal x529=(((x504*x513))+(((0.31236)*x506))+(((0.93)*x510))+(((0.93)*x517))+(((1.47975)*x512))+((x506*x518))+((x504*x505)));
IkReal x530=((((0.49325)*x512))+((x513*x515))+(((0.31)*x517))+(((0.31)*x510))+((x506*x511))+(((0.10412)*x506))+((x505*x515)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x530))+(((0.32298)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x530))+x528))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x529))+x527))))+x528+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x529))+x527)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x531=(cj4*r22);
IkReal x532=((1.0)*cj1);
IkReal x533=(sj1*sj4);
IkReal x534=(cj5*r20);
IkReal x535=(r21*sj5);
IkReal x536=(cj4*sj1);
IkReal x537=(cj1*x535);
if( IKabs((((cj4*x537))+((sj1*x531))+(((-1.0)*x533*x535))+(((-1.0)*cj4*x532*x534))+((cj1*r22*sj4))+((x533*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x531*x532))+((r22*x533))+(((-1.0)*sj4*x532*x534))+((x535*x536))+(((-1.0)*x534*x536))+((sj4*x537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x537))+((sj1*x531))+(((-1.0)*x533*x535))+(((-1.0)*cj4*x532*x534))+((cj1*r22*sj4))+((x533*x534))))+IKsqr(((((-1.0)*x531*x532))+((r22*x533))+(((-1.0)*sj4*x532*x534))+((x535*x536))+(((-1.0)*x534*x536))+((sj4*x537))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x537))+((sj1*x531))+(((-1.0)*x533*x535))+(((-1.0)*cj4*x532*x534))+((cj1*r22*sj4))+((x533*x534))), ((((-1.0)*x531*x532))+((r22*x533))+(((-1.0)*sj4*x532*x534))+((x535*x536))+(((-1.0)*x534*x536))+((sj4*x537))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x538=IKcos(j2);
IkReal x539=IKsin(j2);
IkReal x540=((1.0)*sj4);
IkReal x541=((0.076)*sj5);
IkReal x542=(r11*sj0);
IkReal x543=((1.0)*cj4);
IkReal x544=(cj0*r02);
IkReal x545=(cj0*r01);
IkReal x546=(cj5*r20);
IkReal x547=((1.0)*sj1);
IkReal x548=(sj4*sj5);
IkReal x549=(r21*sj5);
IkReal x550=(cj4*sj5);
IkReal x551=(r12*sj0);
IkReal x552=(cj1*x538);
IkReal x553=(cj5*r10*sj0);
IkReal x554=(cj0*cj5*r00);
IkReal x555=(cj1*x539);
IkReal x556=(sj1*x539);
IkReal x557=(sj1*x538);
IkReal x558=(x539*x547);
evalcond[0]=(((cj4*r22))+(((-1.0)*x540*x549))+(((-1.0)*x558))+x552+((sj4*x546)));
evalcond[1]=((((-1.0)*r22*x540))+((cj4*x546))+x557+x555+(((-1.0)*x543*x549)));
evalcond[2]=(((r21*x541))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x552))+(((-0.3425)*x556))+(((0.0775)*x557))+(((0.0775)*x555))+(((-0.076)*x546))+pz);
evalcond[3]=(((sj4*x551))+((x542*x550))+(((-1.0)*x558))+x552+(((-1.0)*x543*x553))+(((-1.0)*x543*x554))+((sj4*x544))+((x545*x550)));
evalcond[4]=((((-1.0)*x555))+((x542*x548))+(((-1.0)*x538*x547))+(((-1.0)*x540*x553))+(((-1.0)*x540*x554))+(((-1.0)*x543*x551))+(((-1.0)*x543*x544))+((x545*x548)));
evalcond[5]=((((-1.0)*x541*x542))+(((-1.0)*x541*x545))+(((0.2845)*sj1))+(((-0.0775)*x556))+(((-0.3425)*x557))+(((-0.3425)*x555))+(((0.0775)*x552))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*x554))+(((0.076)*x553))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x559=(cj4*sj5);
IkReal x560=((1.0)*cj4*cj5);
CheckValue<IkReal> x561 = IKatan2WithCheck(IkReal((((r11*x559))+(((-1.0)*r10*x560))+((r12*sj4)))),IkReal((((r02*sj4))+((r01*x559))+(((-1.0)*r00*x560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x561.valid){
continue;
}
CheckValue<IkReal> x562=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x562.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x561.value)+(((1.5707963267949)*(x562.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x563=IKcos(j0);
IkReal x564=IKsin(j0);
IkReal x565=((1.0)*r01);
IkReal x566=((1.0)*r10);
IkReal x567=(cj5*x564);
IkReal x568=(sj5*x563);
IkReal x569=(sj4*x564);
IkReal x570=(cj5*x563);
IkReal x571=(sj5*x564);
IkReal x572=(r12*x563);
evalcond[0]=(((r01*x570))+((r00*x568))+((r10*x571))+((r11*x567)));
evalcond[1]=((1.0)+(((-1.0)*r00*x571))+((r10*x568))+((r11*x570))+(((-1.0)*x565*x567)));
evalcond[2]=((((-1.0)*py*x563))+(((-0.076)*r11*x568))+(((0.076)*r01*x571))+(((-0.076)*r00*x567))+(((0.076)*r10*x570))+((px*x564)));
evalcond[3]=(((r11*sj4*x568))+(((-1.0)*sj5*x565*x569))+(((-1.0)*sj4*x566*x570))+(((-1.0)*cj4*x572))+((r00*sj4*x567))+((cj4*r02*x564)));
evalcond[4]=(((cj4*r11*x568))+((sj4*x572))+(((-1.0)*cj4*x566*x570))+(((-1.0)*r02*x569))+(((-1.0)*cj4*x565*x571))+((cj4*r00*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x573=((4.11)*pz);
IkReal x574=(cj5*r20);
IkReal x575=((4.11)*sj4);
IkReal x576=((0.31)*cj4);
IkReal x577=((0.07068)*sj5);
IkReal x578=(cj0*r01);
IkReal x579=(r21*sj5);
IkReal x580=(r22*sj4);
IkReal x581=((0.93)*cj4);
IkReal x582=((1.37)*sj4);
IkReal x583=((0.07068)*cj5);
IkReal x584=(r10*sj0);
IkReal x585=(cj0*r00);
IkReal x586=((0.02356)*cj5);
IkReal x587=(cj0*px);
IkReal x588=((0.49325)*sj4);
IkReal x589=(cj4*r22);
IkReal x590=(r11*sj0);
IkReal x591=((0.02356)*sj5);
IkReal x592=(py*sj0);
IkReal x593=((1.47975)*sj4);
IkReal x594=((0.31236)*x579);
IkReal x595=((4.11)*x589);
IkReal x596=((0.912)*x574);
IkReal x597=(x583*x584);
IkReal x598=(x583*x585);
IkReal x599=(x579*x593);
IkReal x600=(x574*x581);
IkReal x601=(x574*x575);
IkReal x602=(x596+x595+x601+x600);
IkReal x603=(((x579*x581))+(((12.0)*pz))+((x575*x579))+(((0.912)*x579))+(((0.93)*x580)));
IkReal x604=(x573+x597+x594+x599+x598);
IkReal x605=((((0.31236)*x574))+(((1.47975)*x589))+(((0.93)*x592))+((x577*x578))+((x577*x590))+(((0.93)*x587))+((x574*x593)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+((x584*x586))+(((1.37)*pz))+((x579*x588))+(((0.10412)*x579))+(((-0.31)*x587))+(((-0.10412)*x574))+(((-1.0)*x590*x591))+((x585*x586))+(((-0.31)*x592))+(((-1.0)*x574*x588))+(((-0.49325)*x589))+(((-1.0)*x578*x591)))))+(IKabs(((-1.138)+(((-0.31)*x580))+(((1.37)*x589))+((x574*x576))+(((-1.0)*x579*x582))+(((-1.0)*x576*x579))+((x574*x582))+(((0.304)*x574))+(((-4.0)*pz))+(((-0.304)*x579)))))+(IKabs(((-1.138)+x602+(((-1.0)*x603)))))+(IKabs(((-0.37318)+x604+(((-1.0)*x605)))))+(IKabs(((1.138)+x602+(((-1.0)*x603)))))+(IKabs(((0.37318)+x604+(((-1.0)*x605))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x606=(cj5*r20);
IkReal x607=((4.11)*sj4);
IkReal x608=(r21*sj5);
IkReal x609=((0.31)*cj4);
IkReal x610=((0.93)*cj4);
IkReal x611=(r22*sj4);
IkReal x612=(cj4*r22);
IkReal x613=((1.37)*sj4);
IkReal x614=((4.11)*x612);
IkReal x615=((0.912)*x606);
IkReal x616=((1.37)*x612);
IkReal x617=((0.304)*x606);
IkReal x618=(x606*x610);
IkReal x619=(x606*x607);
IkReal x620=(x606*x613);
IkReal x621=(x606*x609);
IkReal x622=(x616+x617+x621+x620);
IkReal x623=(x618+x619+x614+x615);
IkReal x624=((((12.0)*pz))+((x608*x610))+((x607*x608))+(((0.93)*x611))+(((0.912)*x608)));
IkReal x625=(((x608*x609))+((x608*x613))+(((4.0)*pz))+(((0.31)*x611))+(((0.304)*x608)));
op[0]=((-1.138)+(((-1.0)*x625))+x622);
op[1]=-0.428;
op[2]=((-1.138)+(((-1.0)*x624))+x623);
op[3]=-0.856;
op[4]=((1.138)+(((-1.0)*x624))+x623);
op[5]=-0.428;
op[6]=((1.138)+(((-1.0)*x625))+x622);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x626=((1.37)*pz);
IkReal x627=((4.11)*pz);
IkReal x628=((0.07068)*sj5);
IkReal x629=(cj0*r01);
IkReal x630=(cj5*r20);
IkReal x631=(r21*sj5);
IkReal x632=((0.07068)*cj5);
IkReal x633=(r10*sj0);
IkReal x634=(cj0*px);
IkReal x635=((0.49325)*sj4);
IkReal x636=(cj4*r22);
IkReal x637=(r11*sj0);
IkReal x638=(cj0*r00);
IkReal x639=((0.02356)*sj5);
IkReal x640=((0.02356)*cj5);
IkReal x641=(py*sj0);
IkReal x642=((1.47975)*sj4);
IkReal x643=((0.10412)*x631);
IkReal x644=((0.31236)*x631);
IkReal x645=(x633*x640);
IkReal x646=(x632*x633);
IkReal x647=(x632*x638);
IkReal x648=(x631*x642);
IkReal x649=(x638*x640);
IkReal x650=(x631*x635);
IkReal x651=(x647+x646+x644+x648+x627);
IkReal x652=(x645+x643+x649+x650+x626);
IkReal x653=((((0.93)*x634))+((x628*x637))+((x628*x629))+(((0.93)*x641))+(((1.47975)*x636))+((x630*x642))+(((0.31236)*x630)));
IkReal x654=((((0.10412)*x630))+(((0.31)*x634))+(((0.31)*x641))+((x629*x639))+(((0.49325)*x636))+((x630*x635))+((x637*x639)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x654))+x652))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+(((-1.0)*x653))+x651))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x654))+(((0.32298)*htj1))+(((htj1*htj1)*(((-0.37318)+(((-1.0)*x653))+x651))))+x652);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x655=(cj4*r22);
IkReal x656=((1.0)*cj1);
IkReal x657=(sj1*sj4);
IkReal x658=(cj5*r20);
IkReal x659=(r21*sj5);
IkReal x660=(cj4*sj1);
IkReal x661=(cj1*x659);
if( IKabs((((sj1*x655))+(((-1.0)*cj4*x656*x658))+((x657*x658))+((cj4*x661))+((cj1*r22*sj4))+(((-1.0)*x657*x659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x661))+(((-1.0)*sj4*x656*x658))+(((-1.0)*x655*x656))+((r22*x657))+((x659*x660))+(((-1.0)*x658*x660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x655))+(((-1.0)*cj4*x656*x658))+((x657*x658))+((cj4*x661))+((cj1*r22*sj4))+(((-1.0)*x657*x659))))+IKsqr((((sj4*x661))+(((-1.0)*sj4*x656*x658))+(((-1.0)*x655*x656))+((r22*x657))+((x659*x660))+(((-1.0)*x658*x660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x655))+(((-1.0)*cj4*x656*x658))+((x657*x658))+((cj4*x661))+((cj1*r22*sj4))+(((-1.0)*x657*x659))), (((sj4*x661))+(((-1.0)*sj4*x656*x658))+(((-1.0)*x655*x656))+((r22*x657))+((x659*x660))+(((-1.0)*x658*x660))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x662=IKcos(j2);
IkReal x663=IKsin(j2);
IkReal x664=((1.0)*sj4);
IkReal x665=((0.076)*sj5);
IkReal x666=(r11*sj0);
IkReal x667=((1.0)*cj4);
IkReal x668=(cj0*r02);
IkReal x669=(cj0*r01);
IkReal x670=(cj5*r20);
IkReal x671=((1.0)*sj1);
IkReal x672=(sj4*sj5);
IkReal x673=(r21*sj5);
IkReal x674=(cj4*sj5);
IkReal x675=(r12*sj0);
IkReal x676=(cj1*x662);
IkReal x677=(cj5*r10*sj0);
IkReal x678=(cj0*cj5*r00);
IkReal x679=(cj1*x663);
IkReal x680=(sj1*x663);
IkReal x681=(sj1*x662);
IkReal x682=(x663*x671);
evalcond[0]=(((cj4*r22))+(((-1.0)*x682))+(((-1.0)*x664*x673))+x676+((sj4*x670)));
evalcond[1]=((((-1.0)*r22*x664))+(((-1.0)*x667*x673))+x679+x681+((cj4*x670)));
evalcond[2]=((((0.0775)*x679))+(((0.0535)*sj1))+(((0.0775)*x681))+(((-0.2845)*cj1))+((r21*x665))+pz+(((0.3425)*x676))+(((-0.3425)*x680))+(((-0.076)*x670)));
evalcond[3]=((((-1.0)*x682))+((sj4*x668))+((x669*x674))+((x666*x674))+(((-1.0)*x667*x677))+(((-1.0)*x667*x678))+x676+((sj4*x675)));
evalcond[4]=((((-1.0)*x662*x671))+(((-1.0)*x664*x677))+(((-1.0)*x664*x678))+((x669*x672))+((x666*x672))+(((-1.0)*x667*x675))+(((-1.0)*x679))+(((-1.0)*x667*x668)));
evalcond[5]=((((-1.0)*x665*x669))+(((-1.0)*x665*x666))+(((-0.0775)*x680))+(((0.0775)*x676))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x679))+(((-0.3425)*x681))+(((0.076)*x677))+(((0.076)*x678))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x683=((0.076)*sj5);
IkReal x684=((0.076)*cj5);
CheckValue<IkReal> x685=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x684))+(((-1.0)*r11*x683)))),IkReal(((((-1.0)*r01*x683))+(((-1.0)*px))+((r00*x684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x685.value)))+(x686.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x687=IKcos(j0);
IkReal x688=IKsin(j0);
IkReal x689=((1.0)*r01);
IkReal x690=((1.0)*r10);
IkReal x691=(cj5*x688);
IkReal x692=(sj5*x687);
IkReal x693=(sj4*x688);
IkReal x694=(cj5*x687);
IkReal x695=(sj5*x688);
IkReal x696=(r12*x687);
evalcond[0]=(((r10*x695))+((r11*x691))+((r00*x692))+((r01*x694)));
evalcond[1]=((1.0)+((r10*x692))+((r11*x694))+(((-1.0)*x689*x691))+(((-1.0)*r00*x695)));
evalcond[2]=(((px*x688))+(((-1.0)*py*x687))+(((0.076)*r01*x695))+(((-0.076)*r11*x692))+(((0.076)*r10*x694))+(((-0.076)*r00*x691)));
evalcond[3]=((((-1.0)*sj5*x689*x693))+((r00*sj4*x691))+(((-1.0)*cj4*x696))+((cj4*r02*x688))+((r11*sj4*x692))+(((-1.0)*sj4*x690*x694)));
evalcond[4]=((((-1.0)*r02*x693))+((sj4*x696))+(((-1.0)*cj4*x689*x695))+((cj4*r11*x692))+(((-1.0)*cj4*x690*x694))+((cj4*r00*x691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=1.0;
j3=0;
IkReal x697=((4.11)*pz);
IkReal x698=(cj5*r20);
IkReal x699=((4.11)*sj4);
IkReal x700=((0.31)*cj4);
IkReal x701=((0.07068)*sj5);
IkReal x702=(cj0*r01);
IkReal x703=(r21*sj5);
IkReal x704=(r22*sj4);
IkReal x705=((0.93)*cj4);
IkReal x706=((1.37)*sj4);
IkReal x707=((0.07068)*cj5);
IkReal x708=(r10*sj0);
IkReal x709=(cj0*r00);
IkReal x710=((0.02356)*cj5);
IkReal x711=(cj0*px);
IkReal x712=((0.49325)*sj4);
IkReal x713=(cj4*r22);
IkReal x714=(r11*sj0);
IkReal x715=((0.02356)*sj5);
IkReal x716=(py*sj0);
IkReal x717=((1.47975)*sj4);
IkReal x718=((0.31236)*x703);
IkReal x719=((4.11)*x713);
IkReal x720=((0.912)*x698);
IkReal x721=(x707*x708);
IkReal x722=(x707*x709);
IkReal x723=(x703*x717);
IkReal x724=(x698*x705);
IkReal x725=(x698*x699);
IkReal x726=(x719+x720+x724+x725);
IkReal x727=((((12.0)*pz))+((x703*x705))+(((0.93)*x704))+(((0.912)*x703))+((x699*x703)));
IkReal x728=(x697+x718+x721+x722+x723);
IkReal x729=(((x701*x714))+((x701*x702))+(((0.31236)*x698))+(((0.93)*x716))+(((0.93)*x711))+(((1.47975)*x713))+((x698*x717)));
j1eval[0]=((3.00392)+(IKabs(((1.138)+(((-1.0)*x727))+x726)))+(IKabs(((0.37318)+(((-1.0)*x714*x715))+(((1.37)*pz))+(((-0.49325)*x713))+(((-1.0)*x702*x715))+((x703*x712))+(((-0.31)*x716))+(((-0.31)*x711))+(((-0.10412)*x698))+((x709*x710))+(((-1.0)*x698*x712))+(((0.10412)*x703))+((x708*x710)))))+(IKabs(((-1.138)+(((-1.0)*x727))+x726)))+(IKabs(((-0.37318)+(((-1.0)*x729))+x728)))+(IKabs(((0.37318)+(((-1.0)*x729))+x728)))+(IKabs(((-1.138)+(((-0.31)*x704))+(((-1.0)*x703*x706))+(((1.37)*x713))+(((-0.304)*x703))+((x698*x700))+((x698*x706))+(((-4.0)*pz))+(((0.304)*x698))+(((-1.0)*x700*x703))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x730=(cj5*r20);
IkReal x731=((4.11)*sj4);
IkReal x732=(r21*sj5);
IkReal x733=((0.31)*cj4);
IkReal x734=((0.93)*cj4);
IkReal x735=(r22*sj4);
IkReal x736=(cj4*r22);
IkReal x737=((1.37)*sj4);
IkReal x738=((4.11)*x736);
IkReal x739=((0.912)*x730);
IkReal x740=((1.37)*x736);
IkReal x741=((0.304)*x730);
IkReal x742=(x730*x734);
IkReal x743=(x730*x731);
IkReal x744=(x730*x737);
IkReal x745=(x730*x733);
IkReal x746=(x744+x745+x740+x741);
IkReal x747=(x739+x738+x742+x743);
IkReal x748=(((x731*x732))+(((12.0)*pz))+(((0.93)*x735))+(((0.912)*x732))+((x732*x734)));
IkReal x749=((((4.0)*pz))+(((0.304)*x732))+((x732*x737))+((x732*x733))+(((0.31)*x735)));
op[0]=((-1.138)+x746+(((-1.0)*x749)));
op[1]=-0.428;
op[2]=((-1.138)+x747+(((-1.0)*x748)));
op[3]=-0.856;
op[4]=((1.138)+x747+(((-1.0)*x748)));
op[5]=-0.428;
op[6]=((1.138)+x746+(((-1.0)*x749)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x750=((1.37)*pz);
IkReal x751=((4.11)*pz);
IkReal x752=((0.07068)*sj5);
IkReal x753=(cj0*r01);
IkReal x754=(cj5*r20);
IkReal x755=(r21*sj5);
IkReal x756=((0.07068)*cj5);
IkReal x757=(r10*sj0);
IkReal x758=(cj0*px);
IkReal x759=((0.49325)*sj4);
IkReal x760=(cj4*r22);
IkReal x761=(r11*sj0);
IkReal x762=(cj0*r00);
IkReal x763=((0.02356)*sj5);
IkReal x764=((0.02356)*cj5);
IkReal x765=(py*sj0);
IkReal x766=((1.47975)*sj4);
IkReal x767=((0.10412)*x755);
IkReal x768=((0.31236)*x755);
IkReal x769=(x757*x764);
IkReal x770=(x756*x757);
IkReal x771=(x756*x762);
IkReal x772=(x755*x766);
IkReal x773=(x762*x764);
IkReal x774=(x755*x759);
IkReal x775=(x751+x772+x771+x770+x768);
IkReal x776=(x750+x773+x774+x769+x767);
IkReal x777=(((x752*x753))+((x752*x761))+(((0.93)*x765))+(((0.93)*x758))+(((1.47975)*x760))+((x754*x766))+(((0.31236)*x754)));
IkReal x778=((((0.49325)*x760))+(((0.31)*x765))+((x761*x763))+(((0.10412)*x754))+((x753*x763))+(((0.31)*x758))+((x754*x759)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.37318)+x775+(((-1.0)*x777))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x776+(((-1.0)*x778))))))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+x776+(((-1.0)*x778))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x775+(((-1.0)*x777)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x779=(cj4*r22);
IkReal x780=((1.0)*cj1);
IkReal x781=(sj1*sj4);
IkReal x782=(cj5*r20);
IkReal x783=(r21*sj5);
IkReal x784=(cj4*sj1);
IkReal x785=(cj1*x783);
if( IKabs((((x781*x782))+(((-1.0)*cj4*x780*x782))+((cj4*x785))+(((-1.0)*x781*x783))+((sj1*x779))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x780*x782))+((x783*x784))+((sj4*x785))+((r22*x781))+(((-1.0)*x782*x784))+(((-1.0)*x779*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x781*x782))+(((-1.0)*cj4*x780*x782))+((cj4*x785))+(((-1.0)*x781*x783))+((sj1*x779))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*sj4*x780*x782))+((x783*x784))+((sj4*x785))+((r22*x781))+(((-1.0)*x782*x784))+(((-1.0)*x779*x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x781*x782))+(((-1.0)*cj4*x780*x782))+((cj4*x785))+(((-1.0)*x781*x783))+((sj1*x779))+((cj1*r22*sj4))), ((((-1.0)*sj4*x780*x782))+((x783*x784))+((sj4*x785))+((r22*x781))+(((-1.0)*x782*x784))+(((-1.0)*x779*x780))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x786=IKcos(j2);
IkReal x787=IKsin(j2);
IkReal x788=((1.0)*sj4);
IkReal x789=((0.076)*sj5);
IkReal x790=(r11*sj0);
IkReal x791=((1.0)*cj4);
IkReal x792=(cj0*r02);
IkReal x793=(cj0*r01);
IkReal x794=(cj5*r20);
IkReal x795=((1.0)*sj1);
IkReal x796=(sj4*sj5);
IkReal x797=(r21*sj5);
IkReal x798=(cj4*sj5);
IkReal x799=(r12*sj0);
IkReal x800=(cj1*x786);
IkReal x801=(cj5*r10*sj0);
IkReal x802=(cj0*cj5*r00);
IkReal x803=(cj1*x787);
IkReal x804=(sj1*x787);
IkReal x805=(sj1*x786);
IkReal x806=(x787*x795);
evalcond[0]=(((cj4*r22))+(((-1.0)*x788*x797))+((sj4*x794))+x800+(((-1.0)*x806)));
evalcond[1]=((((-1.0)*x791*x797))+((cj4*x794))+(((-1.0)*r22*x788))+x805+x803);
evalcond[2]=((((0.0775)*x805))+(((0.0775)*x803))+(((0.0535)*sj1))+(((-0.076)*x794))+(((-0.2845)*cj1))+(((-0.3425)*x804))+((r21*x789))+pz+(((0.3425)*x800)));
evalcond[3]=(((x790*x798))+(((-1.0)*x791*x801))+(((-1.0)*x791*x802))+((x793*x798))+((sj4*x799))+((sj4*x792))+x800+(((-1.0)*x806)));
evalcond[4]=((((-1.0)*x803))+((x790*x796))+((x793*x796))+(((-1.0)*x791*x792))+(((-1.0)*x791*x799))+(((-1.0)*x788*x801))+(((-1.0)*x788*x802))+(((-1.0)*x786*x795)));
evalcond[5]=((((0.0775)*x800))+(((0.2845)*sj1))+(((-0.3425)*x805))+(((-0.3425)*x803))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.0775)*x804))+(((-1.0)*x789*x790))+(((-1.0)*x789*x793))+(((-1.0)*cj0*px))+(((0.076)*x802))+(((0.076)*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x807=((0.076)*sj5);
IkReal x808=(rxp0_2*sj5);
IkReal x809=(cj5*rxp1_2);
IkReal x810=((0.076)*cj5);
j0eval[0]=((((13.1578947368421)*x808))+(((13.1578947368421)*x809))+r22);
j0eval[1]=IKsign(((((0.076)*r22))+x809+x808));
j0eval[2]=((IKabs((((r00*x810))+(((-1.0)*r01*x807))+(((-1.0)*px)))))+(IKabs(((((-1.0)*r11*x807))+((r10*x810))+(((-1.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x811=((1.0)*cj5);
IkReal x812=(cj4*sj5);
IkReal x813=(((r21*sj4*sj5))+(((-1.0)*r20*sj4*x811))+(((-1.0)*cj4*r22)));
j0eval[0]=x813;
j0eval[1]=((IKabs(((((-1.0)*cj4*r10*x811))+((r11*x812))+((r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x811))+((r01*x812))+((r02*sj4))))));
j0eval[2]=IKsign(x813);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x814=cj5*cj5;
IkReal x815=r20*r20;
IkReal x816=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+x815+((x814*(r21*r21)))+(((-1.0)*x814*x815)));
j0eval[0]=x816;
j0eval[1]=IKsign(x816);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x817=((13.1578947368421)*rxp1_2);
IkReal x818=((13.1578947368421)*rxp0_2);
IkReal x819=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x819) < -0.00001)
continue;
IkReal x820=IKabs(IKsqrt(x819));
IkReal x826 = x819;
if(IKabs(x826)==0){
continue;
}
IkReal x821=pow(x826,-0.5);
CheckValue<IkReal> x827=IKPowWithIntegerCheck(x820,-1);
if(!x827.valid){
continue;
}
IkReal x822=x827.value;
IkReal x823=(r22*x822);
if((((1.0)+(((-1.0)*(x823*x823))))) < -0.00001)
continue;
IkReal x824=IKsqrt(((1.0)+(((-1.0)*(x823*x823)))));
IkReal x825=(x821*x824);
if( (x823) < -1-IKFAST_SINCOS_THRESH || (x823) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x828 = IKatan2WithCheck(IkReal(x817),IkReal(x818),IKFAST_ATAN2_MAGTHRESH);
if(!x828.valid){
continue;
}
IkReal gconst12=((((-1.0)*(IKasin(x823))))+(((-1.0)*(x828.value))));
IkReal gconst13=((((-1.0)*x818*x821*x823))+(((-1.0)*x817*x825)));
IkReal gconst14=(((x818*x825))+(((-1.0)*x817*x821*x823)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x829.valid){
continue;
}
if( ((r22*(x829.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x829.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal(((13.1578947368421)*rxp1_2)),IkReal(((13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin((r22*(x829.value))))+(x830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x831=((0.076)*gconst14);
IkReal x832=((0.076)*gconst13);
CheckValue<IkReal> x833 = IKatan2WithCheck(IkReal((((r10*x831))+(((-1.0)*py))+(((-1.0)*r11*x832)))),IkReal((((r00*x831))+(((-1.0)*px))+(((-1.0)*r01*x832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(IKsign((((gconst13*rxp0_2))+((gconst14*rxp1_2))+((r22*((((gconst13*x832))+((gconst14*x831)))))))),-1);
if(!x834.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x833.value)+(((1.5707963267949)*(x834.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x835=IKsin(j0);
IkReal x836=IKcos(j0);
IkReal x837=(gconst14*r00);
IkReal x838=(gconst13*r01);
IkReal x839=((1.0)*sj4);
IkReal x840=((1.0)*cj4);
IkReal x841=(r02*x835);
IkReal x842=(gconst14*x836);
IkReal x843=(sj4*x835);
IkReal x844=(gconst13*x836);
IkReal x845=(gconst13*x835);
IkReal x846=((0.076)*x835);
IkReal x847=(r12*x836);
IkReal x848=(gconst14*x835);
IkReal x849=(r11*x844);
evalcond[0]=(((r01*x842))+((r00*x844))+((r10*x845))+((r11*x848)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x845))+((r10*x844))+(((-1.0)*r01*x848))+((r11*x842)));
evalcond[2]=((((-0.076)*x849))+((x838*x846))+(((0.076)*r10*x842))+(((-1.0)*x837*x846))+(((-1.0)*py*x836))+((px*x835)));
evalcond[3]=((((-1.0)*x835*x838*x839))+(((-1.0)*r10*x839*x842))+((sj4*x849))+(((-1.0)*x840*x847))+((cj4*x841))+((x837*x843)));
evalcond[4]=((((-1.0)*x835*x838*x840))+((sj4*x847))+((cj4*x835*x837))+((cj4*x849))+(((-1.0)*r10*x840*x842))+(((-1.0)*x839*x841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x850=((13.1578947368421)*rxp1_2);
IkReal x851=((13.1578947368421)*rxp0_2);
IkReal x852=x819;
if((x852) < -0.00001)
continue;
IkReal x853=IKabs(IKsqrt(x852));
IkReal x860 = x852;
if(IKabs(x860)==0){
continue;
}
IkReal x854=pow(x860,-0.5);
CheckValue<IkReal> x861=IKPowWithIntegerCheck(x853,-1);
if(!x861.valid){
continue;
}
IkReal x855=x861.value;
IkReal x856=(r22*x855);
if((((1.0)+(((-1.0)*(x856*x856))))) < -0.00001)
continue;
IkReal x857=IKsqrt(((1.0)+(((-1.0)*(x856*x856)))));
if( (x856) < -1-IKFAST_SINCOS_THRESH || (x856) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(x850),IkReal(x851),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
IkReal x858=((((-1.0)*(IKasin(x856))))+(((-1.0)*(x862.value))));
IkReal x859=(x854*x857);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst13;
cj5=gconst14;
j5=x858;
IkReal gconst12=x858;
IkReal gconst13=((((-1.0)*x851*x854*x856))+(((-1.0)*x850*x859)));
IkReal gconst14=(((x851*x859))+(((-1.0)*x850*x854*x856)));
IkReal x863=((12.0)*pz);
IkReal x864=((4.0)*pz);
IkReal x865=(gconst13*sj4);
IkReal x866=((0.31)*cj0);
IkReal x867=(gconst13*r21);
IkReal x868=((0.93)*sj4);
IkReal x869=((0.93)*cj4);
IkReal x870=(r12*sj0);
IkReal x871=(gconst14*r20);
IkReal x872=((0.31)*sj0);
IkReal x873=(gconst14*r00);
IkReal x874=(gconst14*r10);
IkReal x875=((0.31)*cj4);
IkReal x876=(cj4*r22);
IkReal x877=((0.912)*x867);
IkReal x878=((0.912)*x871);
IkReal x879=((4.11)*x876);
IkReal x880=((0.304)*x867);
IkReal x881=((1.37)*x876);
IkReal x882=((0.304)*x871);
IkReal x883=(x869*x871);
IkReal x884=((4.11)*r21*x865);
IkReal x885=((4.11)*sj4*x871);
IkReal x886=((1.37)*r21*x865);
IkReal x887=((1.37)*sj4*x871);
IkReal x888=((0.93)*cj0*r01*x865);
IkReal x889=((0.93)*r11*sj0*x865);
IkReal x890=((-1.138)+x863+x877+x884);
IkReal x891=(x878+x879+x885);
IkReal x892=(x887+x881+x882);
IkReal x893=((1.138)+x864+x886+x880);
IkReal x894=(x889+x888);
IkReal x895=((1.138)+x863+x877+x884);
IkReal x896=(((x867*x869))+((r22*x868))+x891);
IkReal x897=(((cj0*r02*x869))+((sj0*x868*x874))+((cj0*x868*x873))+((x869*x870))+x891);
j1eval[0]=((3.424)+(IKabs(((((-1.0)*x896))+x883+x895)))+(IKabs(((((-1.0)*x897))+x894+x890)))+(IKabs(((((-1.0)*x896))+x883+x890)))+(IKabs((((x871*x875))+(((-1.0)*x892))+(((-0.31)*r22*sj4))+(((-1.0)*x867*x875))+x893)))+(IKabs(((((-1.0)*x897))+x894+x895)))+(IKabs(((((-1.0)*cj4*r02*x866))+((r01*x865*x866))+((r11*x865*x872))+(((-1.0)*x892))+(((-1.0)*sj4*x866*x873))+(((-1.0)*x870*x875))+(((-1.0)*sj4*x872*x874))+x893))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x898=((12.0)*pz);
IkReal x899=((4.0)*pz);
IkReal x900=(gconst13*r21);
IkReal x901=(gconst14*r20);
IkReal x902=((1.37)*sj4);
IkReal x903=((0.93)*cj4);
IkReal x904=(r22*sj4);
IkReal x905=((0.31)*cj4);
IkReal x906=(cj4*r22);
IkReal x907=((4.11)*sj4);
IkReal x908=((0.912)*x900);
IkReal x909=((0.304)*x900);
IkReal x910=(x901*x903);
IkReal x911=(x900*x907);
IkReal x912=(x900*x902);
IkReal x913=(x901*x905);
IkReal x914=(x898+x911+x910+x908);
IkReal x915=(x899+x913+x912+x909);
IkReal x916=(((x901*x907))+((x900*x903))+(((0.912)*x901))+(((0.93)*x904))+(((4.11)*x906)));
IkReal x917=((((1.37)*x906))+(((0.31)*x904))+((x901*x902))+((x900*x905))+(((0.304)*x901)));
op[0]=((1.138)+(((-1.0)*x917))+x915);
op[1]=0.428;
op[2]=((1.138)+(((-1.0)*x916))+x914);
op[3]=0.856;
op[4]=((-1.138)+(((-1.0)*x916))+x914);
op[5]=0.428;
op[6]=((-1.138)+(((-1.0)*x917))+x915);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x918=((4.0)*pz);
IkReal x919=((12.0)*pz);
IkReal x920=(gconst13*sj4);
IkReal x921=((0.31)*cj0);
IkReal x922=(gconst13*r21);
IkReal x923=((0.93)*cj4);
IkReal x924=(r12*sj0);
IkReal x925=(gconst14*r20);
IkReal x926=((0.31)*sj0);
IkReal x927=(gconst14*sj4);
IkReal x928=((0.93)*cj0);
IkReal x929=(cj4*r22);
IkReal x930=((0.93)*sj0);
IkReal x931=((0.304)*x922);
IkReal x932=((0.912)*x922);
IkReal x933=((1.37)*r21*x920);
IkReal x934=((4.11)*r21*x920);
IkReal x935=(r11*x920*x926);
IkReal x936=(r01*x920*x921);
IkReal x937=(r01*x920*x928);
IkReal x938=(r11*x920*x930);
IkReal x939=(x935+x936+x931+x933+x918);
IkReal x940=(x938+x934+x937+x932+x919);
IkReal x941=(((r10*x927*x930))+(((4.11)*sj4*x925))+((cj0*r02*x923))+((r00*x927*x928))+(((4.11)*x929))+((x923*x924))+(((0.912)*x925)));
IkReal x942=((((0.31)*cj4*x924))+((r00*x921*x927))+((cj4*r02*x921))+(((0.304)*x925))+(((1.37)*sj4*x925))+(((1.37)*x929))+((r10*x926*x927)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x941))+x940))))+(((-1.0)*x942))+(((0.428)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x942))+x939))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-1.138)+(((-1.0)*x941))+x940))))+x939);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x943=((1.0)*cj4);
IkReal x944=(cj1*r22);
IkReal x945=(gconst13*r21);
IkReal x946=(cj1*sj4);
IkReal x947=(r22*sj1);
IkReal x948=((1.0)*sj4);
IkReal x949=(gconst14*r20);
if( IKabs(((((-1.0)*sj1*x945*x948))+((sj1*sj4*x949))+(((-1.0)*x944*x948))+((cj1*cj4*x949))+(((-1.0)*cj1*x943*x945))+((cj4*x947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x945*x946))+(((-1.0)*sj1*x943*x945))+(((-1.0)*x946*x949))+(((-1.0)*x947*x948))+((cj4*sj1*x949))+(((-1.0)*x943*x944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x945*x948))+((sj1*sj4*x949))+(((-1.0)*x944*x948))+((cj1*cj4*x949))+(((-1.0)*cj1*x943*x945))+((cj4*x947))))+IKsqr((((x945*x946))+(((-1.0)*sj1*x943*x945))+(((-1.0)*x946*x949))+(((-1.0)*x947*x948))+((cj4*sj1*x949))+(((-1.0)*x943*x944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x945*x948))+((sj1*sj4*x949))+(((-1.0)*x944*x948))+((cj1*cj4*x949))+(((-1.0)*cj1*x943*x945))+((cj4*x947))), (((x945*x946))+(((-1.0)*sj1*x943*x945))+(((-1.0)*x946*x949))+(((-1.0)*x947*x948))+((cj4*sj1*x949))+(((-1.0)*x943*x944))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x950=IKcos(j2);
IkReal x951=IKsin(j2);
IkReal x952=((0.076)*gconst14);
IkReal x953=(r10*sj0);
IkReal x954=((1.0)*cj4);
IkReal x955=(cj0*r02);
IkReal x956=((1.0)*sj1);
IkReal x957=((1.0)*sj4);
IkReal x958=(gconst13*r21);
IkReal x959=(cj0*r00);
IkReal x960=((0.3425)*sj1);
IkReal x961=(gconst14*r20);
IkReal x962=(r12*sj0);
IkReal x963=(cj1*x950);
IkReal x964=(gconst13*r11*sj0);
IkReal x965=(cj1*x951);
IkReal x966=(cj0*gconst13*r01);
IkReal x967=(sj1*x951);
IkReal x968=(x950*x956);
IkReal x969=((1.0)*x965);
IkReal x970=(x968+x969);
evalcond[0]=(((cj4*r22))+((sj4*x961))+(((-1.0)*x957*x958))+(((-1.0)*x951*x956))+x963);
evalcond[1]=((((-1.0)*r22*x957))+(((-1.0)*x954*x958))+(((-1.0)*x970))+((cj4*x961)));
evalcond[2]=((((0.0775)*x965))+(((0.3425)*x963))+(((-1.0)*r20*x952))+(((0.0535)*sj1))+(((0.0775)*sj1*x950))+(((0.076)*x958))+(((-0.2845)*cj1))+pz+(((-1.0)*x951*x960)));
evalcond[3]=(((sj4*x962))+(((-1.0)*x963))+((sj4*x955))+(((-1.0)*gconst14*x954*x959))+x967+(((-1.0)*gconst14*x953*x954))+((cj4*x964))+((cj4*x966)));
evalcond[4]=(((sj4*x964))+((sj4*x966))+(((-1.0)*gconst14*x957*x959))+(((-1.0)*x954*x955))+(((-1.0)*x954*x962))+(((-1.0)*gconst14*x953*x957))+(((-1.0)*x970)));
evalcond[5]=((((0.0775)*x963))+((x952*x953))+((x952*x959))+(((0.2845)*sj1))+(((-0.0775)*x967))+(((0.0535)*cj1))+(((-1.0)*x950*x960))+(((-0.3425)*x965))+(((-1.0)*py*sj0))+(((-0.076)*x966))+(((-0.076)*x964))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x971=((13.1578947368421)*rxp1_2);
IkReal x972=((13.1578947368421)*rxp0_2);
IkReal x973=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x973) < -0.00001)
continue;
IkReal x974=IKabs(IKsqrt(x973));
IkReal x980 = x973;
if(IKabs(x980)==0){
continue;
}
IkReal x975=pow(x980,-0.5);
CheckValue<IkReal> x981=IKPowWithIntegerCheck(x974,-1);
if(!x981.valid){
continue;
}
IkReal x976=x981.value;
IkReal x977=(r22*x976);
if((((1.0)+(((-1.0)*(x977*x977))))) < -0.00001)
continue;
IkReal x978=IKsqrt(((1.0)+(((-1.0)*(x977*x977)))));
IkReal x979=(x975*x978);
if( (x977) < -1-IKFAST_SINCOS_THRESH || (x977) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x982 = IKatan2WithCheck(IkReal(x971),IkReal(x972),IKFAST_ATAN2_MAGTHRESH);
if(!x982.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(IKasin(x977))+(((-1.0)*(x982.value))));
IkReal gconst16=(((x971*x979))+(((-1.0)*x972*x975*x977)));
IkReal gconst17=((((-1.0)*x972*x979))+(((-1.0)*x971*x975*x977)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x983=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x983.valid){
continue;
}
if( ((r22*(x983.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x983.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x984 = IKatan2WithCheck(IkReal(((13.1578947368421)*rxp1_2)),IkReal(((13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x984.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin((r22*(x983.value))))))+(x984.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x985=((0.076)*gconst16);
IkReal x986=((0.076)*gconst17);
CheckValue<IkReal> x987=IKPowWithIntegerCheck(IKsign((((gconst17*rxp1_2))+((r22*((((gconst17*x986))+((gconst16*x985))))))+((gconst16*rxp0_2)))),-1);
if(!x987.valid){
continue;
}
CheckValue<IkReal> x988 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r10*x986))+(((-1.0)*r11*x985)))),IkReal(((((-1.0)*r01*x985))+((r00*x986))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x988.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x987.value)))+(x988.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x989=IKcos(j0);
IkReal x990=IKsin(j0);
IkReal x991=((1.0)*gconst17);
IkReal x992=(gconst17*r11);
IkReal x993=(gconst17*r00);
IkReal x994=((1.0)*gconst16);
IkReal x995=(gconst16*x989);
IkReal x996=(r01*x990);
IkReal x997=(gconst16*x990);
IkReal x998=(r10*x989);
IkReal x999=(sj4*x990);
IkReal x1000=(cj4*x990);
IkReal x1001=(r12*x989);
evalcond[0]=(((gconst17*r01*x989))+((x990*x992))+((r00*x995))+((r10*x997)));
evalcond[1]=((-1.0)+((x989*x992))+(((-1.0)*x991*x996))+((r10*x995))+(((-1.0)*r00*x990*x994)));
evalcond[2]=((((0.076)*gconst16*x996))+((px*x990))+(((-0.076)*x990*x993))+(((-0.076)*r11*x995))+(((-1.0)*py*x989))+(((0.076)*gconst17*x998)));
evalcond[3]=(((x993*x999))+((r11*sj4*x995))+((r02*x1000))+(((-1.0)*sj4*x994*x996))+(((-1.0)*sj4*x991*x998))+(((-1.0)*cj4*x1001)));
evalcond[4]=(((sj4*x1001))+((x1000*x993))+((cj4*r11*x995))+(((-1.0)*r02*x999))+(((-1.0)*cj4*x991*x998))+(((-1.0)*cj4*x994*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1002=((13.1578947368421)*rxp1_2);
IkReal x1003=((13.1578947368421)*rxp0_2);
CheckValue<IkReal> x1013 = IKatan2WithCheck(IkReal(x1002),IkReal(x1003),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
IkReal x1004=((1.0)*(x1013.value));
IkReal x1005=x973;
if((x1005) < -0.00001)
continue;
IkReal x1006=IKabs(IKsqrt(x1005));
IkReal x1014 = x1005;
if(IKabs(x1014)==0){
continue;
}
IkReal x1007=pow(x1014,-0.5);
CheckValue<IkReal> x1015=IKPowWithIntegerCheck(x1006,-1);
if(!x1015.valid){
continue;
}
IkReal x1008=x1015.value;
IkReal x1009=(r22*x1008);
if( (x1009) < -1-IKFAST_SINCOS_THRESH || (x1009) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1010=IKasin(x1009);
if((((1.0)+(((-1.0)*(x1009*x1009))))) < -0.00001)
continue;
IkReal x1011=IKsqrt(((1.0)+(((-1.0)*(x1009*x1009)))));
IkReal x1012=(x1007*x1011);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x1010+(((-1.0)*x1004)));
IkReal gconst15=((3.14159265358979)+x1010+(((-1.0)*x1004)));
IkReal gconst16=(((x1002*x1012))+(((-1.0)*x1003*x1007*x1009)));
IkReal gconst17=((((-1.0)*x1002*x1007*x1009))+(((-1.0)*x1003*x1012)));
IkReal x1016=((12.0)*pz);
IkReal x1017=((4.0)*pz);
IkReal x1018=(gconst16*r21);
IkReal x1019=((0.93)*cj0);
IkReal x1020=(cj4*r02);
IkReal x1021=(gconst17*r20);
IkReal x1022=(gconst17*sj4);
IkReal x1023=((4.11)*sj4);
IkReal x1024=((0.31)*cj0);
IkReal x1025=((0.31)*sj0);
IkReal x1026=((1.37)*sj4);
IkReal x1027=((0.31)*cj4);
IkReal x1028=(cj4*r22);
IkReal x1029=(r22*sj4);
IkReal x1030=((0.93)*sj0);
IkReal x1031=((0.93)*cj4);
IkReal x1032=((0.912)*x1018);
IkReal x1033=((0.912)*x1021);
IkReal x1034=((4.11)*x1028);
IkReal x1035=((0.304)*x1018);
IkReal x1036=((1.37)*x1028);
IkReal x1037=((0.304)*x1021);
IkReal x1038=(gconst16*r01*sj4);
IkReal x1039=(cj4*r12*sj0);
IkReal x1040=(gconst16*r11*sj4);
IkReal x1041=(x1018*x1023);
IkReal x1042=(x1021*x1023);
IkReal x1043=(x1018*x1026);
IkReal x1044=(x1021*x1026);
IkReal x1045=(x1021*x1031);
IkReal x1046=(x1030*x1040);
IkReal x1047=(x1019*x1038);
IkReal x1048=(x1042+x1033+x1034);
IkReal x1049=(x1044+x1036+x1037);
IkReal x1050=((1.138)+x1043+x1017+x1035);
IkReal x1051=(x1041+x1045+x1016+x1032);
IkReal x1052=(x1048+((x1018*x1031))+(((0.93)*x1029)));
IkReal x1053=(x1041+x1047+x1046+x1016+x1032);
IkReal x1054=(x1048+((cj4*r12*x1030))+((r10*x1022*x1030))+((r00*x1019*x1022))+((x1019*x1020)));
j1eval[0]=((3.424)+(IKabs(((-1.138)+(((-1.0)*x1052))+x1051)))+(IKabs((x1050+(((-1.0)*x1018*x1027))+((x1021*x1027))+(((-1.0)*x1049))+(((-0.31)*x1029)))))+(IKabs(((1.138)+(((-1.0)*x1054))+x1053)))+(IKabs(((1.138)+(((-1.0)*x1052))+x1051)))+(IKabs(((-1.138)+(((-1.0)*x1054))+x1053)))+(IKabs((x1050+((x1025*x1040))+(((-1.0)*x1020*x1024))+(((-1.0)*cj4*r12*x1025))+((x1024*x1038))+(((-1.0)*r00*x1022*x1024))+(((-1.0)*x1049))+(((-1.0)*r10*x1022*x1025))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1055=((12.0)*pz);
IkReal x1056=((4.0)*pz);
IkReal x1057=(gconst17*r20);
IkReal x1058=((4.11)*sj4);
IkReal x1059=(cj4*r22);
IkReal x1060=((0.31)*cj4);
IkReal x1061=(gconst16*r21);
IkReal x1062=(r22*sj4);
IkReal x1063=((0.93)*cj4);
IkReal x1064=((1.37)*sj4);
IkReal x1065=((0.912)*x1061);
IkReal x1066=((0.304)*x1061);
IkReal x1067=(x1057*x1063);
IkReal x1068=(x1058*x1061);
IkReal x1069=(x1061*x1064);
IkReal x1070=(x1057*x1060);
IkReal x1071=(x1056+x1070+x1069+x1066);
IkReal x1072=(x1055+x1068+x1065+x1067);
IkReal x1073=(((x1061*x1063))+(((4.11)*x1059))+(((0.93)*x1062))+(((0.912)*x1057))+((x1057*x1058)));
IkReal x1074=((((0.31)*x1062))+((x1060*x1061))+(((1.37)*x1059))+(((0.304)*x1057))+((x1057*x1064)));
op[0]=((1.138)+x1071+(((-1.0)*x1074)));
op[1]=0.428;
op[2]=((1.138)+x1072+(((-1.0)*x1073)));
op[3]=0.856;
op[4]=((-1.138)+x1072+(((-1.0)*x1073)));
op[5]=0.428;
op[6]=((-1.138)+x1071+(((-1.0)*x1074)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1075=((12.0)*pz);
IkReal x1076=((4.0)*pz);
IkReal x1077=(gconst16*r21);
IkReal x1078=((0.93)*cj0);
IkReal x1079=(cj4*r02);
IkReal x1080=(gconst17*sj4);
IkReal x1081=(gconst17*r20);
IkReal x1082=((0.31)*cj0);
IkReal x1083=((0.31)*sj0);
IkReal x1084=(cj4*r22);
IkReal x1085=((0.93)*sj0);
IkReal x1086=((0.912)*x1077);
IkReal x1087=((0.304)*x1077);
IkReal x1088=(gconst16*r01*sj4);
IkReal x1089=(cj4*r12*sj0);
IkReal x1090=(gconst16*r11*sj4);
IkReal x1091=((4.11)*sj4*x1077);
IkReal x1092=((1.37)*sj4*x1077);
IkReal x1093=(x1085*x1090);
IkReal x1094=(x1078*x1088);
IkReal x1095=(x1082*x1088);
IkReal x1096=(x1083*x1090);
IkReal x1097=(x1075+x1094+x1091+x1093+x1086);
IkReal x1098=(x1076+x1095+x1096+x1092+x1087);
IkReal x1099=((((4.11)*x1084))+((x1078*x1079))+(((0.912)*x1081))+((r10*x1080*x1085))+(((4.11)*r20*x1080))+((cj4*r12*x1085))+((r00*x1078*x1080)));
IkReal x1100=(((x1079*x1082))+(((1.37)*r20*x1080))+((r00*x1080*x1082))+((r10*x1080*x1083))+(((0.304)*x1081))+((cj4*r12*x1083))+(((1.37)*x1084)));
j1evalpoly[0]=((-1.138)+x1098+(((htj1*htj1)*(((-1.138)+x1097+(((-1.0)*x1099))))))+(((0.428)*htj1))+(((htj1*htj1*htj1*htj1)*(((1.138)+x1097+(((-1.0)*x1099))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x1098+(((-1.0)*x1100))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1100)));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1101=(gconst16*r21);
IkReal x1102=(cj4*sj1);
IkReal x1103=(cj1*sj4);
IkReal x1104=(gconst17*r20);
IkReal x1105=((1.0)*sj1*sj4);
IkReal x1106=(cj4*x1104);
IkReal x1107=((1.0)*cj1*cj4);
if( IKabs((((cj1*x1106))+((r22*x1102))+((sj1*sj4*x1104))+(((-1.0)*r22*x1103))+(((-1.0)*x1101*x1107))+(((-1.0)*x1101*x1105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1102*x1104))+(((-1.0)*r22*x1107))+(((-1.0)*r22*x1105))+((x1101*x1103))+(((-1.0)*x1103*x1104))+(((-1.0)*x1101*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1106))+((r22*x1102))+((sj1*sj4*x1104))+(((-1.0)*r22*x1103))+(((-1.0)*x1101*x1107))+(((-1.0)*x1101*x1105))))+IKsqr((((x1102*x1104))+(((-1.0)*r22*x1107))+(((-1.0)*r22*x1105))+((x1101*x1103))+(((-1.0)*x1103*x1104))+(((-1.0)*x1101*x1102))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1106))+((r22*x1102))+((sj1*sj4*x1104))+(((-1.0)*r22*x1103))+(((-1.0)*x1101*x1107))+(((-1.0)*x1101*x1105))), (((x1102*x1104))+(((-1.0)*r22*x1107))+(((-1.0)*r22*x1105))+((x1101*x1103))+(((-1.0)*x1103*x1104))+(((-1.0)*x1101*x1102))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1108=IKcos(j2);
IkReal x1109=IKsin(j2);
IkReal x1110=(gconst16*sj4);
IkReal x1111=((1.0)*r21);
IkReal x1112=(gconst17*r20);
IkReal x1113=((0.076)*gconst16);
IkReal x1114=(r11*sj0);
IkReal x1115=(cj0*r01);
IkReal x1116=((1.0)*cj4);
IkReal x1117=(cj0*r02);
IkReal x1118=(r12*sj0);
IkReal x1119=((1.0)*sj1);
IkReal x1120=((0.3425)*sj1);
IkReal x1121=((1.0)*sj4);
IkReal x1122=(cj4*gconst16);
IkReal x1123=(cj1*x1108);
IkReal x1124=(cj0*gconst17*r00);
IkReal x1125=(gconst17*r10*sj0);
IkReal x1126=(cj1*x1109);
IkReal x1127=(sj1*x1109);
IkReal x1128=(x1108*x1119);
IkReal x1129=((1.0)*x1126);
IkReal x1130=(x1128+x1129);
evalcond[0]=(x1123+((cj4*r22))+(((-1.0)*x1109*x1119))+((sj4*x1112))+(((-1.0)*x1110*x1111)));
evalcond[1]=(((cj4*x1112))+(((-1.0)*x1111*x1122))+(((-1.0)*x1130))+(((-1.0)*r22*x1121)));
evalcond[2]=((((0.0775)*sj1*x1108))+(((-1.0)*x1109*x1120))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+((r21*x1113))+(((0.3425)*x1123))+(((-0.076)*x1112))+(((0.0775)*x1126)));
evalcond[3]=(x1127+((x1114*x1122))+(((-1.0)*x1116*x1125))+(((-1.0)*x1116*x1124))+((sj4*x1117))+((sj4*x1118))+(((-1.0)*x1123))+((x1115*x1122)));
evalcond[4]=((((-1.0)*x1116*x1117))+(((-1.0)*x1116*x1118))+(((-1.0)*x1121*x1125))+(((-1.0)*x1121*x1124))+((x1110*x1115))+((x1110*x1114))+(((-1.0)*x1130)));
evalcond[5]=((((0.2845)*sj1))+(((0.076)*x1124))+(((0.076)*x1125))+(((-1.0)*x1113*x1115))+(((-1.0)*x1113*x1114))+(((0.0535)*cj1))+(((-0.0775)*x1127))+(((-1.0)*py*sj0))+(((-1.0)*x1108*x1120))+(((-0.3425)*x1126))+(((0.0775)*x1123))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1131=cj5*cj5;
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal((((r00*sj5))+((cj5*r01)))),IkReal(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
CheckValue<IkReal> x1133=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x1131*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x1131)))))))),-1);
if(!x1133.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1132.value)+(((1.5707963267949)*(x1133.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1134=IKcos(j0);
IkReal x1135=IKsin(j0);
IkReal x1136=((1.0)*r01);
IkReal x1137=((1.0)*r10);
IkReal x1138=(cj5*x1135);
IkReal x1139=(sj5*x1134);
IkReal x1140=(sj4*x1135);
IkReal x1141=(cj5*x1134);
IkReal x1142=(sj5*x1135);
IkReal x1143=(r12*x1134);
evalcond[0]=(((r00*x1139))+((r01*x1141))+((r10*x1142))+((r11*x1138)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x1142))+((r10*x1139))+((r11*x1141))+(((-1.0)*x1136*x1138)));
evalcond[2]=((((0.076)*r10*x1141))+(((-0.076)*r11*x1139))+(((-1.0)*py*x1134))+((px*x1135))+(((-0.076)*r00*x1138))+(((0.076)*r01*x1142)));
evalcond[3]=(((r00*sj4*x1138))+(((-1.0)*cj4*x1143))+((cj4*r02*x1135))+(((-1.0)*sj5*x1136*x1140))+((r11*sj4*x1139))+(((-1.0)*sj4*x1137*x1141)));
evalcond[4]=(((sj4*x1143))+((cj4*r00*x1138))+(((-1.0)*cj4*x1136*x1142))+((cj4*r11*x1139))+(((-1.0)*cj4*x1137*x1141))+(((-1.0)*r02*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1144=((4.11)*pz);
IkReal x1145=((12.0)*pz);
IkReal x1146=(cj5*r20);
IkReal x1147=((4.11)*sj4);
IkReal x1148=((0.31)*cj4);
IkReal x1149=((0.07068)*sj5);
IkReal x1150=(cj0*r01);
IkReal x1151=(r21*sj5);
IkReal x1152=(r22*sj4);
IkReal x1153=((0.93)*cj4);
IkReal x1154=((1.37)*sj4);
IkReal x1155=((0.07068)*cj5);
IkReal x1156=(r10*sj0);
IkReal x1157=(cj0*r00);
IkReal x1158=((0.02356)*cj5);
IkReal x1159=(cj0*px);
IkReal x1160=((0.49325)*sj4);
IkReal x1161=(cj4*r22);
IkReal x1162=(r11*sj0);
IkReal x1163=((0.02356)*sj5);
IkReal x1164=(py*sj0);
IkReal x1165=((1.47975)*sj4);
IkReal x1166=((0.31236)*x1151);
IkReal x1167=((0.912)*x1151);
IkReal x1168=(x1155*x1156);
IkReal x1169=(x1155*x1157);
IkReal x1170=(x1151*x1165);
IkReal x1171=(x1147*x1151);
IkReal x1172=(x1146*x1153);
IkReal x1173=(x1145+x1167+x1172+x1171);
IkReal x1174=(((x1146*x1147))+(((0.912)*x1146))+(((0.93)*x1152))+(((4.11)*x1161))+((x1151*x1153)));
IkReal x1175=(x1144+x1166+x1168+x1169+x1170);
IkReal x1176=(((x1149*x1150))+(((0.93)*x1164))+(((0.31236)*x1146))+(((1.47975)*x1161))+((x1149*x1162))+(((0.93)*x1159))+((x1146*x1165)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+x1175+(((-1.0)*x1176)))))+(IKabs(((1.138)+((x1146*x1148))+(((4.0)*pz))+(((-0.304)*x1146))+(((-1.0)*x1146*x1154))+(((-1.37)*x1161))+(((-0.31)*x1152))+((x1151*x1154))+(((-1.0)*x1148*x1151))+(((0.304)*x1151)))))+(IKabs(((-0.37318)+x1175+(((-1.0)*x1176)))))+(IKabs(((0.37318)+(((1.37)*pz))+(((-0.31)*x1164))+(((-1.0)*x1162*x1163))+(((-1.0)*x1150*x1163))+(((-0.49325)*x1161))+(((0.10412)*x1151))+(((-0.31)*x1159))+(((-0.10412)*x1146))+((x1156*x1158))+((x1151*x1160))+(((-1.0)*x1146*x1160))+((x1157*x1158)))))+(IKabs(((1.138)+x1173+(((-1.0)*x1174)))))+(IKabs(((-1.138)+x1173+(((-1.0)*x1174))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1177=((12.0)*pz);
IkReal x1178=((4.0)*pz);
IkReal x1179=(cj5*r20);
IkReal x1180=((4.11)*sj4);
IkReal x1181=(r21*sj5);
IkReal x1182=((0.31)*cj4);
IkReal x1183=((0.93)*cj4);
IkReal x1184=(r22*sj4);
IkReal x1185=(cj4*r22);
IkReal x1186=((1.37)*sj4);
IkReal x1187=((0.912)*x1181);
IkReal x1188=((0.304)*x1181);
IkReal x1189=(x1180*x1181);
IkReal x1190=(x1179*x1183);
IkReal x1191=(x1179*x1182);
IkReal x1192=(x1181*x1186);
IkReal x1193=(x1189+x1187+x1190+x1177);
IkReal x1194=(x1188+x1191+x1192+x1178);
IkReal x1195=(((x1179*x1180))+(((4.11)*x1185))+((x1181*x1183))+(((0.93)*x1184))+(((0.912)*x1179)));
IkReal x1196=((((0.31)*x1184))+(((0.304)*x1179))+((x1179*x1186))+((x1181*x1182))+(((1.37)*x1185)));
op[0]=((1.138)+x1194+(((-1.0)*x1196)));
op[1]=0.428;
op[2]=((1.138)+x1193+(((-1.0)*x1195)));
op[3]=0.856;
op[4]=((-1.138)+x1193+(((-1.0)*x1195)));
op[5]=0.428;
op[6]=((-1.138)+x1194+(((-1.0)*x1196)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1197=((1.37)*pz);
IkReal x1198=((4.11)*pz);
IkReal x1199=((0.07068)*sj5);
IkReal x1200=(cj0*r01);
IkReal x1201=(cj5*r20);
IkReal x1202=(r21*sj5);
IkReal x1203=((0.07068)*cj5);
IkReal x1204=(r10*sj0);
IkReal x1205=(cj0*px);
IkReal x1206=((0.49325)*sj4);
IkReal x1207=(cj4*r22);
IkReal x1208=(r11*sj0);
IkReal x1209=(cj0*r00);
IkReal x1210=((0.02356)*sj5);
IkReal x1211=((0.02356)*cj5);
IkReal x1212=(py*sj0);
IkReal x1213=((1.47975)*sj4);
IkReal x1214=((0.10412)*x1202);
IkReal x1215=((0.31236)*x1202);
IkReal x1216=(x1204*x1211);
IkReal x1217=(x1203*x1204);
IkReal x1218=(x1203*x1209);
IkReal x1219=(x1202*x1213);
IkReal x1220=(x1209*x1211);
IkReal x1221=(x1202*x1206);
IkReal x1222=(x1198+x1217+x1215+x1218+x1219);
IkReal x1223=(x1197+x1221+x1220+x1216+x1214);
IkReal x1224=((((0.31236)*x1201))+(((1.47975)*x1207))+((x1199*x1200))+((x1199*x1208))+(((0.93)*x1205))+((x1201*x1213))+(((0.93)*x1212)));
IkReal x1225=((((0.31)*x1212))+(((0.31)*x1205))+(((0.49325)*x1207))+((x1200*x1210))+((x1201*x1206))+((x1208*x1210))+(((0.10412)*x1201)));
j1evalpoly[0]=((-0.37318)+(((htj1*htj1)*(((-0.37318)+x1222+(((-1.0)*x1224))))))+(((0.64596)*(htj1*htj1*htj1)))+x1223+(((-1.0)*x1225))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1223+(((-1.0)*x1225))))))+(((0.32298)*htj1))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1222+(((-1.0)*x1224)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1226=((1.0)*cj4);
IkReal x1227=(r22*sj1);
IkReal x1228=((1.0)*sj4);
IkReal x1229=(cj1*r22);
IkReal x1230=(cj1*r21*sj5);
IkReal x1231=(cj5*r20*sj1);
IkReal x1232=(r21*sj1*sj5);
IkReal x1233=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x1226*x1230))+((cj4*x1227))+(((-1.0)*x1228*x1232))+((cj4*x1233))+(((-1.0)*x1228*x1229))+((sj4*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1226*x1232))+(((-1.0)*x1226*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*x1228*x1233))+((cj4*x1231))+((sj4*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1226*x1230))+((cj4*x1227))+(((-1.0)*x1228*x1232))+((cj4*x1233))+(((-1.0)*x1228*x1229))+((sj4*x1231))))+IKsqr(((((-1.0)*x1226*x1232))+(((-1.0)*x1226*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*x1228*x1233))+((cj4*x1231))+((sj4*x1230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1226*x1230))+((cj4*x1227))+(((-1.0)*x1228*x1232))+((cj4*x1233))+(((-1.0)*x1228*x1229))+((sj4*x1231))), ((((-1.0)*x1226*x1232))+(((-1.0)*x1226*x1229))+(((-1.0)*x1227*x1228))+(((-1.0)*x1228*x1233))+((cj4*x1231))+((sj4*x1230))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1234=IKcos(j2);
IkReal x1235=IKsin(j2);
IkReal x1236=(sj0*sj4);
IkReal x1237=(cj5*r10);
IkReal x1238=((0.076)*sj0);
IkReal x1239=((1.0)*sj4);
IkReal x1240=(r11*sj5);
IkReal x1241=((0.076)*sj5);
IkReal x1242=((1.0)*cj4);
IkReal x1243=(cj0*r02);
IkReal x1244=(cj0*r01);
IkReal x1245=((1.0)*sj1);
IkReal x1246=(r21*sj5);
IkReal x1247=(cj5*r20);
IkReal x1248=(cj1*x1234);
IkReal x1249=(cj0*cj5*r00);
IkReal x1250=(cj1*x1235);
IkReal x1251=(sj1*x1235);
IkReal x1252=(sj1*x1234);
IkReal x1253=(x1234*x1245);
IkReal x1254=((1.0)*x1250);
IkReal x1255=(x1254+x1253);
evalcond[0]=((((-1.0)*x1239*x1246))+x1248+((cj4*r22))+(((-1.0)*x1235*x1245))+((sj4*x1247)));
evalcond[1]=((((-1.0)*x1255))+((cj4*x1247))+(((-1.0)*x1242*x1246))+(((-1.0)*r22*x1239)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1252))+(((0.0775)*x1250))+pz+((r21*x1241))+(((0.3425)*x1248))+(((-0.076)*x1247))+(((-0.3425)*x1251)));
evalcond[3]=(x1251+((cj4*sj5*x1244))+(((-1.0)*x1248))+(((-1.0)*sj0*x1237*x1242))+((cj4*sj0*x1240))+(((-1.0)*x1242*x1249))+((sj4*x1243))+((r12*x1236)));
evalcond[4]=((((-1.0)*x1255))+(((-1.0)*x1239*x1249))+((x1236*x1240))+(((-1.0)*r12*sj0*x1242))+((sj4*sj5*x1244))+(((-1.0)*x1242*x1243))+(((-1.0)*x1236*x1237)));
evalcond[5]=((((0.2845)*sj1))+(((-0.0775)*x1251))+(((0.076)*x1249))+(((-1.0)*x1238*x1240))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.0775)*x1248))+((x1237*x1238))+(((-1.0)*x1241*x1244))+(((-1.0)*cj0*px))+(((-0.3425)*x1252))+(((-0.3425)*x1250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1256=((1.0)*cj5);
IkReal x1257=(cj4*sj5);
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj4*r22))+(((-1.0)*r20*sj4*x1256)))),-1);
if(!x1258.valid){
continue;
}
CheckValue<IkReal> x1259 = IKatan2WithCheck(IkReal((((r11*x1257))+((r12*sj4))+(((-1.0)*cj4*r10*x1256)))),IkReal(((((-1.0)*cj4*r00*x1256))+((r02*sj4))+((r01*x1257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1259.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1258.value)))+(x1259.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1260=IKcos(j0);
IkReal x1261=IKsin(j0);
IkReal x1262=((1.0)*r01);
IkReal x1263=((1.0)*r10);
IkReal x1264=(cj5*x1261);
IkReal x1265=(sj5*x1260);
IkReal x1266=(sj4*x1261);
IkReal x1267=(cj5*x1260);
IkReal x1268=(sj5*x1261);
IkReal x1269=(r12*x1260);
evalcond[0]=(((r11*x1264))+((r10*x1268))+((r00*x1265))+((r01*x1267)));
evalcond[1]=((-1.0)+((r11*x1267))+((r10*x1265))+(((-1.0)*r00*x1268))+(((-1.0)*x1262*x1264)));
evalcond[2]=((((-1.0)*py*x1260))+(((-0.076)*r00*x1264))+(((0.076)*r01*x1268))+(((-0.076)*r11*x1265))+((px*x1261))+(((0.076)*r10*x1267)));
evalcond[3]=(((cj4*r02*x1261))+(((-1.0)*sj4*x1263*x1267))+(((-1.0)*cj4*x1269))+((r00*sj4*x1264))+((r11*sj4*x1265))+(((-1.0)*sj5*x1262*x1266)));
evalcond[4]=((((-1.0)*cj4*x1263*x1267))+((sj4*x1269))+(((-1.0)*r02*x1266))+(((-1.0)*cj4*x1262*x1268))+((cj4*r11*x1265))+((cj4*r00*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1270=((4.11)*pz);
IkReal x1271=((12.0)*pz);
IkReal x1272=(cj5*r20);
IkReal x1273=((4.11)*sj4);
IkReal x1274=((0.31)*cj4);
IkReal x1275=((0.07068)*sj5);
IkReal x1276=(cj0*r01);
IkReal x1277=(r21*sj5);
IkReal x1278=(r22*sj4);
IkReal x1279=((0.93)*cj4);
IkReal x1280=((1.37)*sj4);
IkReal x1281=((0.07068)*cj5);
IkReal x1282=(r10*sj0);
IkReal x1283=(cj0*r00);
IkReal x1284=((0.02356)*cj5);
IkReal x1285=(cj0*px);
IkReal x1286=((0.49325)*sj4);
IkReal x1287=(cj4*r22);
IkReal x1288=(r11*sj0);
IkReal x1289=((0.02356)*sj5);
IkReal x1290=(py*sj0);
IkReal x1291=((1.47975)*sj4);
IkReal x1292=((0.31236)*x1277);
IkReal x1293=((0.912)*x1277);
IkReal x1294=(x1281*x1282);
IkReal x1295=(x1281*x1283);
IkReal x1296=(x1277*x1291);
IkReal x1297=(x1273*x1277);
IkReal x1298=(x1272*x1279);
IkReal x1299=(x1271+x1298+x1293+x1297);
IkReal x1300=((((0.912)*x1272))+((x1277*x1279))+((x1272*x1273))+(((4.11)*x1287))+(((0.93)*x1278)));
IkReal x1301=(x1270+x1292+x1296+x1294+x1295);
IkReal x1302=(((x1272*x1291))+((x1275*x1276))+(((0.31236)*x1272))+(((0.93)*x1290))+((x1275*x1288))+(((0.93)*x1285))+(((1.47975)*x1287)));
j1eval[0]=((3.00392)+(IKabs(((0.37318)+(((0.10412)*x1277))+(((1.37)*pz))+(((-0.49325)*x1287))+(((-1.0)*x1276*x1289))+(((-0.31)*x1290))+((x1283*x1284))+((x1277*x1286))+(((-1.0)*x1272*x1286))+(((-0.10412)*x1272))+(((-0.31)*x1285))+(((-1.0)*x1288*x1289))+((x1282*x1284)))))+(IKabs(((-1.138)+x1299+(((-1.0)*x1300)))))+(IKabs(((1.138)+(((4.0)*pz))+((x1272*x1274))+(((-0.31)*x1278))+((x1277*x1280))+(((-1.0)*x1272*x1280))+(((-1.0)*x1274*x1277))+(((-1.37)*x1287))+(((-0.304)*x1272))+(((0.304)*x1277)))))+(IKabs(((1.138)+x1299+(((-1.0)*x1300)))))+(IKabs(((-0.37318)+x1301+(((-1.0)*x1302)))))+(IKabs(((0.37318)+x1301+(((-1.0)*x1302))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1303=((12.0)*pz);
IkReal x1304=((4.0)*pz);
IkReal x1305=(cj5*r20);
IkReal x1306=((4.11)*sj4);
IkReal x1307=(r21*sj5);
IkReal x1308=((0.31)*cj4);
IkReal x1309=((0.93)*cj4);
IkReal x1310=(r22*sj4);
IkReal x1311=(cj4*r22);
IkReal x1312=((1.37)*sj4);
IkReal x1313=((0.912)*x1307);
IkReal x1314=((0.304)*x1307);
IkReal x1315=(x1306*x1307);
IkReal x1316=(x1305*x1309);
IkReal x1317=(x1305*x1308);
IkReal x1318=(x1307*x1312);
IkReal x1319=(x1303+x1316+x1315+x1313);
IkReal x1320=(x1304+x1317+x1314+x1318);
IkReal x1321=(((x1305*x1306))+((x1307*x1309))+(((0.912)*x1305))+(((0.93)*x1310))+(((4.11)*x1311)));
IkReal x1322=(((x1305*x1312))+((x1307*x1308))+(((1.37)*x1311))+(((0.304)*x1305))+(((0.31)*x1310)));
op[0]=((1.138)+x1320+(((-1.0)*x1322)));
op[1]=0.428;
op[2]=((1.138)+x1319+(((-1.0)*x1321)));
op[3]=0.856;
op[4]=((-1.138)+x1319+(((-1.0)*x1321)));
op[5]=0.428;
op[6]=((-1.138)+x1320+(((-1.0)*x1322)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1323=((1.37)*pz);
IkReal x1324=((4.11)*pz);
IkReal x1325=((0.07068)*sj5);
IkReal x1326=(cj0*r01);
IkReal x1327=(cj5*r20);
IkReal x1328=(r21*sj5);
IkReal x1329=((0.07068)*cj5);
IkReal x1330=(r10*sj0);
IkReal x1331=(cj0*px);
IkReal x1332=((0.49325)*sj4);
IkReal x1333=(cj4*r22);
IkReal x1334=(r11*sj0);
IkReal x1335=(cj0*r00);
IkReal x1336=((0.02356)*sj5);
IkReal x1337=((0.02356)*cj5);
IkReal x1338=(py*sj0);
IkReal x1339=((1.47975)*sj4);
IkReal x1340=((0.10412)*x1328);
IkReal x1341=((0.31236)*x1328);
IkReal x1342=(x1330*x1337);
IkReal x1343=(x1329*x1330);
IkReal x1344=(x1329*x1335);
IkReal x1345=(x1328*x1339);
IkReal x1346=(x1335*x1337);
IkReal x1347=(x1328*x1332);
IkReal x1348=(x1341+x1343+x1344+x1345+x1324);
IkReal x1349=(x1340+x1342+x1346+x1347+x1323);
IkReal x1350=((((0.31236)*x1327))+((x1325*x1334))+(((1.47975)*x1333))+(((0.93)*x1338))+(((0.93)*x1331))+((x1327*x1339))+((x1325*x1326)));
IkReal x1351=((((0.49325)*x1333))+(((0.31)*x1338))+(((0.31)*x1331))+((x1326*x1336))+((x1327*x1332))+(((0.10412)*x1327))+((x1334*x1336)));
j1evalpoly[0]=((-0.37318)+x1349+(((0.64596)*(htj1*htj1*htj1)))+(((-1.0)*x1351))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1349+(((-1.0)*x1351))))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1348+(((-1.0)*x1350))))))+(((0.32298)*htj1))+(((htj1*htj1)*(((-0.37318)+x1348+(((-1.0)*x1350)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1352=((1.0)*cj4);
IkReal x1353=(r22*sj1);
IkReal x1354=((1.0)*sj4);
IkReal x1355=(cj1*r22);
IkReal x1356=(cj1*r21*sj5);
IkReal x1357=(cj5*r20*sj1);
IkReal x1358=(r21*sj1*sj5);
IkReal x1359=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x1352*x1356))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((sj4*x1357))+((cj4*x1353))+((cj4*x1359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1352*x1355))+(((-1.0)*x1352*x1358))+(((-1.0)*x1354*x1359))+((sj4*x1356))+((cj4*x1357))+(((-1.0)*x1353*x1354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1352*x1356))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((sj4*x1357))+((cj4*x1353))+((cj4*x1359))))+IKsqr(((((-1.0)*x1352*x1355))+(((-1.0)*x1352*x1358))+(((-1.0)*x1354*x1359))+((sj4*x1356))+((cj4*x1357))+(((-1.0)*x1353*x1354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1352*x1356))+(((-1.0)*x1354*x1358))+(((-1.0)*x1354*x1355))+((sj4*x1357))+((cj4*x1353))+((cj4*x1359))), ((((-1.0)*x1352*x1355))+(((-1.0)*x1352*x1358))+(((-1.0)*x1354*x1359))+((sj4*x1356))+((cj4*x1357))+(((-1.0)*x1353*x1354))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1360=IKcos(j2);
IkReal x1361=IKsin(j2);
IkReal x1362=(sj0*sj4);
IkReal x1363=(cj5*r10);
IkReal x1364=((0.076)*sj0);
IkReal x1365=((1.0)*sj4);
IkReal x1366=(r11*sj5);
IkReal x1367=((0.076)*sj5);
IkReal x1368=((1.0)*cj4);
IkReal x1369=(cj0*r02);
IkReal x1370=(cj0*r01);
IkReal x1371=((1.0)*sj1);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj5*r20);
IkReal x1374=(cj1*x1360);
IkReal x1375=(cj0*cj5*r00);
IkReal x1376=(cj1*x1361);
IkReal x1377=(sj1*x1361);
IkReal x1378=(sj1*x1360);
IkReal x1379=(x1360*x1371);
IkReal x1380=((1.0)*x1376);
IkReal x1381=(x1379+x1380);
evalcond[0]=(x1374+(((-1.0)*x1365*x1372))+((cj4*r22))+((sj4*x1373))+(((-1.0)*x1361*x1371)));
evalcond[1]=((((-1.0)*x1381))+((cj4*x1373))+(((-1.0)*r22*x1365))+(((-1.0)*x1368*x1372)));
evalcond[2]=((((0.0535)*sj1))+(((-0.076)*x1373))+(((-0.2845)*cj1))+(((-0.3425)*x1377))+(((0.3425)*x1374))+pz+(((0.0775)*x1376))+(((0.0775)*x1378))+((r21*x1367)));
evalcond[3]=(x1377+(((-1.0)*x1374))+((cj4*sj5*x1370))+((sj4*x1369))+(((-1.0)*sj0*x1363*x1368))+((cj4*sj0*x1366))+((r12*x1362))+(((-1.0)*x1368*x1375)));
evalcond[4]=((((-1.0)*x1381))+(((-1.0)*x1365*x1375))+(((-1.0)*r12*sj0*x1368))+((sj4*sj5*x1370))+(((-1.0)*x1362*x1363))+(((-1.0)*x1368*x1369))+((x1362*x1366)));
evalcond[5]=((((-1.0)*x1364*x1366))+(((-0.0775)*x1377))+((x1363*x1364))+(((0.2845)*sj1))+(((-0.3425)*x1376))+(((-0.3425)*x1378))+(((0.076)*x1375))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*x1367*x1370))+(((0.0775)*x1374))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1382=((0.076)*sj5);
IkReal x1383=((0.076)*cj5);
CheckValue<IkReal> x1384 = IKatan2WithCheck(IkReal((((r10*x1383))+(((-1.0)*r11*x1382))+(((-1.0)*py)))),IkReal(((((-1.0)*px))+(((-1.0)*r01*x1382))+((r00*x1383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1384.valid){
continue;
}
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+((rxp0_2*sj5))+(((0.076)*r22)))),-1);
if(!x1385.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1384.value)+(((1.5707963267949)*(x1385.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1386=IKcos(j0);
IkReal x1387=IKsin(j0);
IkReal x1388=((1.0)*r01);
IkReal x1389=((1.0)*r10);
IkReal x1390=(cj5*x1387);
IkReal x1391=(sj5*x1386);
IkReal x1392=(sj4*x1387);
IkReal x1393=(cj5*x1386);
IkReal x1394=(sj5*x1387);
IkReal x1395=(r12*x1386);
evalcond[0]=(((r10*x1394))+((r01*x1393))+((r00*x1391))+((r11*x1390)));
evalcond[1]=((-1.0)+(((-1.0)*r00*x1394))+((r10*x1391))+(((-1.0)*x1388*x1390))+((r11*x1393)));
evalcond[2]=((((-0.076)*r00*x1390))+(((-0.076)*r11*x1391))+(((0.076)*r10*x1393))+(((-1.0)*py*x1386))+(((0.076)*r01*x1394))+((px*x1387)));
evalcond[3]=(((r00*sj4*x1390))+((r11*sj4*x1391))+(((-1.0)*sj5*x1388*x1392))+((cj4*r02*x1387))+(((-1.0)*cj4*x1395))+(((-1.0)*sj4*x1389*x1393)));
evalcond[4]=(((sj4*x1395))+(((-1.0)*r02*x1392))+((cj4*r11*x1391))+(((-1.0)*cj4*x1388*x1394))+((cj4*r00*x1390))+(((-1.0)*cj4*x1389*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1396=((4.11)*pz);
IkReal x1397=((12.0)*pz);
IkReal x1398=(cj5*r20);
IkReal x1399=((4.11)*sj4);
IkReal x1400=((0.31)*cj4);
IkReal x1401=((0.07068)*sj5);
IkReal x1402=(cj0*r01);
IkReal x1403=(r21*sj5);
IkReal x1404=(r22*sj4);
IkReal x1405=((0.93)*cj4);
IkReal x1406=((1.37)*sj4);
IkReal x1407=((0.07068)*cj5);
IkReal x1408=(r10*sj0);
IkReal x1409=(cj0*r00);
IkReal x1410=((0.02356)*cj5);
IkReal x1411=(cj0*px);
IkReal x1412=((0.49325)*sj4);
IkReal x1413=(cj4*r22);
IkReal x1414=(r11*sj0);
IkReal x1415=((0.02356)*sj5);
IkReal x1416=(py*sj0);
IkReal x1417=((1.47975)*sj4);
IkReal x1418=((0.31236)*x1403);
IkReal x1419=((0.912)*x1403);
IkReal x1420=(x1407*x1408);
IkReal x1421=(x1407*x1409);
IkReal x1422=(x1403*x1417);
IkReal x1423=(x1399*x1403);
IkReal x1424=(x1398*x1405);
IkReal x1425=(x1397+x1423+x1424+x1419);
IkReal x1426=((((0.93)*x1404))+(((0.912)*x1398))+((x1398*x1399))+(((4.11)*x1413))+((x1403*x1405)));
IkReal x1427=(x1396+x1421+x1420+x1422+x1418);
IkReal x1428=(((x1401*x1414))+((x1398*x1417))+(((0.31236)*x1398))+(((1.47975)*x1413))+((x1401*x1402))+(((0.93)*x1416))+(((0.93)*x1411)));
j1eval[0]=((3.00392)+(IKabs(((-1.138)+x1425+(((-1.0)*x1426)))))+(IKabs(((1.138)+x1425+(((-1.0)*x1426)))))+(IKabs(((0.37318)+(((1.37)*pz))+(((-1.0)*x1414*x1415))+(((-1.0)*x1398*x1412))+(((-0.10412)*x1398))+(((-1.0)*x1402*x1415))+(((-0.49325)*x1413))+(((0.10412)*x1403))+((x1409*x1410))+((x1408*x1410))+(((-0.31)*x1411))+(((-0.31)*x1416))+((x1403*x1412)))))+(IKabs(((-0.37318)+x1427+(((-1.0)*x1428)))))+(IKabs(((0.37318)+x1427+(((-1.0)*x1428)))))+(IKabs(((1.138)+(((0.304)*x1403))+(((4.0)*pz))+(((-1.0)*x1398*x1406))+((x1403*x1406))+(((-0.31)*x1404))+(((-1.0)*x1400*x1403))+((x1398*x1400))+(((-0.304)*x1398))+(((-1.37)*x1413))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1429=((12.0)*pz);
IkReal x1430=((4.0)*pz);
IkReal x1431=(cj5*r20);
IkReal x1432=((4.11)*sj4);
IkReal x1433=(r21*sj5);
IkReal x1434=((0.31)*cj4);
IkReal x1435=((0.93)*cj4);
IkReal x1436=(r22*sj4);
IkReal x1437=(cj4*r22);
IkReal x1438=((1.37)*sj4);
IkReal x1439=((0.912)*x1433);
IkReal x1440=((0.304)*x1433);
IkReal x1441=(x1432*x1433);
IkReal x1442=(x1431*x1435);
IkReal x1443=(x1431*x1434);
IkReal x1444=(x1433*x1438);
IkReal x1445=(x1429+x1439+x1442+x1441);
IkReal x1446=(x1430+x1444+x1443+x1440);
IkReal x1447=((((0.93)*x1436))+(((4.11)*x1437))+((x1433*x1435))+(((0.912)*x1431))+((x1431*x1432)));
IkReal x1448=((((0.31)*x1436))+((x1433*x1434))+(((1.37)*x1437))+(((0.304)*x1431))+((x1431*x1438)));
op[0]=((1.138)+x1446+(((-1.0)*x1448)));
op[1]=0.428;
op[2]=((1.138)+x1445+(((-1.0)*x1447)));
op[3]=0.856;
op[4]=((-1.138)+x1445+(((-1.0)*x1447)));
op[5]=0.428;
op[6]=((-1.138)+x1446+(((-1.0)*x1448)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1449=((1.37)*pz);
IkReal x1450=((4.11)*pz);
IkReal x1451=((0.07068)*sj5);
IkReal x1452=(cj0*r01);
IkReal x1453=(cj5*r20);
IkReal x1454=(r21*sj5);
IkReal x1455=((0.07068)*cj5);
IkReal x1456=(r10*sj0);
IkReal x1457=(cj0*px);
IkReal x1458=((0.49325)*sj4);
IkReal x1459=(cj4*r22);
IkReal x1460=(r11*sj0);
IkReal x1461=(cj0*r00);
IkReal x1462=((0.02356)*sj5);
IkReal x1463=((0.02356)*cj5);
IkReal x1464=(py*sj0);
IkReal x1465=((1.47975)*sj4);
IkReal x1466=((0.10412)*x1454);
IkReal x1467=((0.31236)*x1454);
IkReal x1468=(x1456*x1463);
IkReal x1469=(x1455*x1456);
IkReal x1470=(x1455*x1461);
IkReal x1471=(x1454*x1465);
IkReal x1472=(x1461*x1463);
IkReal x1473=(x1454*x1458);
IkReal x1474=(x1469+x1467+x1450+x1470+x1471);
IkReal x1475=(x1468+x1466+x1449+x1472+x1473);
IkReal x1476=(((x1453*x1465))+((x1451*x1460))+(((0.93)*x1457))+(((0.31236)*x1453))+(((0.93)*x1464))+((x1451*x1452))+(((1.47975)*x1459)));
IkReal x1477=(((x1452*x1462))+(((0.31)*x1457))+(((0.49325)*x1459))+(((0.10412)*x1453))+((x1460*x1462))+(((0.31)*x1464))+((x1453*x1458)));
j1evalpoly[0]=((-0.37318)+(((0.64596)*(htj1*htj1*htj1)))+(((0.32298)*(htj1*htj1*htj1*htj1*htj1)))+(((0.32298)*htj1))+x1475+(((-1.0)*x1477))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.37318)+x1475+(((-1.0)*x1477))))))+(((htj1*htj1)*(((-0.37318)+x1474+(((-1.0)*x1476))))))+(((htj1*htj1*htj1*htj1)*(((0.37318)+x1474+(((-1.0)*x1476)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1478=((1.0)*cj4);
IkReal x1479=(r22*sj1);
IkReal x1480=((1.0)*sj4);
IkReal x1481=(cj1*r22);
IkReal x1482=(cj1*r21*sj5);
IkReal x1483=(cj5*r20*sj1);
IkReal x1484=(r21*sj1*sj5);
IkReal x1485=(cj1*cj5*r20);
if( IKabs((((cj4*x1479))+(((-1.0)*x1480*x1484))+(((-1.0)*x1480*x1481))+((cj4*x1485))+((sj4*x1483))+(((-1.0)*x1478*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1479*x1480))+(((-1.0)*x1480*x1485))+((cj4*x1483))+((sj4*x1482))+(((-1.0)*x1478*x1484))+(((-1.0)*x1478*x1481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x1479))+(((-1.0)*x1480*x1484))+(((-1.0)*x1480*x1481))+((cj4*x1485))+((sj4*x1483))+(((-1.0)*x1478*x1482))))+IKsqr(((((-1.0)*x1479*x1480))+(((-1.0)*x1480*x1485))+((cj4*x1483))+((sj4*x1482))+(((-1.0)*x1478*x1484))+(((-1.0)*x1478*x1481))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x1479))+(((-1.0)*x1480*x1484))+(((-1.0)*x1480*x1481))+((cj4*x1485))+((sj4*x1483))+(((-1.0)*x1478*x1482))), ((((-1.0)*x1479*x1480))+(((-1.0)*x1480*x1485))+((cj4*x1483))+((sj4*x1482))+(((-1.0)*x1478*x1484))+(((-1.0)*x1478*x1481))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1486=IKcos(j2);
IkReal x1487=IKsin(j2);
IkReal x1488=(sj0*sj4);
IkReal x1489=(cj5*r10);
IkReal x1490=((0.076)*sj0);
IkReal x1491=((1.0)*sj4);
IkReal x1492=(r11*sj5);
IkReal x1493=((0.076)*sj5);
IkReal x1494=((1.0)*cj4);
IkReal x1495=(cj0*r02);
IkReal x1496=(cj0*r01);
IkReal x1497=((1.0)*sj1);
IkReal x1498=(r21*sj5);
IkReal x1499=(cj5*r20);
IkReal x1500=(cj1*x1486);
IkReal x1501=(cj0*cj5*r00);
IkReal x1502=(cj1*x1487);
IkReal x1503=(sj1*x1487);
IkReal x1504=(sj1*x1486);
IkReal x1505=(x1486*x1497);
IkReal x1506=((1.0)*x1502);
IkReal x1507=(x1506+x1505);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1487*x1497))+x1500+((sj4*x1499))+(((-1.0)*x1491*x1498)));
evalcond[1]=((((-1.0)*x1507))+(((-1.0)*x1494*x1498))+((cj4*x1499))+(((-1.0)*r22*x1491)));
evalcond[2]=((((-0.076)*x1499))+(((0.3425)*x1500))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x1493))+(((0.0775)*x1502))+(((0.0775)*x1504))+pz+(((-0.3425)*x1503)));
evalcond[3]=(((cj4*sj0*x1492))+(((-1.0)*x1500))+((r12*x1488))+(((-1.0)*x1494*x1501))+x1503+((sj4*x1495))+((cj4*sj5*x1496))+(((-1.0)*sj0*x1489*x1494)));
evalcond[4]=((((-1.0)*x1488*x1489))+(((-1.0)*x1507))+(((-1.0)*x1494*x1495))+(((-1.0)*x1491*x1501))+((sj4*sj5*x1496))+((x1488*x1492))+(((-1.0)*r12*sj0*x1494)));
evalcond[5]=(((x1489*x1490))+(((0.2845)*sj1))+(((0.0775)*x1500))+(((-1.0)*x1493*x1496))+(((0.0535)*cj1))+(((-0.3425)*x1502))+(((-0.3425)*x1504))+(((0.076)*x1501))+(((-1.0)*py*sj0))+(((-0.0775)*x1503))+(((-1.0)*x1490*x1492))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1508=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)));
j0eval[0]=x1508;
j0eval[1]=IKsign(x1508);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1509=(sj4*sj5);
IkReal x1510=((1.0)*cj4);
IkReal x1511=((1.0)*cj5*sj4);
IkReal x1512=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x1512;
j0eval[1]=((IKabs((((r11*x1509))+(((-1.0)*r10*x1511))+(((-1.0)*r12*x1510)))))+(IKabs(((((-1.0)*r00*x1511))+((r01*x1509))+(((-1.0)*r02*x1510))))));
j0eval[2]=IKsign(x1512);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1513=(rxp2_2*sj4);
IkReal x1514=((13.1578947368421)*cj4);
IkReal x1515=(rxp1_2*sj5);
IkReal x1516=((1.0)*sj4);
IkReal x1517=(cj5*r21);
IkReal x1518=((0.076)*sj5);
IkReal x1519=(cj5*rxp0_2);
IkReal x1520=((0.076)*cj5);
j0eval[0]=((((-1.0)*x1516*x1517))+((x1514*x1515))+(((-1.0)*x1514*x1519))+(((-1.0)*r20*sj5*x1516))+(((13.1578947368421)*x1513)));
j0eval[1]=IKsign((((cj4*x1515))+x1513+(((-0.076)*sj4*x1517))+(((-1.0)*cj4*x1519))+(((-1.0)*r20*sj4*x1518))));
j0eval[2]=((IKabs(((((-1.0)*r01*x1518))+((r00*x1520))+(((-1.0)*px)))))+(IKabs((((r10*x1520))+(((-1.0)*py))+(((-1.0)*r11*x1518))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1522 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1522)==0){
continue;
}
IkReal x1521=pow(x1522,-0.5);
CheckValue<IkReal> x1523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1523.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1523.value));
IkReal gconst19=((-1.0)*r21*x1521);
IkReal gconst20=(r20*x1521);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x1527 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1527.valid){
continue;
}
IkReal x1525=((-1.0)*(x1527.value));
IkReal x1526=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1525;
IkReal gconst18=x1525;
IkReal gconst19=((-1.0)*r21*x1526);
IkReal gconst20=(r20*x1526);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
IkReal x1528=((-1.0)*(x1530.value));
IkReal x1529=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1528;
IkReal gconst18=x1528;
IkReal gconst19=((-1.0)*r21*x1529);
IkReal gconst20=(r20*x1529);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
IkReal x1531=((-1.0)*(x1533.value));
IkReal x1532=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1531;
IkReal gconst18=x1531;
IkReal gconst19=((-1.0)*r21*x1532);
IkReal gconst20=(r20*x1532);
IkReal x1534=(rxp2_2*sj4);
IkReal x1535=(r21*rxp1_2);
IkReal x1536=(r20*rxp0_2);
IkReal x1537=x1521;
IkReal x1538=(cj4*x1537);
j0eval[0]=((((-13.1578947368421)*x1535*x1538))+(((-13.1578947368421)*x1536*x1538))+(((13.1578947368421)*x1534)));
j0eval[1]=IKsign(((((-1.0)*x1535*x1538))+x1534+(((-1.0)*x1536*x1538))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1539=((0.076)*gconst20);
IkReal x1540=((0.076)*gconst19);
CheckValue<IkReal> x1541=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst20*rxp0_2))+(((-1.0)*r21*sj4*x1539))+(((-1.0)*r20*sj4*x1540))+((cj4*gconst19*rxp1_2))+((rxp2_2*sj4)))),-1);
if(!x1541.valid){
continue;
}
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal((((r10*x1539))+(((-1.0)*py))+(((-1.0)*r11*x1540)))),IkReal((((r00*x1539))+(((-1.0)*px))+(((-1.0)*r01*x1540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1541.value)))+(x1542.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1543=IKcos(j0);
IkReal x1544=IKsin(j0);
IkReal x1545=((0.076)*gconst19);
IkReal x1546=((1.0)*sj4);
IkReal x1547=((0.076)*gconst20);
IkReal x1548=(cj4*gconst19);
IkReal x1549=((1.0)*gconst20);
IkReal x1550=((1.0)*gconst19);
IkReal x1551=(r10*x1549);
IkReal x1552=(cj4*x1544);
IkReal x1553=(r11*x1543);
IkReal x1554=(sj4*x1543);
IkReal x1555=(r01*x1544);
IkReal x1556=(r00*x1544);
IkReal x1557=(r10*x1543);
IkReal x1558=(cj4*x1543);
evalcond[0]=(((gconst19*x1557))+((gconst20*x1553))+(((-1.0)*x1549*x1555))+(((-1.0)*x1550*x1556)));
evalcond[1]=(((x1547*x1557))+(((-1.0)*py*x1543))+(((-1.0)*x1545*x1553))+((px*x1544))+(((-1.0)*x1547*x1556))+((x1545*x1555)));
evalcond[2]=(((r11*x1544*x1548))+((r12*sj4*x1544))+((r01*x1543*x1548))+((r02*x1554))+(((-1.0)*r00*x1549*x1558))+(((-1.0)*x1551*x1552)));
evalcond[3]=(((gconst20*sj4*x1556))+(((-1.0)*gconst20*x1546*x1557))+((r02*x1552))+(((-1.0)*gconst19*x1546*x1555))+((gconst19*sj4*x1553))+(((-1.0)*r12*x1558)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x1544*x1546))+((gconst20*r00*x1552))+(((-1.0)*x1548*x1555))+((r12*x1554))+((x1548*x1553))+(((-1.0)*x1551*x1558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
IkReal x1559=((-1.0)*(x1561.value));
IkReal x1560=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1559;
IkReal gconst18=x1559;
IkReal gconst19=((-1.0)*r21*x1560);
IkReal gconst20=(r20*x1560);
IkReal x1562=((6000.0)*pz);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(cj4,-1);
if(!x1593.valid){
continue;
}
IkReal x1563=x1593.value;
IkReal x1564=((2000.0)*pz);
IkReal x1565=((465.0)*sj0);
IkReal x1566=(cj4*r12);
IkReal x1567=(gconst19*sj4);
IkReal x1568=(gconst20*sj4);
IkReal x1569=(gconst20*r21);
IkReal x1570=(cj4*r22);
IkReal x1571=(cj0*r01);
IkReal x1572=((155.0)*sj0);
IkReal x1573=(cj0*r00);
IkReal x1574=(gconst19*r20);
IkReal x1575=((2055.0)*x1570);
IkReal x1576=((685.0)*x1570);
IkReal x1577=(r22*sj4*x1563);
IkReal x1578=(cj0*cj4*r02);
IkReal x1579=((2055.0)*r20*x1568);
IkReal x1580=((456.0)*x1577);
IkReal x1581=((2055.0)*r21*x1567);
IkReal x1582=((685.0)*r21*x1567);
IkReal x1583=((152.0)*x1577);
IkReal x1584=((685.0)*r20*x1568);
IkReal x1585=((465.0)*x1567*x1571);
IkReal x1586=(r11*x1565*x1567);
IkReal x1587=(x1564+x1582);
IkReal x1588=(x1576+x1583+x1584);
IkReal x1589=(x1579+x1575+x1580);
IkReal x1590=(x1562+x1581+(((465.0)*x1574))+(((465.0)*x1569)));
IkReal x1591=(x1562+x1581+x1586+x1585);
IkReal x1592=(((r10*x1565*x1568))+x1589+(((465.0)*x1578))+(((465.0)*x1568*x1573))+((x1565*x1566)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1590))+x1589)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1590))+x1589)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1588))+(((-155.0)*x1578))+(((-1.0)*r10*x1568*x1572))+(((-1.0)*x1566*x1572))+(((-155.0)*x1568*x1573))+((r11*x1567*x1572))+x1587+(((155.0)*x1567*x1571)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1592))+x1591)))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1592))+x1591)))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x1587))+(((-155.0)*x1574))+x1588+(((-155.0)*x1569))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1623=IKPowWithIntegerCheck(cj4,-1);
if(!x1623.valid){
continue;
}
IkReal x1594=x1623.value;
IkReal x1595=cj4*cj4;
IkReal x1596=((569.0)*cj4);
IkReal x1597=(cj4*pz);
IkReal x1598=((0.002)*x1594);
IkReal x1599=(r22*sj4);
IkReal x1600=(cj4*r20);
IkReal x1601=((2055.0)*sj4);
IkReal x1602=(cj4*r21);
IkReal x1603=((685.0)*sj4);
IkReal x1604=((456.0)*x1599);
IkReal x1605=((6000.0)*x1597);
IkReal x1606=((152.0)*x1599);
IkReal x1607=((2000.0)*x1597);
IkReal x1608=(r22*x1595);
IkReal x1609=((2055.0)*x1608);
IkReal x1610=((465.0)*gconst20*x1602);
IkReal x1611=((465.0)*gconst19*x1600);
IkReal x1612=((685.0)*x1608);
IkReal x1613=((155.0)*gconst19*x1600);
IkReal x1614=((155.0)*gconst20*x1602);
IkReal x1615=(gconst20*x1600*x1601);
IkReal x1616=(gconst19*x1601*x1602);
IkReal x1617=(gconst20*x1600*x1603);
IkReal x1618=(gconst19*x1602*x1603);
IkReal x1619=(x1615+x1609+x1604);
IkReal x1620=(x1617+x1612+x1606);
IkReal x1621=(x1616+x1610+x1611+x1605);
IkReal x1622=(x1618+x1614+x1613+x1607);
op[0]=(x1598*(((((-1.0)*x1596))+x1620+(((-1.0)*x1622)))));
op[1]=-0.428;
op[2]=(x1598*(((((-1.0)*x1596))+x1619+(((-1.0)*x1621)))));
op[3]=-0.856;
op[4]=(x1598*((x1619+(((-1.0)*x1621))+x1596)));
op[5]=-0.428;
op[6]=(x1598*((x1620+(((-1.0)*x1622))+x1596)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1624=cj4*cj4;
CheckValue<IkReal> x1665=IKPowWithIntegerCheck(cj4,-1);
if(!x1665.valid){
continue;
}
IkReal x1625=x1665.value;
IkReal x1626=((569.0)*cj4);
IkReal x1627=((155.0)*sj0);
IkReal x1628=((465.0)*cj0);
IkReal x1629=((0.002)*x1625);
IkReal x1630=((465.0)*sj0);
IkReal x1631=((155.0)*cj0);
IkReal x1632=(r22*sj4);
IkReal x1633=(cj4*pz);
IkReal x1634=((2000.0)*x1633);
IkReal x1635=((152.0)*x1632);
IkReal x1636=((6000.0)*x1633);
IkReal x1637=((456.0)*x1632);
IkReal x1638=(cj4*gconst20*sj4);
IkReal x1639=(cj4*gconst19*sj4);
IkReal x1640=(r22*x1624);
IkReal x1641=(r02*x1624);
IkReal x1642=(r12*x1624);
IkReal x1643=((685.0)*x1640);
IkReal x1644=((2055.0)*x1640);
IkReal x1645=((685.0)*r21*x1639);
IkReal x1646=(x1631*x1641);
IkReal x1647=(x1627*x1642);
IkReal x1648=((685.0)*r20*x1638);
IkReal x1649=((2055.0)*r21*x1639);
IkReal x1650=(x1630*x1642);
IkReal x1651=(x1628*x1641);
IkReal x1652=((2055.0)*r20*x1638);
IkReal x1653=(r01*x1631*x1639);
IkReal x1654=(r11*x1627*x1639);
IkReal x1655=(r00*x1631*x1638);
IkReal x1656=(r10*x1627*x1638);
IkReal x1657=(r01*x1628*x1639);
IkReal x1658=(r11*x1630*x1639);
IkReal x1659=(r10*x1630*x1638);
IkReal x1660=(r00*x1628*x1638);
IkReal x1661=(x1653+x1654+x1645+x1634);
IkReal x1662=(x1658+x1657+x1649+x1636);
IkReal x1663=(x1656+x1655+x1647+x1646+x1643+x1648+x1635);
IkReal x1664=(x1660+x1659+x1652+x1650+x1651+x1644+x1637);
j1evalpoly[0]=(((x1629*(htj1*htj1*htj1*htj1*htj1*htj1)*((x1626+x1661+(((-1.0)*x1663))))))+((x1629*((x1661+(((-1.0)*x1626))+(((-1.0)*x1663))))))+(((0.428)*htj1))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x1629*(htj1*htj1*htj1*htj1)*((x1626+x1662+(((-1.0)*x1664))))))+((x1629*(htj1*htj1)*((x1662+(((-1.0)*x1626))+(((-1.0)*x1664)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1666=((1.0)*cj1);
IkReal x1667=(cj4*r22);
IkReal x1668=(r21*sj1);
IkReal x1669=(gconst19*sj4);
IkReal x1670=(gconst19*r20);
IkReal x1671=(cj1*r21);
IkReal x1672=(gconst20*r20*sj4);
if( IKabs((((sj1*x1667))+((sj1*x1672))+((gconst20*x1671))+((cj1*x1670))+(((-1.0)*x1668*x1669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst20*x1668))+((sj1*x1670))+((x1669*x1671))+(((-1.0)*x1666*x1672))+(((-1.0)*x1666*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1667))+((sj1*x1672))+((gconst20*x1671))+((cj1*x1670))+(((-1.0)*x1668*x1669))))+IKsqr((((gconst20*x1668))+((sj1*x1670))+((x1669*x1671))+(((-1.0)*x1666*x1672))+(((-1.0)*x1666*x1667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1667))+((sj1*x1672))+((gconst20*x1671))+((cj1*x1670))+(((-1.0)*x1668*x1669))), (((gconst20*x1668))+((sj1*x1670))+((x1669*x1671))+(((-1.0)*x1666*x1672))+(((-1.0)*x1666*x1667))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1673=IKcos(j2);
IkReal x1674=IKsin(j2);
IkReal x1675=((1.0)*cj0);
IkReal x1676=(gconst20*sj4);
IkReal x1677=(cj0*gconst19);
IkReal x1678=((1.0)*sj1);
IkReal x1679=((1.0)*gconst19);
IkReal x1680=((0.3425)*sj1);
IkReal x1681=(r10*sj0);
IkReal x1682=((0.076)*gconst20);
IkReal x1683=((1.0)*sj0);
IkReal x1684=(cj1*x1673);
IkReal x1685=(gconst19*r11*sj0);
IkReal x1686=(cj1*x1674);
IkReal x1687=(sj1*x1673);
IkReal x1688=(x1674*x1678);
evalcond[0]=((((-1.0)*gconst20*r21))+x1687+x1686+(((-1.0)*r20*x1679)));
evalcond[1]=((((-1.0)*x1688))+((cj4*r22))+x1684+((r20*x1676))+(((-1.0)*r21*sj4*x1679)));
evalcond[2]=(((r00*x1677))+(((-1.0)*x1688))+x1684+((gconst20*r11*sj0))+((cj0*gconst20*r01))+((gconst19*x1681)));
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(cj4,-1);
if(!x1689.valid){
continue;
}
evalcond[3]=((((-1.0)*x1674*x1680))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1687))+(((0.0775)*x1686))+(((0.3425)*x1684))+pz+(((-0.076)*r22*sj4*(x1689.value))));
evalcond[4]=((((-1.0)*cj4*r12*x1683))+((r01*sj4*x1677))+(((-1.0)*x1673*x1678))+(((-1.0)*x1686))+((sj4*x1685))+(((-1.0)*cj4*r02*x1675))+(((-1.0)*r00*x1675*x1676))+(((-1.0)*x1676*x1681)));
evalcond[5]=(((x1681*x1682))+(((-1.0)*py*x1683))+((cj0*r00*x1682))+(((-0.076)*r01*x1677))+(((-1.0)*px*x1675))+(((0.2845)*sj1))+(((-1.0)*x1673*x1680))+(((0.0775)*x1684))+(((-0.3425)*x1686))+(((0.0535)*cj1))+(((-0.0775)*sj1*x1674))+(((-0.076)*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((((gconst19*r10))+((gconst20*r11)))),IkReal((((gconst20*r01))+((gconst19*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
CheckValue<IkReal> x1691=IKPowWithIntegerCheck(IKsign((((gconst20*r20*sj4))+(((-1.0)*gconst19*r21*sj4))+((r22*((((cj4*(gconst20*gconst20)))+((cj4*(gconst19*gconst19))))))))),-1);
if(!x1691.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1690.value)+(((1.5707963267949)*(x1691.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1692=IKcos(j0);
IkReal x1693=IKsin(j0);
IkReal x1694=((0.076)*gconst19);
IkReal x1695=((1.0)*sj4);
IkReal x1696=((0.076)*gconst20);
IkReal x1697=(cj4*gconst19);
IkReal x1698=((1.0)*gconst20);
IkReal x1699=((1.0)*gconst19);
IkReal x1700=(r10*x1698);
IkReal x1701=(cj4*x1693);
IkReal x1702=(r11*x1692);
IkReal x1703=(sj4*x1692);
IkReal x1704=(r01*x1693);
IkReal x1705=(r00*x1693);
IkReal x1706=(r10*x1692);
IkReal x1707=(cj4*x1692);
evalcond[0]=(((gconst19*x1706))+(((-1.0)*x1698*x1704))+(((-1.0)*x1699*x1705))+((gconst20*x1702)));
evalcond[1]=(((x1696*x1706))+((x1694*x1704))+((px*x1693))+(((-1.0)*x1696*x1705))+(((-1.0)*py*x1692))+(((-1.0)*x1694*x1702)));
evalcond[2]=((((-1.0)*r00*x1698*x1707))+((r02*x1703))+((r12*sj4*x1693))+((r01*x1692*x1697))+(((-1.0)*x1700*x1701))+((r11*x1693*x1697)));
evalcond[3]=(((gconst20*sj4*x1705))+((r02*x1701))+(((-1.0)*gconst19*x1695*x1704))+(((-1.0)*r12*x1707))+((gconst19*sj4*x1702))+(((-1.0)*gconst20*x1695*x1706)));
evalcond[4]=((-1.0)+((x1697*x1702))+((r12*x1703))+(((-1.0)*x1697*x1704))+(((-1.0)*r02*x1693*x1695))+((gconst20*r00*x1701))+(((-1.0)*x1700*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1710 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1710.valid){
continue;
}
IkReal x1708=((-1.0)*(x1710.value));
IkReal x1709=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1708;
IkReal gconst18=x1708;
IkReal gconst19=((-1.0)*r21*x1709);
IkReal gconst20=(r20*x1709);
IkReal x1711=((6000.0)*pz);
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(cj4,-1);
if(!x1742.valid){
continue;
}
IkReal x1712=x1742.value;
IkReal x1713=((2000.0)*pz);
IkReal x1714=((465.0)*sj0);
IkReal x1715=(cj4*r12);
IkReal x1716=(gconst19*sj4);
IkReal x1717=(gconst20*sj4);
IkReal x1718=(gconst20*r21);
IkReal x1719=(cj4*r22);
IkReal x1720=(cj0*r01);
IkReal x1721=((155.0)*sj0);
IkReal x1722=(cj0*r00);
IkReal x1723=(gconst19*r20);
IkReal x1724=((2055.0)*x1719);
IkReal x1725=((685.0)*x1719);
IkReal x1726=(r22*sj4*x1712);
IkReal x1727=(cj0*cj4*r02);
IkReal x1728=((2055.0)*r20*x1717);
IkReal x1729=((456.0)*x1726);
IkReal x1730=((2055.0)*r21*x1716);
IkReal x1731=((685.0)*r21*x1716);
IkReal x1732=((152.0)*x1726);
IkReal x1733=((685.0)*r20*x1717);
IkReal x1734=((465.0)*x1716*x1720);
IkReal x1735=(r11*x1714*x1716);
IkReal x1736=(x1731+x1713);
IkReal x1737=(x1725+x1733+x1732);
IkReal x1738=(x1728+x1729+x1724);
IkReal x1739=(x1730+x1711+(((465.0)*x1718))+(((465.0)*x1723)));
IkReal x1740=(x1730+x1735+x1734+x1711);
IkReal x1741=(x1738+((r10*x1714*x1717))+((x1714*x1715))+(((465.0)*x1727))+(((465.0)*x1717*x1722)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x1738+(((-1.0)*x1739)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-155.0)*x1723))+x1737+(((-155.0)*x1718))+(((-1.0)*x1736)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1740+(((-1.0)*x1741)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1740+(((-1.0)*x1741)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x1715*x1721))+((r11*x1716*x1721))+(((-1.0)*r10*x1717*x1721))+(((-155.0)*x1727))+x1736+(((155.0)*x1716*x1720))+(((-1.0)*x1737))+(((-155.0)*x1717*x1722)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1738+(((-1.0)*x1739))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(cj4,-1);
if(!x1772.valid){
continue;
}
IkReal x1743=x1772.value;
IkReal x1744=cj4*cj4;
IkReal x1745=((569.0)*cj4);
IkReal x1746=(cj4*pz);
IkReal x1747=((0.002)*x1743);
IkReal x1748=(r22*sj4);
IkReal x1749=(cj4*r20);
IkReal x1750=((2055.0)*sj4);
IkReal x1751=(cj4*r21);
IkReal x1752=((685.0)*sj4);
IkReal x1753=((456.0)*x1748);
IkReal x1754=((6000.0)*x1746);
IkReal x1755=((152.0)*x1748);
IkReal x1756=((2000.0)*x1746);
IkReal x1757=(r22*x1744);
IkReal x1758=((2055.0)*x1757);
IkReal x1759=((465.0)*gconst20*x1751);
IkReal x1760=((465.0)*gconst19*x1749);
IkReal x1761=((685.0)*x1757);
IkReal x1762=((155.0)*gconst19*x1749);
IkReal x1763=((155.0)*gconst20*x1751);
IkReal x1764=(gconst20*x1749*x1750);
IkReal x1765=(gconst19*x1750*x1751);
IkReal x1766=(gconst20*x1749*x1752);
IkReal x1767=(gconst19*x1751*x1752);
IkReal x1768=(x1764+x1758+x1753);
IkReal x1769=(x1761+x1766+x1755);
IkReal x1770=(x1760+x1765+x1759+x1754);
IkReal x1771=(x1762+x1763+x1767+x1756);
op[0]=(x1747*((x1769+(((-1.0)*x1771))+(((-1.0)*x1745)))));
op[1]=-0.428;
op[2]=(x1747*((x1768+(((-1.0)*x1770))+(((-1.0)*x1745)))));
op[3]=-0.856;
op[4]=(x1747*((x1768+x1745+(((-1.0)*x1770)))));
op[5]=-0.428;
op[6]=(x1747*((x1769+x1745+(((-1.0)*x1771)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1773=cj4*cj4;
CheckValue<IkReal> x1814=IKPowWithIntegerCheck(cj4,-1);
if(!x1814.valid){
continue;
}
IkReal x1774=x1814.value;
IkReal x1775=((569.0)*cj4);
IkReal x1776=((155.0)*sj0);
IkReal x1777=((465.0)*cj0);
IkReal x1778=((0.002)*x1774);
IkReal x1779=((465.0)*sj0);
IkReal x1780=((155.0)*cj0);
IkReal x1781=(r22*sj4);
IkReal x1782=(cj4*pz);
IkReal x1783=((2000.0)*x1782);
IkReal x1784=((152.0)*x1781);
IkReal x1785=((6000.0)*x1782);
IkReal x1786=((456.0)*x1781);
IkReal x1787=(cj4*gconst20*sj4);
IkReal x1788=(cj4*gconst19*sj4);
IkReal x1789=(r22*x1773);
IkReal x1790=(r02*x1773);
IkReal x1791=(r12*x1773);
IkReal x1792=((685.0)*x1789);
IkReal x1793=((2055.0)*x1789);
IkReal x1794=((685.0)*r21*x1788);
IkReal x1795=(x1780*x1790);
IkReal x1796=(x1776*x1791);
IkReal x1797=((685.0)*r20*x1787);
IkReal x1798=((2055.0)*r21*x1788);
IkReal x1799=(x1779*x1791);
IkReal x1800=(x1777*x1790);
IkReal x1801=((2055.0)*r20*x1787);
IkReal x1802=(r01*x1780*x1788);
IkReal x1803=(r11*x1776*x1788);
IkReal x1804=(r00*x1780*x1787);
IkReal x1805=(r10*x1776*x1787);
IkReal x1806=(r01*x1777*x1788);
IkReal x1807=(r11*x1779*x1788);
IkReal x1808=(r10*x1779*x1787);
IkReal x1809=(r00*x1777*x1787);
IkReal x1810=(x1783+x1794+x1803+x1802);
IkReal x1811=(x1785+x1798+x1807+x1806);
IkReal x1812=(x1784+x1792+x1797+x1796+x1795+x1805+x1804);
IkReal x1813=(x1786+x1799+x1793+x1801+x1800+x1809+x1808);
j1evalpoly[0]=(((x1778*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1813))+x1775+x1811))))+(((0.428)*htj1))+((x1778*(((((-1.0)*x1812))+(((-1.0)*x1775))+x1810))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x1778*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1812))+x1775+x1810))))+((x1778*(htj1*htj1)*(((((-1.0)*x1813))+(((-1.0)*x1775))+x1811)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1815=((1.0)*cj1);
IkReal x1816=(cj4*r22);
IkReal x1817=(r21*sj1);
IkReal x1818=(gconst19*sj4);
IkReal x1819=(gconst19*r20);
IkReal x1820=(cj1*r21);
IkReal x1821=(gconst20*r20*sj4);
if( IKabs((((sj1*x1821))+((sj1*x1816))+((gconst20*x1820))+((cj1*x1819))+(((-1.0)*x1817*x1818)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1818*x1820))+((sj1*x1819))+((gconst20*x1817))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1821))+((sj1*x1816))+((gconst20*x1820))+((cj1*x1819))+(((-1.0)*x1817*x1818))))+IKsqr((((x1818*x1820))+((sj1*x1819))+((gconst20*x1817))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1821))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1821))+((sj1*x1816))+((gconst20*x1820))+((cj1*x1819))+(((-1.0)*x1817*x1818))), (((x1818*x1820))+((sj1*x1819))+((gconst20*x1817))+(((-1.0)*x1815*x1816))+(((-1.0)*x1815*x1821))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1822=IKcos(j2);
IkReal x1823=IKsin(j2);
IkReal x1824=((1.0)*cj0);
IkReal x1825=(gconst20*sj4);
IkReal x1826=(cj0*gconst19);
IkReal x1827=((1.0)*sj1);
IkReal x1828=((1.0)*gconst19);
IkReal x1829=((0.3425)*sj1);
IkReal x1830=(r10*sj0);
IkReal x1831=((0.076)*gconst20);
IkReal x1832=((1.0)*sj0);
IkReal x1833=(cj1*x1822);
IkReal x1834=(gconst19*r11*sj0);
IkReal x1835=(cj1*x1823);
IkReal x1836=(sj1*x1822);
IkReal x1837=(x1823*x1827);
evalcond[0]=((((-1.0)*gconst20*r21))+x1836+x1835+(((-1.0)*r20*x1828)));
evalcond[1]=((((-1.0)*r21*sj4*x1828))+((cj4*r22))+(((-1.0)*x1837))+x1833+((r20*x1825)));
evalcond[2]=(((r00*x1826))+(((-1.0)*x1837))+((gconst19*x1830))+((gconst20*r11*sj0))+x1833+((cj0*gconst20*r01)));
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(cj4,-1);
if(!x1838.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x1836))+(((0.0775)*x1835))+(((0.3425)*x1833))+pz+(((-1.0)*x1823*x1829))+(((-0.076)*r22*sj4*(x1838.value))));
evalcond[4]=((((-1.0)*x1825*x1830))+(((-1.0)*x1835))+(((-1.0)*cj4*r12*x1832))+((r01*sj4*x1826))+(((-1.0)*cj4*r02*x1824))+(((-1.0)*x1822*x1827))+(((-1.0)*r00*x1824*x1825))+((sj4*x1834)));
evalcond[5]=((((0.2845)*sj1))+(((-1.0)*py*x1832))+(((-0.3425)*x1835))+(((-0.0775)*sj1*x1823))+(((-0.076)*x1834))+(((0.0775)*x1833))+((x1830*x1831))+(((0.0535)*cj1))+(((-1.0)*x1822*x1829))+((cj0*r00*x1831))+(((-1.0)*px*x1824))+(((-0.076)*r01*x1826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1839=(gconst19*sj4);
IkReal x1840=((1.0)*cj4);
IkReal x1841=((1.0)*gconst20*sj4);
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x1842.valid){
continue;
}
CheckValue<IkReal> x1843 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1841))+((r11*x1839))+(((-1.0)*r12*x1840)))),IkReal((((r01*x1839))+(((-1.0)*r00*x1841))+(((-1.0)*r02*x1840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1843.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1842.value)))+(x1843.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1844=IKcos(j0);
IkReal x1845=IKsin(j0);
IkReal x1846=((0.076)*gconst19);
IkReal x1847=((1.0)*sj4);
IkReal x1848=((0.076)*gconst20);
IkReal x1849=(cj4*gconst19);
IkReal x1850=((1.0)*gconst20);
IkReal x1851=((1.0)*gconst19);
IkReal x1852=(r10*x1850);
IkReal x1853=(cj4*x1845);
IkReal x1854=(r11*x1844);
IkReal x1855=(sj4*x1844);
IkReal x1856=(r01*x1845);
IkReal x1857=(r00*x1845);
IkReal x1858=(r10*x1844);
IkReal x1859=(cj4*x1844);
evalcond[0]=((((-1.0)*x1851*x1857))+(((-1.0)*x1850*x1856))+((gconst20*x1854))+((gconst19*x1858)));
evalcond[1]=((((-1.0)*x1848*x1857))+((x1848*x1858))+((px*x1845))+((x1846*x1856))+(((-1.0)*py*x1844))+(((-1.0)*x1846*x1854)));
evalcond[2]=(((r11*x1845*x1849))+((r01*x1844*x1849))+(((-1.0)*x1852*x1853))+(((-1.0)*r00*x1850*x1859))+((r02*x1855))+((r12*sj4*x1845)));
evalcond[3]=((((-1.0)*r12*x1859))+((gconst19*sj4*x1854))+((gconst20*sj4*x1857))+(((-1.0)*gconst19*x1847*x1856))+(((-1.0)*gconst20*x1847*x1858))+((r02*x1853)));
evalcond[4]=((-1.0)+(((-1.0)*x1849*x1856))+((gconst20*r00*x1853))+((x1849*x1854))+(((-1.0)*x1852*x1859))+((r12*x1855))+(((-1.0)*r02*x1845*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
IkReal x1860=((-1.0)*(x1862.value));
IkReal x1861=x1521;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst19;
cj5=gconst20;
j5=x1860;
IkReal gconst18=x1860;
IkReal gconst19=((-1.0)*r21*x1861);
IkReal gconst20=(r20*x1861);
IkReal x1863=((6000.0)*pz);
CheckValue<IkReal> x1894=IKPowWithIntegerCheck(cj4,-1);
if(!x1894.valid){
continue;
}
IkReal x1864=x1894.value;
IkReal x1865=((2000.0)*pz);
IkReal x1866=((465.0)*sj0);
IkReal x1867=(cj4*r12);
IkReal x1868=(gconst19*sj4);
IkReal x1869=(gconst20*sj4);
IkReal x1870=(gconst20*r21);
IkReal x1871=(cj4*r22);
IkReal x1872=(cj0*r01);
IkReal x1873=((155.0)*sj0);
IkReal x1874=(cj0*r00);
IkReal x1875=(gconst19*r20);
IkReal x1876=((2055.0)*x1871);
IkReal x1877=((685.0)*x1871);
IkReal x1878=(r22*sj4*x1864);
IkReal x1879=(cj0*cj4*r02);
IkReal x1880=((2055.0)*r20*x1869);
IkReal x1881=((456.0)*x1878);
IkReal x1882=((2055.0)*r21*x1868);
IkReal x1883=((685.0)*r21*x1868);
IkReal x1884=((152.0)*x1878);
IkReal x1885=((685.0)*r20*x1869);
IkReal x1886=((465.0)*x1868*x1872);
IkReal x1887=(r11*x1866*x1868);
IkReal x1888=(x1865+x1883);
IkReal x1889=(x1877+x1885+x1884);
IkReal x1890=(x1876+x1881+x1880);
IkReal x1891=((((465.0)*x1870))+(((465.0)*x1875))+x1863+x1882);
IkReal x1892=(x1863+x1887+x1886+x1882);
IkReal x1893=(((x1866*x1867))+(((465.0)*x1879))+x1890+(((465.0)*x1869*x1874))+((r10*x1866*x1869)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x1892+(((-1.0)*x1893)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1892+(((-1.0)*x1893)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((155.0)*x1868*x1872))+((r11*x1868*x1873))+(((-155.0)*x1879))+(((-155.0)*x1869*x1874))+(((-1.0)*r10*x1869*x1873))+(((-1.0)*x1867*x1873))+x1888+(((-1.0)*x1889)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-155.0)*x1870))+(((-155.0)*x1875))+x1889+(((-1.0)*x1888)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x1890+(((-1.0)*x1891)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x1890+(((-1.0)*x1891))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(cj4,-1);
if(!x1924.valid){
continue;
}
IkReal x1895=x1924.value;
IkReal x1896=cj4*cj4;
IkReal x1897=((569.0)*cj4);
IkReal x1898=(cj4*pz);
IkReal x1899=((0.002)*x1895);
IkReal x1900=(r22*sj4);
IkReal x1901=(cj4*r20);
IkReal x1902=((2055.0)*sj4);
IkReal x1903=(cj4*r21);
IkReal x1904=((685.0)*sj4);
IkReal x1905=((456.0)*x1900);
IkReal x1906=((6000.0)*x1898);
IkReal x1907=((152.0)*x1900);
IkReal x1908=((2000.0)*x1898);
IkReal x1909=(r22*x1896);
IkReal x1910=((2055.0)*x1909);
IkReal x1911=((465.0)*gconst20*x1903);
IkReal x1912=((465.0)*gconst19*x1901);
IkReal x1913=((685.0)*x1909);
IkReal x1914=((155.0)*gconst19*x1901);
IkReal x1915=((155.0)*gconst20*x1903);
IkReal x1916=(gconst20*x1901*x1902);
IkReal x1917=(gconst19*x1902*x1903);
IkReal x1918=(gconst20*x1901*x1904);
IkReal x1919=(gconst19*x1903*x1904);
IkReal x1920=(x1905+x1910+x1916);
IkReal x1921=(x1907+x1918+x1913);
IkReal x1922=(x1906+x1911+x1912+x1917);
IkReal x1923=(x1908+x1919+x1915+x1914);
op[0]=(x1899*(((((-1.0)*x1923))+x1921+(((-1.0)*x1897)))));
op[1]=-0.428;
op[2]=(x1899*(((((-1.0)*x1922))+x1920+(((-1.0)*x1897)))));
op[3]=-0.856;
op[4]=(x1899*(((((-1.0)*x1922))+x1920+x1897)));
op[5]=-0.428;
op[6]=(x1899*(((((-1.0)*x1923))+x1921+x1897)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1925=cj4*cj4;
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(cj4,-1);
if(!x1966.valid){
continue;
}
IkReal x1926=x1966.value;
IkReal x1927=((569.0)*cj4);
IkReal x1928=((155.0)*sj0);
IkReal x1929=((465.0)*cj0);
IkReal x1930=((0.002)*x1926);
IkReal x1931=((465.0)*sj0);
IkReal x1932=((155.0)*cj0);
IkReal x1933=(r22*sj4);
IkReal x1934=(cj4*pz);
IkReal x1935=((2000.0)*x1934);
IkReal x1936=((152.0)*x1933);
IkReal x1937=((6000.0)*x1934);
IkReal x1938=((456.0)*x1933);
IkReal x1939=(cj4*gconst20*sj4);
IkReal x1940=(cj4*gconst19*sj4);
IkReal x1941=(r22*x1925);
IkReal x1942=(r02*x1925);
IkReal x1943=(r12*x1925);
IkReal x1944=((685.0)*x1941);
IkReal x1945=((2055.0)*x1941);
IkReal x1946=((685.0)*r21*x1940);
IkReal x1947=(x1932*x1942);
IkReal x1948=(x1928*x1943);
IkReal x1949=((685.0)*r20*x1939);
IkReal x1950=((2055.0)*r21*x1940);
IkReal x1951=(x1931*x1943);
IkReal x1952=(x1929*x1942);
IkReal x1953=((2055.0)*r20*x1939);
IkReal x1954=(r01*x1932*x1940);
IkReal x1955=(r11*x1928*x1940);
IkReal x1956=(r00*x1932*x1939);
IkReal x1957=(r10*x1928*x1939);
IkReal x1958=(r01*x1929*x1940);
IkReal x1959=(r11*x1931*x1940);
IkReal x1960=(r10*x1931*x1939);
IkReal x1961=(r00*x1929*x1939);
IkReal x1962=(x1935+x1946+x1955+x1954);
IkReal x1963=(x1937+x1950+x1959+x1958);
IkReal x1964=(x1936+x1948+x1949+x1947+x1944+x1957+x1956);
IkReal x1965=(x1938+x1960+x1961+x1945+x1951+x1953+x1952);
j1evalpoly[0]=((((0.428)*htj1))+((x1930*(((((-1.0)*x1964))+(((-1.0)*x1927))+x1962))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x1930*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1964))+x1927+x1962))))+((x1930*(htj1*htj1*htj1*htj1)*(((((-1.0)*x1965))+x1927+x1963))))+((x1930*(htj1*htj1)*(((((-1.0)*x1965))+(((-1.0)*x1927))+x1963)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1967=((1.0)*cj1);
IkReal x1968=(cj4*r22);
IkReal x1969=(r21*sj1);
IkReal x1970=(gconst19*sj4);
IkReal x1971=(gconst19*r20);
IkReal x1972=(cj1*r21);
IkReal x1973=(gconst20*r20*sj4);
if( IKabs((((cj1*x1971))+((gconst20*x1972))+((sj1*x1968))+((sj1*x1973))+(((-1.0)*x1969*x1970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((gconst20*x1969))+((sj1*x1971))+((x1970*x1972))+(((-1.0)*x1967*x1968))+(((-1.0)*x1967*x1973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1971))+((gconst20*x1972))+((sj1*x1968))+((sj1*x1973))+(((-1.0)*x1969*x1970))))+IKsqr((((gconst20*x1969))+((sj1*x1971))+((x1970*x1972))+(((-1.0)*x1967*x1968))+(((-1.0)*x1967*x1973))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1971))+((gconst20*x1972))+((sj1*x1968))+((sj1*x1973))+(((-1.0)*x1969*x1970))), (((gconst20*x1969))+((sj1*x1971))+((x1970*x1972))+(((-1.0)*x1967*x1968))+(((-1.0)*x1967*x1973))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1974=IKcos(j2);
IkReal x1975=IKsin(j2);
IkReal x1976=((1.0)*cj0);
IkReal x1977=(gconst20*sj4);
IkReal x1978=(cj0*gconst19);
IkReal x1979=((1.0)*sj1);
IkReal x1980=((1.0)*gconst19);
IkReal x1981=((0.3425)*sj1);
IkReal x1982=(r10*sj0);
IkReal x1983=((0.076)*gconst20);
IkReal x1984=((1.0)*sj0);
IkReal x1985=(cj1*x1974);
IkReal x1986=(gconst19*r11*sj0);
IkReal x1987=(cj1*x1975);
IkReal x1988=(sj1*x1974);
IkReal x1989=(x1975*x1979);
evalcond[0]=((((-1.0)*gconst20*r21))+x1987+x1988+(((-1.0)*r20*x1980)));
evalcond[1]=((((-1.0)*x1989))+((cj4*r22))+((r20*x1977))+x1985+(((-1.0)*r21*sj4*x1980)));
evalcond[2]=((((-1.0)*x1989))+((gconst20*r11*sj0))+((gconst19*x1982))+((r00*x1978))+x1985+((cj0*gconst20*r01)));
CheckValue<IkReal> x1990=IKPowWithIntegerCheck(cj4,-1);
if(!x1990.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*x1987))+(((0.0775)*x1988))+(((-0.2845)*cj1))+(((-1.0)*x1975*x1981))+pz+(((0.3425)*x1985))+(((-0.076)*r22*sj4*(x1990.value))));
evalcond[4]=((((-1.0)*x1977*x1982))+(((-1.0)*cj4*r02*x1976))+((r01*sj4*x1978))+(((-1.0)*x1974*x1979))+((sj4*x1986))+(((-1.0)*cj4*r12*x1984))+(((-1.0)*x1987))+(((-1.0)*r00*x1976*x1977)));
evalcond[5]=((((-0.0775)*sj1*x1975))+(((-0.3425)*x1987))+(((0.0775)*x1985))+(((0.2845)*sj1))+((cj0*r00*x1983))+(((-0.076)*r01*x1978))+(((-1.0)*x1974*x1981))+(((-1.0)*px*x1976))+((x1982*x1983))+(((0.0535)*cj1))+(((-1.0)*py*x1984))+(((-0.076)*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1992 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1992)==0){
continue;
}
IkReal x1991=pow(x1992,-0.5);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x1993.value))));
IkReal gconst22=((1.0)*r21*x1991);
IkReal gconst23=((-1.0)*r20*x1991);
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1994.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal x1995=((1.0)*(x1997.value));
IkReal x1996=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1995)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1995)));
IkReal gconst22=((1.0)*r21*x1996);
IkReal gconst23=((-1.0)*r20*x1996);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
IkReal x1998=((1.0)*(x2000.value));
IkReal x1999=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1998)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1998)));
IkReal gconst22=((1.0)*r21*x1999);
IkReal gconst23=((-1.0)*r20*x1999);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
CheckValue<IkReal> x2003 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2003.valid){
continue;
}
IkReal x2001=((1.0)*(x2003.value));
IkReal x2002=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2001)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2001)));
IkReal gconst22=((1.0)*r21*x2002);
IkReal gconst23=((-1.0)*r20*x2002);
IkReal x2004=(rxp2_2*sj4);
IkReal x2005=(r21*rxp1_2);
IkReal x2006=(r20*rxp0_2);
IkReal x2007=x1991;
IkReal x2008=(cj4*x2007);
j0eval[0]=((((13.1578947368421)*x2005*x2008))+(((13.1578947368421)*x2004))+(((13.1578947368421)*x2006*x2008)));
j0eval[1]=IKsign((x2004+(((1.0)*x2006*x2008))+(((1.0)*x2005*x2008))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2009=((0.076)*gconst23);
IkReal x2010=((0.076)*gconst22);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((((r10*x2009))+(((-1.0)*py))+(((-1.0)*r11*x2010)))),IkReal((((r00*x2009))+(((-1.0)*px))+(((-1.0)*r01*x2010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(IKsign((((cj4*gconst22*rxp1_2))+(((-1.0)*r21*sj4*x2009))+(((-1.0)*cj4*gconst23*rxp0_2))+(((-1.0)*r20*sj4*x2010))+((rxp2_2*sj4)))),-1);
if(!x2012.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2011.value)+(((1.5707963267949)*(x2012.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2013=IKcos(j0);
IkReal x2014=IKsin(j0);
IkReal x2015=(gconst22*r01);
IkReal x2016=(cj4*gconst23);
IkReal x2017=(r02*sj4);
IkReal x2018=((1.0)*r10);
IkReal x2019=(r12*sj4);
IkReal x2020=(gconst22*r11);
IkReal x2021=((1.0)*x2014);
IkReal x2022=(r00*x2014);
IkReal x2023=(gconst23*x2013);
IkReal x2024=(cj4*x2013);
IkReal x2025=(cj4*x2014);
IkReal x2026=((1.0)*x2013);
IkReal x2027=(x2013*x2020);
evalcond[0]=((((-1.0)*gconst22*r00*x2021))+((r11*x2023))+(((-1.0)*gconst23*r01*x2021))+((gconst22*r10*x2013)));
evalcond[1]=((((-0.076)*x2027))+((px*x2014))+(((-0.076)*gconst23*x2022))+(((-1.0)*py*x2026))+(((0.076)*x2014*x2015))+(((0.076)*r10*x2023)));
evalcond[2]=(((x2020*x2025))+((x2014*x2019))+(((-1.0)*r00*x2016*x2026))+(((-1.0)*x2014*x2016*x2018))+((x2013*x2017))+((x2015*x2024)));
evalcond[3]=(((gconst23*sj4*x2022))+(((-1.0)*sj4*x2015*x2021))+((r02*x2025))+(((-1.0)*r12*x2024))+(((-1.0)*sj4*x2018*x2023))+((sj4*x2027)));
evalcond[4]=((-1.0)+((x2020*x2024))+(((-1.0)*x2013*x2016*x2018))+(((-1.0)*x2017*x2021))+(((-1.0)*cj4*x2015*x2021))+((x2016*x2022))+((x2013*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
IkReal x2028=((1.0)*(x2030.value));
IkReal x2029=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2028)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2028)));
IkReal gconst22=((1.0)*r21*x2029);
IkReal gconst23=((-1.0)*r20*x2029);
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(cj4,-1);
if(!x2066.valid){
continue;
}
IkReal x2031=x2066.value;
IkReal x2032=((2000.0)*pz);
IkReal x2033=((6000.0)*pz);
IkReal x2034=((465.0)*cj4);
IkReal x2035=(r12*sj0);
IkReal x2036=((155.0)*gconst23);
IkReal x2037=(cj0*r02);
IkReal x2038=(cj0*sj4);
IkReal x2039=(gconst22*r01);
IkReal x2040=(cj4*r22);
IkReal x2041=(gconst22*r20);
IkReal x2042=(gconst22*sj4);
IkReal x2043=((155.0)*cj4);
IkReal x2044=((465.0)*gconst23);
IkReal x2045=(r11*sj0);
IkReal x2046=((685.0)*x2040);
IkReal x2047=((2055.0)*x2040);
IkReal x2048=(r10*sj0*sj4);
IkReal x2049=(r22*sj4*x2031);
IkReal x2050=(gconst23*r20*sj4);
IkReal x2051=((685.0)*x2050);
IkReal x2052=((152.0)*x2049);
IkReal x2053=((685.0)*r21*x2042);
IkReal x2054=((2055.0)*x2050);
IkReal x2055=((456.0)*x2049);
IkReal x2056=((2055.0)*r21*x2042);
IkReal x2057=((465.0)*x2042*x2045);
IkReal x2058=((465.0)*x2038*x2039);
IkReal x2059=(x2053+x2032);
IkReal x2060=(x2056+x2033);
IkReal x2061=(x2057+x2058);
IkReal x2062=(x2047+x2055+x2054);
IkReal x2063=(x2046+x2051+x2052);
IkReal x2064=((((465.0)*x2041))+((r21*x2044))+x2060);
IkReal x2065=(((x2034*x2035))+((x2034*x2037))+((r00*x2038*x2044))+x2062+((x2044*x2048)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x2063+(((-1.0)*x2059))+(((-155.0)*x2041))+(((-1.0)*r21*x2036)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2062+(((-1.0)*x2064)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2060+x2061+(((-1.0)*x2065)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2062+(((-1.0)*x2064)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((155.0)*x2042*x2045))+x2059+(((155.0)*x2038*x2039))+(((-1.0)*x2063))+(((-1.0)*r00*x2036*x2038))+(((-1.0)*x2036*x2048))+(((-1.0)*x2035*x2043))+(((-1.0)*x2037*x2043)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2060+x2061+(((-1.0)*x2065))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(cj4,-1);
if(!x2096.valid){
continue;
}
IkReal x2067=x2096.value;
IkReal x2068=cj4*cj4;
IkReal x2069=((569.0)*cj4);
IkReal x2070=(cj4*pz);
IkReal x2071=(cj4*r20);
IkReal x2072=(gconst23*sj4);
IkReal x2073=(r22*sj4);
IkReal x2074=(cj4*r21);
IkReal x2075=(gconst22*sj4);
IkReal x2076=((0.002)*x2067);
IkReal x2077=((456.0)*x2073);
IkReal x2078=((6000.0)*x2070);
IkReal x2079=((152.0)*x2073);
IkReal x2080=((2000.0)*x2070);
IkReal x2081=(r22*x2068);
IkReal x2082=((2055.0)*x2081);
IkReal x2083=((465.0)*gconst22*x2071);
IkReal x2084=((465.0)*gconst23*x2074);
IkReal x2085=((685.0)*x2081);
IkReal x2086=((155.0)*gconst22*x2071);
IkReal x2087=((155.0)*gconst23*x2074);
IkReal x2088=((2055.0)*x2071*x2072);
IkReal x2089=((2055.0)*x2074*x2075);
IkReal x2090=((685.0)*x2071*x2072);
IkReal x2091=((685.0)*x2074*x2075);
IkReal x2092=(x2079+x2090+x2085);
IkReal x2093=(x2077+x2088+x2082);
IkReal x2094=(x2091+x2080+x2086+x2087);
IkReal x2095=(x2078+x2089+x2083+x2084);
op[0]=(x2076*(((((-1.0)*x2094))+x2092+(((-1.0)*x2069)))));
op[1]=-0.428;
op[2]=(x2076*(((((-1.0)*x2095))+x2093+(((-1.0)*x2069)))));
op[3]=-0.856;
op[4]=(x2076*(((((-1.0)*x2095))+x2069+x2093)));
op[5]=-0.428;
op[6]=(x2076*(((((-1.0)*x2094))+x2069+x2092)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2097=cj4*cj4;
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(cj4,-1);
if(!x2140.valid){
continue;
}
IkReal x2098=x2140.value;
IkReal x2099=((569.0)*cj4);
IkReal x2100=((0.002)*x2098);
IkReal x2101=(r22*sj4);
IkReal x2102=(cj4*pz);
IkReal x2103=((6000.0)*x2102);
IkReal x2104=((456.0)*x2101);
IkReal x2105=((2000.0)*x2102);
IkReal x2106=((152.0)*x2101);
IkReal x2107=((155.0)*cj4*sj4);
IkReal x2108=(cj0*gconst23*r00);
IkReal x2109=(gconst22*r11*sj0);
IkReal x2110=(gconst23*r10*sj0);
IkReal x2111=((465.0)*cj4*sj4);
IkReal x2112=(r22*x2097);
IkReal x2113=(cj0*gconst22*r01);
IkReal x2114=((2055.0)*x2112);
IkReal x2115=((685.0)*x2112);
IkReal x2116=(cj0*r02*x2097);
IkReal x2117=(cj4*gconst22*r21*sj4);
IkReal x2118=(r12*sj0*x2097);
IkReal x2119=(cj4*gconst23*r20*sj4);
IkReal x2120=((2055.0)*x2117);
IkReal x2121=((2055.0)*x2119);
IkReal x2122=((465.0)*x2118);
IkReal x2123=((465.0)*x2116);
IkReal x2124=((685.0)*x2117);
IkReal x2125=((155.0)*x2116);
IkReal x2126=((155.0)*x2118);
IkReal x2127=((685.0)*x2119);
IkReal x2128=(x2109*x2111);
IkReal x2129=(x2111*x2113);
IkReal x2130=(x2108*x2111);
IkReal x2131=(x2110*x2111);
IkReal x2132=(x2107*x2113);
IkReal x2133=(x2107*x2109);
IkReal x2134=(x2107*x2110);
IkReal x2135=(x2107*x2108);
IkReal x2136=(x2124+x2105+x2132+x2133);
IkReal x2137=(x2120+x2129+x2128+x2103);
IkReal x2138=(x2121+x2123+x2122+x2114+x2104+x2130+x2131);
IkReal x2139=(x2125+x2127+x2126+x2115+x2106+x2134+x2135);
j1evalpoly[0]=(((x2100*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x2139))+x2099+x2136))))+(((0.428)*htj1))+((x2100*(htj1*htj1)*(((((-1.0)*x2099))+(((-1.0)*x2138))+x2137))))+(((0.856)*(htj1*htj1*htj1)))+((x2100*(((((-1.0)*x2099))+(((-1.0)*x2139))+x2136))))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2100*(htj1*htj1*htj1*htj1)*(((((-1.0)*x2138))+x2099+x2137)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2141=(gconst22*r20);
IkReal x2142=(cj1*gconst23);
IkReal x2143=((1.0)*sj4);
IkReal x2144=(cj4*r22);
IkReal x2145=(gconst22*r21);
IkReal x2146=(gconst23*sj1);
if( IKabs((((cj1*x2141))+(((-1.0)*sj1*x2143*x2145))+((r20*sj4*x2146))+((sj1*x2144))+((r21*x2142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2144))+(((-1.0)*r20*x2142*x2143))+((cj1*sj4*x2145))+((sj1*x2141))+((r21*x2146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2141))+(((-1.0)*sj1*x2143*x2145))+((r20*sj4*x2146))+((sj1*x2144))+((r21*x2142))))+IKsqr(((((-1.0)*cj1*x2144))+(((-1.0)*r20*x2142*x2143))+((cj1*sj4*x2145))+((sj1*x2141))+((r21*x2146))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2141))+(((-1.0)*sj1*x2143*x2145))+((r20*sj4*x2146))+((sj1*x2144))+((r21*x2142))), ((((-1.0)*cj1*x2144))+(((-1.0)*r20*x2142*x2143))+((cj1*sj4*x2145))+((sj1*x2141))+((r21*x2146))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2147=IKcos(j2);
IkReal x2148=IKsin(j2);
IkReal x2149=((1.0)*gconst22);
IkReal x2150=((1.0)*cj0);
IkReal x2151=((0.076)*gconst22);
IkReal x2152=(r11*sj0);
IkReal x2153=(cj0*r01);
IkReal x2154=(gconst22*sj4);
IkReal x2155=(gconst23*sj4);
IkReal x2156=(cj0*r00);
IkReal x2157=((1.0)*sj1);
IkReal x2158=(r10*sj0);
IkReal x2159=((0.3425)*sj1);
IkReal x2160=((0.076)*gconst23);
IkReal x2161=((1.0)*sj0);
IkReal x2162=(cj1*x2147);
IkReal x2163=(cj1*x2148);
IkReal x2164=(sj1*x2147);
IkReal x2165=(x2148*x2157);
evalcond[0]=((((-1.0)*gconst23*r21))+x2164+x2163+(((-1.0)*r20*x2149)));
evalcond[1]=(((cj4*r22))+((r20*x2155))+x2162+(((-1.0)*r21*sj4*x2149))+(((-1.0)*x2165)));
evalcond[2]=(x2162+((gconst22*x2158))+((gconst22*x2156))+((gconst23*x2152))+((gconst23*x2153))+(((-1.0)*x2165)));
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(cj4,-1);
if(!x2166.valid){
continue;
}
evalcond[3]=((((0.3425)*x2162))+(((-1.0)*x2148*x2159))+(((0.0535)*sj1))+(((0.0775)*x2164))+(((0.0775)*x2163))+(((-0.2845)*cj1))+pz+(((-0.076)*r22*sj4*(x2166.value))));
evalcond[4]=((((-1.0)*r00*x2150*x2155))+(((-1.0)*cj4*r02*x2150))+((x2152*x2154))+(((-1.0)*cj4*r12*x2161))+(((-1.0)*x2155*x2158))+(((-1.0)*x2163))+(((-1.0)*x2147*x2157))+((x2153*x2154)));
evalcond[5]=((((-1.0)*px*x2150))+(((0.2845)*sj1))+(((0.0775)*x2162))+(((-0.3425)*x2163))+(((-0.0775)*sj1*x2148))+(((-1.0)*py*x2161))+((x2156*x2160))+(((0.0535)*cj1))+(((-1.0)*x2147*x2159))+((x2158*x2160))+(((-1.0)*x2151*x2153))+(((-1.0)*x2151*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal((((gconst22*r10))+((gconst23*r11)))),IkReal((((gconst22*r00))+((gconst23*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(IKsign((((r22*((((cj4*(gconst23*gconst23)))+((cj4*(gconst22*gconst22)))))))+((gconst23*r20*sj4))+(((-1.0)*gconst22*r21*sj4)))),-1);
if(!x2168.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2167.value)+(((1.5707963267949)*(x2168.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2169=IKcos(j0);
IkReal x2170=IKsin(j0);
IkReal x2171=(gconst22*r01);
IkReal x2172=(cj4*gconst23);
IkReal x2173=(r02*sj4);
IkReal x2174=((1.0)*r10);
IkReal x2175=(r12*sj4);
IkReal x2176=(gconst22*r11);
IkReal x2177=((1.0)*x2170);
IkReal x2178=(r00*x2170);
IkReal x2179=(gconst23*x2169);
IkReal x2180=(cj4*x2169);
IkReal x2181=(cj4*x2170);
IkReal x2182=((1.0)*x2169);
IkReal x2183=(x2169*x2176);
evalcond[0]=(((r11*x2179))+(((-1.0)*gconst23*r01*x2177))+((gconst22*r10*x2169))+(((-1.0)*gconst22*r00*x2177)));
evalcond[1]=((((0.076)*r10*x2179))+((px*x2170))+(((-1.0)*py*x2182))+(((-0.076)*gconst23*x2178))+(((0.076)*x2170*x2171))+(((-0.076)*x2183)));
evalcond[2]=(((x2170*x2175))+((x2176*x2181))+(((-1.0)*r00*x2172*x2182))+(((-1.0)*x2170*x2172*x2174))+((x2169*x2173))+((x2171*x2180)));
evalcond[3]=((((-1.0)*r12*x2180))+(((-1.0)*sj4*x2174*x2179))+(((-1.0)*sj4*x2171*x2177))+((gconst23*sj4*x2178))+((r02*x2181))+((sj4*x2183)));
evalcond[4]=((-1.0)+((x2172*x2178))+((x2176*x2180))+(((-1.0)*x2169*x2172*x2174))+(((-1.0)*cj4*x2171*x2177))+(((-1.0)*x2173*x2177))+((x2169*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2186 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2186.valid){
continue;
}
IkReal x2184=((1.0)*(x2186.value));
IkReal x2185=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2184)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2184)));
IkReal gconst22=((1.0)*r21*x2185);
IkReal gconst23=((-1.0)*r20*x2185);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(cj4,-1);
if(!x2222.valid){
continue;
}
IkReal x2187=x2222.value;
IkReal x2188=((2000.0)*pz);
IkReal x2189=((6000.0)*pz);
IkReal x2190=((465.0)*cj4);
IkReal x2191=(r12*sj0);
IkReal x2192=((155.0)*gconst23);
IkReal x2193=(cj0*r02);
IkReal x2194=(cj0*sj4);
IkReal x2195=(gconst22*r01);
IkReal x2196=(cj4*r22);
IkReal x2197=(gconst22*r20);
IkReal x2198=(gconst22*sj4);
IkReal x2199=((155.0)*cj4);
IkReal x2200=((465.0)*gconst23);
IkReal x2201=(r11*sj0);
IkReal x2202=((685.0)*x2196);
IkReal x2203=((2055.0)*x2196);
IkReal x2204=(r10*sj0*sj4);
IkReal x2205=(r22*sj4*x2187);
IkReal x2206=(gconst23*r20*sj4);
IkReal x2207=((685.0)*x2206);
IkReal x2208=((152.0)*x2205);
IkReal x2209=((685.0)*r21*x2198);
IkReal x2210=((2055.0)*x2206);
IkReal x2211=((456.0)*x2205);
IkReal x2212=((2055.0)*r21*x2198);
IkReal x2213=((465.0)*x2198*x2201);
IkReal x2214=((465.0)*x2194*x2195);
IkReal x2215=(x2209+x2188);
IkReal x2216=(x2212+x2189);
IkReal x2217=(x2213+x2214);
IkReal x2218=(x2203+x2211+x2210);
IkReal x2219=(x2202+x2207+x2208);
IkReal x2220=(x2216+((r21*x2200))+(((465.0)*x2197)));
IkReal x2221=(x2218+((x2200*x2204))+((x2190*x2193))+((x2190*x2191))+((r00*x2194*x2200)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x2217+x2216+(((-1.0)*x2221)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2219+(((-1.0)*x2215))+(((-1.0)*r21*x2192))+(((-155.0)*x2197)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2218+(((-1.0)*x2220)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2217+x2216+(((-1.0)*x2221)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2218+(((-1.0)*x2220)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2215+(((-1.0)*x2219))+(((-1.0)*x2192*x2204))+(((-1.0)*x2193*x2199))+(((155.0)*x2194*x2195))+(((-1.0)*x2191*x2199))+(((155.0)*x2198*x2201))+(((-1.0)*r00*x2192*x2194))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2252=IKPowWithIntegerCheck(cj4,-1);
if(!x2252.valid){
continue;
}
IkReal x2223=x2252.value;
IkReal x2224=cj4*cj4;
IkReal x2225=((569.0)*cj4);
IkReal x2226=(cj4*pz);
IkReal x2227=(cj4*r20);
IkReal x2228=(gconst23*sj4);
IkReal x2229=(r22*sj4);
IkReal x2230=(cj4*r21);
IkReal x2231=(gconst22*sj4);
IkReal x2232=((0.002)*x2223);
IkReal x2233=((456.0)*x2229);
IkReal x2234=((6000.0)*x2226);
IkReal x2235=((152.0)*x2229);
IkReal x2236=((2000.0)*x2226);
IkReal x2237=(r22*x2224);
IkReal x2238=((2055.0)*x2237);
IkReal x2239=((465.0)*gconst22*x2227);
IkReal x2240=((465.0)*gconst23*x2230);
IkReal x2241=((685.0)*x2237);
IkReal x2242=((155.0)*gconst22*x2227);
IkReal x2243=((155.0)*gconst23*x2230);
IkReal x2244=((2055.0)*x2227*x2228);
IkReal x2245=((2055.0)*x2230*x2231);
IkReal x2246=((685.0)*x2227*x2228);
IkReal x2247=((685.0)*x2230*x2231);
IkReal x2248=(x2235+x2246+x2241);
IkReal x2249=(x2238+x2233+x2244);
IkReal x2250=(x2236+x2247+x2242+x2243);
IkReal x2251=(x2239+x2234+x2245+x2240);
op[0]=(x2232*((x2248+(((-1.0)*x2250))+(((-1.0)*x2225)))));
op[1]=-0.428;
op[2]=(x2232*((x2249+(((-1.0)*x2251))+(((-1.0)*x2225)))));
op[3]=-0.856;
op[4]=(x2232*((x2225+x2249+(((-1.0)*x2251)))));
op[5]=-0.428;
op[6]=(x2232*((x2225+x2248+(((-1.0)*x2250)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2253=cj4*cj4;
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(cj4,-1);
if(!x2296.valid){
continue;
}
IkReal x2254=x2296.value;
IkReal x2255=((569.0)*cj4);
IkReal x2256=((0.002)*x2254);
IkReal x2257=(r22*sj4);
IkReal x2258=(cj4*pz);
IkReal x2259=((6000.0)*x2258);
IkReal x2260=((456.0)*x2257);
IkReal x2261=((2000.0)*x2258);
IkReal x2262=((152.0)*x2257);
IkReal x2263=((155.0)*cj4*sj4);
IkReal x2264=(cj0*gconst23*r00);
IkReal x2265=(gconst22*r11*sj0);
IkReal x2266=(gconst23*r10*sj0);
IkReal x2267=((465.0)*cj4*sj4);
IkReal x2268=(r22*x2253);
IkReal x2269=(cj0*gconst22*r01);
IkReal x2270=((2055.0)*x2268);
IkReal x2271=((685.0)*x2268);
IkReal x2272=(cj0*r02*x2253);
IkReal x2273=(cj4*gconst22*r21*sj4);
IkReal x2274=(r12*sj0*x2253);
IkReal x2275=(cj4*gconst23*r20*sj4);
IkReal x2276=((2055.0)*x2273);
IkReal x2277=((2055.0)*x2275);
IkReal x2278=((465.0)*x2274);
IkReal x2279=((465.0)*x2272);
IkReal x2280=((685.0)*x2273);
IkReal x2281=((155.0)*x2272);
IkReal x2282=((155.0)*x2274);
IkReal x2283=((685.0)*x2275);
IkReal x2284=(x2265*x2267);
IkReal x2285=(x2267*x2269);
IkReal x2286=(x2264*x2267);
IkReal x2287=(x2266*x2267);
IkReal x2288=(x2263*x2269);
IkReal x2289=(x2263*x2265);
IkReal x2290=(x2263*x2266);
IkReal x2291=(x2263*x2264);
IkReal x2292=(x2288+x2289+x2280+x2261);
IkReal x2293=(x2284+x2285+x2276+x2259);
IkReal x2294=(x2286+x2287+x2260+x2277+x2270+x2279+x2278);
IkReal x2295=(x2281+x2282+x2283+x2291+x2290+x2262+x2271);
j1evalpoly[0]=(((x2256*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2292+x2255+(((-1.0)*x2295))))))+((x2256*((x2292+(((-1.0)*x2255))+(((-1.0)*x2295))))))+(((0.428)*htj1))+((x2256*(htj1*htj1)*((x2293+(((-1.0)*x2255))+(((-1.0)*x2294))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2256*(htj1*htj1*htj1*htj1)*((x2293+x2255+(((-1.0)*x2294)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2297=(gconst22*r20);
IkReal x2298=(cj1*gconst23);
IkReal x2299=((1.0)*sj4);
IkReal x2300=(cj4*r22);
IkReal x2301=(gconst22*r21);
IkReal x2302=(gconst23*sj1);
if( IKabs((((sj1*x2300))+((r20*sj4*x2302))+((r21*x2298))+(((-1.0)*sj1*x2299*x2301))+((cj1*x2297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2300))+((sj1*x2297))+(((-1.0)*r20*x2298*x2299))+((cj1*sj4*x2301))+((r21*x2302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2300))+((r20*sj4*x2302))+((r21*x2298))+(((-1.0)*sj1*x2299*x2301))+((cj1*x2297))))+IKsqr(((((-1.0)*cj1*x2300))+((sj1*x2297))+(((-1.0)*r20*x2298*x2299))+((cj1*sj4*x2301))+((r21*x2302))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2300))+((r20*sj4*x2302))+((r21*x2298))+(((-1.0)*sj1*x2299*x2301))+((cj1*x2297))), ((((-1.0)*cj1*x2300))+((sj1*x2297))+(((-1.0)*r20*x2298*x2299))+((cj1*sj4*x2301))+((r21*x2302))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2303=IKcos(j2);
IkReal x2304=IKsin(j2);
IkReal x2305=((1.0)*gconst22);
IkReal x2306=((1.0)*cj0);
IkReal x2307=((0.076)*gconst22);
IkReal x2308=(r11*sj0);
IkReal x2309=(cj0*r01);
IkReal x2310=(gconst22*sj4);
IkReal x2311=(gconst23*sj4);
IkReal x2312=(cj0*r00);
IkReal x2313=((1.0)*sj1);
IkReal x2314=(r10*sj0);
IkReal x2315=((0.3425)*sj1);
IkReal x2316=((0.076)*gconst23);
IkReal x2317=((1.0)*sj0);
IkReal x2318=(cj1*x2303);
IkReal x2319=(cj1*x2304);
IkReal x2320=(sj1*x2303);
IkReal x2321=(x2304*x2313);
evalcond[0]=((((-1.0)*r20*x2305))+(((-1.0)*gconst23*r21))+x2320+x2319);
evalcond[1]=(((cj4*r22))+x2318+(((-1.0)*r21*sj4*x2305))+((r20*x2311))+(((-1.0)*x2321)));
evalcond[2]=(((gconst22*x2312))+((gconst22*x2314))+x2318+((gconst23*x2309))+((gconst23*x2308))+(((-1.0)*x2321)));
CheckValue<IkReal> x2322=IKPowWithIntegerCheck(cj4,-1);
if(!x2322.valid){
continue;
}
evalcond[3]=((((0.3425)*x2318))+(((-1.0)*x2304*x2315))+(((0.0775)*x2319))+(((0.0535)*sj1))+(((0.0775)*x2320))+(((-0.2845)*cj1))+pz+(((-0.076)*r22*sj4*(x2322.value))));
evalcond[4]=((((-1.0)*x2319))+(((-1.0)*r00*x2306*x2311))+((x2308*x2310))+((x2309*x2310))+(((-1.0)*cj4*r02*x2306))+(((-1.0)*cj4*r12*x2317))+(((-1.0)*x2303*x2313))+(((-1.0)*x2311*x2314)));
evalcond[5]=(((x2312*x2316))+(((-1.0)*py*x2317))+(((-0.0775)*sj1*x2304))+(((0.0775)*x2318))+(((0.2845)*sj1))+((x2314*x2316))+(((0.0535)*cj1))+(((-1.0)*px*x2306))+(((-1.0)*x2303*x2315))+(((-0.3425)*x2319))+(((-1.0)*x2307*x2309))+(((-1.0)*x2307*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2323=(gconst22*sj4);
IkReal x2324=((1.0)*cj4);
IkReal x2325=((1.0)*gconst23*sj4);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal((((r11*x2323))+(((-1.0)*r10*x2325))+(((-1.0)*r12*x2324)))),IkReal(((((-1.0)*r00*x2325))+((r01*x2323))+(((-1.0)*r02*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2328=IKcos(j0);
IkReal x2329=IKsin(j0);
IkReal x2330=(gconst22*r01);
IkReal x2331=(cj4*gconst23);
IkReal x2332=(r02*sj4);
IkReal x2333=((1.0)*r10);
IkReal x2334=(r12*sj4);
IkReal x2335=(gconst22*r11);
IkReal x2336=((1.0)*x2329);
IkReal x2337=(r00*x2329);
IkReal x2338=(gconst23*x2328);
IkReal x2339=(cj4*x2328);
IkReal x2340=(cj4*x2329);
IkReal x2341=((1.0)*x2328);
IkReal x2342=(x2328*x2335);
evalcond[0]=((((-1.0)*gconst22*r00*x2336))+((gconst22*r10*x2328))+((r11*x2338))+(((-1.0)*gconst23*r01*x2336)));
evalcond[1]=((((-1.0)*py*x2341))+(((0.076)*x2329*x2330))+(((-0.076)*x2342))+(((-0.076)*gconst23*x2337))+((px*x2329))+(((0.076)*r10*x2338)));
evalcond[2]=(((x2335*x2340))+((x2329*x2334))+(((-1.0)*r00*x2331*x2341))+(((-1.0)*x2329*x2331*x2333))+((x2330*x2339))+((x2328*x2332)));
evalcond[3]=((((-1.0)*r12*x2339))+((sj4*x2342))+(((-1.0)*sj4*x2330*x2336))+((r02*x2340))+((gconst23*sj4*x2337))+(((-1.0)*sj4*x2333*x2338)));
evalcond[4]=((-1.0)+((x2331*x2337))+(((-1.0)*x2332*x2336))+((x2335*x2339))+(((-1.0)*cj4*x2330*x2336))+(((-1.0)*x2328*x2331*x2333))+((x2328*x2334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
IkReal x2343=((1.0)*(x2345.value));
IkReal x2344=x1991;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x2343)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x2343)));
IkReal gconst22=((1.0)*r21*x2344);
IkReal gconst23=((-1.0)*r20*x2344);
CheckValue<IkReal> x2381=IKPowWithIntegerCheck(cj4,-1);
if(!x2381.valid){
continue;
}
IkReal x2346=x2381.value;
IkReal x2347=((2000.0)*pz);
IkReal x2348=((6000.0)*pz);
IkReal x2349=((465.0)*cj4);
IkReal x2350=(r12*sj0);
IkReal x2351=((155.0)*gconst23);
IkReal x2352=(cj0*r02);
IkReal x2353=(cj0*sj4);
IkReal x2354=(gconst22*r01);
IkReal x2355=(cj4*r22);
IkReal x2356=(gconst22*r20);
IkReal x2357=(gconst22*sj4);
IkReal x2358=((155.0)*cj4);
IkReal x2359=((465.0)*gconst23);
IkReal x2360=(r11*sj0);
IkReal x2361=((685.0)*x2355);
IkReal x2362=((2055.0)*x2355);
IkReal x2363=(r10*sj0*sj4);
IkReal x2364=(r22*sj4*x2346);
IkReal x2365=(gconst23*r20*sj4);
IkReal x2366=((685.0)*x2365);
IkReal x2367=((152.0)*x2364);
IkReal x2368=((685.0)*r21*x2357);
IkReal x2369=((2055.0)*x2365);
IkReal x2370=((456.0)*x2364);
IkReal x2371=((2055.0)*r21*x2357);
IkReal x2372=((465.0)*x2357*x2360);
IkReal x2373=((465.0)*x2353*x2354);
IkReal x2374=(x2368+x2347);
IkReal x2375=(x2371+x2348);
IkReal x2376=(x2372+x2373);
IkReal x2377=(x2370+x2369+x2362);
IkReal x2378=(x2367+x2366+x2361);
IkReal x2379=(x2375+(((465.0)*x2356))+((r21*x2359)));
IkReal x2380=(x2377+((x2359*x2363))+((r00*x2353*x2359))+((x2349*x2352))+((x2349*x2350)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x2378+(((-1.0)*r21*x2351))+(((-1.0)*x2374))+(((-155.0)*x2356)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2375+x2376+(((-1.0)*x2380)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x2377+(((-1.0)*x2379)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2377+(((-1.0)*x2379)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*r00*x2351*x2353))+x2374+(((155.0)*x2357*x2360))+(((-1.0)*x2378))+(((-1.0)*x2352*x2358))+(((155.0)*x2353*x2354))+(((-1.0)*x2351*x2363))+(((-1.0)*x2350*x2358)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x2375+x2376+(((-1.0)*x2380))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(cj4,-1);
if(!x2411.valid){
continue;
}
IkReal x2382=x2411.value;
IkReal x2383=cj4*cj4;
IkReal x2384=((569.0)*cj4);
IkReal x2385=(cj4*pz);
IkReal x2386=(cj4*r20);
IkReal x2387=(gconst23*sj4);
IkReal x2388=(r22*sj4);
IkReal x2389=(cj4*r21);
IkReal x2390=(gconst22*sj4);
IkReal x2391=((0.002)*x2382);
IkReal x2392=((456.0)*x2388);
IkReal x2393=((6000.0)*x2385);
IkReal x2394=((152.0)*x2388);
IkReal x2395=((2000.0)*x2385);
IkReal x2396=(r22*x2383);
IkReal x2397=((2055.0)*x2396);
IkReal x2398=((465.0)*gconst22*x2386);
IkReal x2399=((465.0)*gconst23*x2389);
IkReal x2400=((685.0)*x2396);
IkReal x2401=((155.0)*gconst22*x2386);
IkReal x2402=((155.0)*gconst23*x2389);
IkReal x2403=((2055.0)*x2386*x2387);
IkReal x2404=((2055.0)*x2389*x2390);
IkReal x2405=((685.0)*x2386*x2387);
IkReal x2406=((685.0)*x2389*x2390);
IkReal x2407=(x2405+x2400+x2394);
IkReal x2408=(x2403+x2397+x2392);
IkReal x2409=(x2406+x2402+x2401+x2395);
IkReal x2410=(x2404+x2393+x2398+x2399);
op[0]=(x2391*((x2407+(((-1.0)*x2409))+(((-1.0)*x2384)))));
op[1]=-0.428;
op[2]=(x2391*((x2408+(((-1.0)*x2384))+(((-1.0)*x2410)))));
op[3]=-0.856;
op[4]=(x2391*((x2408+x2384+(((-1.0)*x2410)))));
op[5]=-0.428;
op[6]=(x2391*((x2407+(((-1.0)*x2409))+x2384)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2412=cj4*cj4;
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(cj4,-1);
if(!x2455.valid){
continue;
}
IkReal x2413=x2455.value;
IkReal x2414=((569.0)*cj4);
IkReal x2415=((0.002)*x2413);
IkReal x2416=(r22*sj4);
IkReal x2417=(cj4*pz);
IkReal x2418=((6000.0)*x2417);
IkReal x2419=((456.0)*x2416);
IkReal x2420=((2000.0)*x2417);
IkReal x2421=((152.0)*x2416);
IkReal x2422=((155.0)*cj4*sj4);
IkReal x2423=(cj0*gconst23*r00);
IkReal x2424=(gconst22*r11*sj0);
IkReal x2425=(gconst23*r10*sj0);
IkReal x2426=((465.0)*cj4*sj4);
IkReal x2427=(r22*x2412);
IkReal x2428=(cj0*gconst22*r01);
IkReal x2429=((2055.0)*x2427);
IkReal x2430=((685.0)*x2427);
IkReal x2431=(cj0*r02*x2412);
IkReal x2432=(cj4*gconst22*r21*sj4);
IkReal x2433=(r12*sj0*x2412);
IkReal x2434=(cj4*gconst23*r20*sj4);
IkReal x2435=((2055.0)*x2432);
IkReal x2436=((2055.0)*x2434);
IkReal x2437=((465.0)*x2433);
IkReal x2438=((465.0)*x2431);
IkReal x2439=((685.0)*x2432);
IkReal x2440=((155.0)*x2431);
IkReal x2441=((155.0)*x2433);
IkReal x2442=((685.0)*x2434);
IkReal x2443=(x2424*x2426);
IkReal x2444=(x2426*x2428);
IkReal x2445=(x2423*x2426);
IkReal x2446=(x2425*x2426);
IkReal x2447=(x2422*x2428);
IkReal x2448=(x2422*x2424);
IkReal x2449=(x2422*x2425);
IkReal x2450=(x2422*x2423);
IkReal x2451=(x2439+x2447+x2448+x2420);
IkReal x2452=(x2435+x2418+x2443+x2444);
IkReal x2453=(x2438+x2437+x2436+x2419+x2446+x2445+x2429);
IkReal x2454=(x2430+x2442+x2440+x2441+x2449+x2450+x2421);
j1evalpoly[0]=((((0.428)*htj1))+((x2415*((x2451+(((-1.0)*x2414))+(((-1.0)*x2454))))))+((x2415*(htj1*htj1*htj1*htj1*htj1*htj1)*((x2414+x2451+(((-1.0)*x2454))))))+(((0.856)*(htj1*htj1*htj1)))+((x2415*(htj1*htj1*htj1*htj1)*((x2414+x2452+(((-1.0)*x2453))))))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x2415*(htj1*htj1)*((x2452+(((-1.0)*x2414))+(((-1.0)*x2453)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2456=(gconst22*r20);
IkReal x2457=(cj1*gconst23);
IkReal x2458=((1.0)*sj4);
IkReal x2459=(cj4*r22);
IkReal x2460=(gconst22*r21);
IkReal x2461=(gconst23*sj1);
if( IKabs((((cj1*x2456))+(((-1.0)*sj1*x2458*x2460))+((sj1*x2459))+((r20*sj4*x2461))+((r21*x2457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2457*x2458))+((sj1*x2456))+((r21*x2461))+((cj1*sj4*x2460))+(((-1.0)*cj1*x2459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2456))+(((-1.0)*sj1*x2458*x2460))+((sj1*x2459))+((r20*sj4*x2461))+((r21*x2457))))+IKsqr(((((-1.0)*r20*x2457*x2458))+((sj1*x2456))+((r21*x2461))+((cj1*sj4*x2460))+(((-1.0)*cj1*x2459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2456))+(((-1.0)*sj1*x2458*x2460))+((sj1*x2459))+((r20*sj4*x2461))+((r21*x2457))), ((((-1.0)*r20*x2457*x2458))+((sj1*x2456))+((r21*x2461))+((cj1*sj4*x2460))+(((-1.0)*cj1*x2459))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2462=IKcos(j2);
IkReal x2463=IKsin(j2);
IkReal x2464=((1.0)*gconst22);
IkReal x2465=((1.0)*cj0);
IkReal x2466=((0.076)*gconst22);
IkReal x2467=(r11*sj0);
IkReal x2468=(cj0*r01);
IkReal x2469=(gconst22*sj4);
IkReal x2470=(gconst23*sj4);
IkReal x2471=(cj0*r00);
IkReal x2472=((1.0)*sj1);
IkReal x2473=(r10*sj0);
IkReal x2474=((0.3425)*sj1);
IkReal x2475=((0.076)*gconst23);
IkReal x2476=((1.0)*sj0);
IkReal x2477=(cj1*x2462);
IkReal x2478=(cj1*x2463);
IkReal x2479=(sj1*x2462);
IkReal x2480=(x2463*x2472);
evalcond[0]=(x2479+x2478+(((-1.0)*gconst23*r21))+(((-1.0)*r20*x2464)));
evalcond[1]=(x2477+((cj4*r22))+(((-1.0)*r21*sj4*x2464))+(((-1.0)*x2480))+((r20*x2470)));
evalcond[2]=(((gconst23*x2468))+((gconst23*x2467))+x2477+((gconst22*x2471))+((gconst22*x2473))+(((-1.0)*x2480)));
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(cj4,-1);
if(!x2481.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x2463*x2474))+pz+(((0.3425)*x2477))+(((0.0775)*x2479))+(((0.0775)*x2478))+(((-0.076)*r22*sj4*(x2481.value))));
evalcond[4]=(((x2467*x2469))+(((-1.0)*x2470*x2473))+(((-1.0)*x2478))+(((-1.0)*cj4*r12*x2476))+((x2468*x2469))+(((-1.0)*cj4*r02*x2465))+(((-1.0)*x2462*x2472))+(((-1.0)*r00*x2465*x2470)));
evalcond[5]=(((x2471*x2475))+(((-0.0775)*sj1*x2463))+(((-1.0)*x2466*x2468))+(((-1.0)*x2466*x2467))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.3425)*x2478))+(((0.0775)*x2477))+(((-1.0)*x2462*x2474))+((x2473*x2475))+(((-1.0)*px*x2465))+(((-1.0)*py*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2482=((0.076)*sj5);
IkReal x2483=((0.076)*cj5);
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x2482))+(((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5))+(((-1.0)*r21*sj4*x2483))+((rxp2_2*sj4)))),-1);
if(!x2484.valid){
continue;
}
CheckValue<IkReal> x2485 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x2482))+((r10*x2483)))),IkReal(((((-1.0)*r01*x2482))+(((-1.0)*px))+((r00*x2483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2485.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2484.value)))+(x2485.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2486=IKcos(j0);
IkReal x2487=IKsin(j0);
IkReal x2488=((1.0)*r01);
IkReal x2489=(r11*sj5);
IkReal x2490=(cj4*r00);
IkReal x2491=((1.0)*r10);
IkReal x2492=(r01*sj5);
IkReal x2493=(cj5*x2487);
IkReal x2494=(sj4*x2486);
IkReal x2495=(sj4*x2487);
IkReal x2496=(cj5*x2486);
IkReal x2497=(cj4*x2487);
IkReal x2498=(cj4*x2486);
evalcond[0]=(((r11*x2496))+(((-1.0)*r00*sj5*x2487))+(((-1.0)*x2488*x2493))+((r10*sj5*x2486)));
evalcond[1]=((((-0.076)*x2486*x2489))+((px*x2487))+(((-1.0)*py*x2486))+(((-0.076)*r00*x2493))+(((0.076)*x2487*x2492))+(((0.076)*r10*x2496)));
evalcond[2]=(((x2492*x2498))+((r02*x2494))+(((-1.0)*cj4*x2491*x2493))+((r12*x2495))+(((-1.0)*x2490*x2496))+((x2489*x2497)));
evalcond[3]=((((-1.0)*r12*x2498))+((r02*x2497))+(((-1.0)*sj5*x2488*x2495))+(((-1.0)*cj5*x2491*x2494))+((r00*sj4*x2493))+((x2489*x2494)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2495))+(((-1.0)*sj5*x2488*x2497))+((x2490*x2493))+(((-1.0)*cj4*x2491*x2496))+((r12*x2494))+((x2489*x2498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(cj4,-1);
if(!x2531.valid){
continue;
}
IkReal x2499=x2531.value;
IkReal x2500=(cj5*r21);
IkReal x2501=((0.304)*sj0);
IkReal x2502=(cj5*r10);
IkReal x2503=(r11*sj5);
IkReal x2504=(cj0*px);
IkReal x2505=(r20*sj5);
IkReal x2506=(py*sj0);
IkReal x2507=(cj4*r22);
IkReal x2508=((0.912)*sj0);
IkReal x2509=((0.912)*cj0);
IkReal x2510=(r01*sj5);
IkReal x2511=(cj5*r00);
IkReal x2512=((0.304)*cj0);
IkReal x2513=((0.93)*x2507);
IkReal x2514=((4.11)*x2505);
IkReal x2515=((4.11)*x2500);
IkReal x2516=((12.0)*x2504);
IkReal x2517=((12.0)*x2506);
IkReal x2518=((2055.0)*x2507);
IkReal x2519=(r21*sj4*sj5);
IkReal x2520=(cj5*r20*sj4);
IkReal x2521=(r22*sj4*x2499);
IkReal x2522=((0.93)*x2520);
IkReal x2523=(x2509*x2510);
IkReal x2524=(x2503*x2508);
IkReal x2525=((2055.0)*x2520);
IkReal x2526=((456.0)*x2521);
IkReal x2527=(x2525+x2526+x2518);
IkReal x2528=((((0.93)*x2519))+((x2509*x2511))+((x2502*x2508)));
IkReal x2529=((((2055.0)*x2519))+(((465.0)*x2500))+(((465.0)*x2505))+(((6000.0)*pz)));
IkReal x2530=(x2524+x2523+x2522+x2514+x2515+x2516+x2517+x2513);
j1eval[0]=((10.816)+(IKabs(((0.214)+(((1.37)*x2500))+(((1.37)*x2505))+(((0.31)*x2507))+((x2501*x2503))+((x2510*x2512))+(((-1.0)*x2501*x2502))+(((-0.31)*x2519))+(((0.31)*x2520))+(((-1.0)*x2511*x2512))+(((4.0)*x2504))+(((4.0)*x2506)))))+(((0.002)*(IKabs(((-569.0)+(((-685.0)*x2519))+(((685.0)*x2520))+(((-155.0)*x2505))+(((-155.0)*x2500))+(((152.0)*x2521))+(((-2000.0)*pz))+(((685.0)*x2507)))))))+(IKabs(((-0.214)+x2530+(((-1.0)*x2528)))))+(((0.002)*(IKabs(((569.0)+x2527+(((-1.0)*x2529)))))))+(((0.002)*(IKabs(((-569.0)+x2527+(((-1.0)*x2529)))))))+(IKabs(((0.214)+x2530+(((-1.0)*x2528))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(cj4,-1);
if(!x2562.valid){
continue;
}
IkReal x2532=x2562.value;
IkReal x2533=cj4*cj4;
IkReal x2534=((569.0)*cj4);
IkReal x2535=(cj4*cj5);
IkReal x2536=((0.002)*x2532);
IkReal x2537=(cj4*pz);
IkReal x2538=((685.0)*sj4);
IkReal x2539=(r22*sj4);
IkReal x2540=((2055.0)*sj4);
IkReal x2541=((456.0)*x2539);
IkReal x2542=((6000.0)*x2537);
IkReal x2543=((152.0)*x2539);
IkReal x2544=((2000.0)*x2537);
IkReal x2545=(cj4*r21*sj5);
IkReal x2546=(r22*x2533);
IkReal x2547=(cj4*r20*sj5);
IkReal x2548=((2055.0)*x2546);
IkReal x2549=((465.0)*x2547);
IkReal x2550=((465.0)*r21*x2535);
IkReal x2551=((685.0)*x2546);
IkReal x2552=((155.0)*x2547);
IkReal x2553=((155.0)*r21*x2535);
IkReal x2554=(r20*x2535*x2540);
IkReal x2555=(x2540*x2545);
IkReal x2556=(r20*x2535*x2538);
IkReal x2557=(x2538*x2545);
IkReal x2558=(x2551+x2556+x2543);
IkReal x2559=(x2554+x2541+x2548);
IkReal x2560=(x2550+x2555+x2542+x2549);
IkReal x2561=(x2552+x2553+x2557+x2544);
op[0]=(x2536*((x2558+(((-1.0)*x2534))+(((-1.0)*x2561)))));
op[1]=-0.428;
op[2]=(x2536*((x2559+(((-1.0)*x2534))+(((-1.0)*x2560)))));
op[3]=-0.856;
op[4]=(x2536*((x2559+x2534+(((-1.0)*x2560)))));
op[5]=-0.428;
op[6]=(x2536*((x2558+x2534+(((-1.0)*x2561)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2563=((0.304)*sj0);
IkReal x2564=(cj5*r10);
IkReal x2565=(r11*sj5);
IkReal x2566=(cj0*px);
IkReal x2567=(cj5*r21);
IkReal x2568=(py*sj0);
IkReal x2569=(r20*sj5);
IkReal x2570=(cj4*r22);
IkReal x2571=((0.912)*sj0);
IkReal x2572=((0.912)*cj0);
IkReal x2573=(r01*sj5);
IkReal x2574=(cj5*r00);
IkReal x2575=((0.304)*cj0);
IkReal x2576=((4.0)*x2566);
IkReal x2577=((1.37)*x2567);
IkReal x2578=((1.37)*x2569);
IkReal x2579=((4.0)*x2568);
IkReal x2580=((0.31)*x2570);
IkReal x2581=((0.93)*x2570);
IkReal x2582=((4.11)*x2569);
IkReal x2583=((4.11)*x2567);
IkReal x2584=((12.0)*x2566);
IkReal x2585=((12.0)*x2568);
IkReal x2586=(r21*sj4*sj5);
IkReal x2587=(cj5*r20*sj4);
IkReal x2588=(x2573*x2575);
IkReal x2589=((0.31)*x2587);
IkReal x2590=((0.93)*x2587);
IkReal x2591=(x2572*x2573);
IkReal x2592=(x2565*x2571);
IkReal x2593=(x2563*x2565);
IkReal x2594=(x2563*x2564);
IkReal x2595=(x2574*x2575);
IkReal x2596=((0.31)*x2586);
IkReal x2597=(((x2564*x2571))+((x2572*x2574))+(((0.93)*x2586)));
IkReal x2598=(x2594+x2595+x2596);
IkReal x2599=(x2593+x2580+x2589+x2588+x2578+x2579+x2576+x2577);
IkReal x2600=(x2590+x2591+x2592+x2585+x2584+x2583+x2582+x2581);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+x2599+(((htj1*htj1*htj1*htj1)*(((0.214)+(((-1.0)*x2597))+x2600))))+(((htj1*htj1)*(((-0.214)+(((-1.0)*x2597))+x2600))))+(((-1.0)*x2598))+(((-2.276)*htj1))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x2599+(((-1.0)*x2598))))))+(((-4.552)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2601=(cj4*r22);
IkReal x2602=((1.0)*cj1);
IkReal x2603=(r20*sj1);
IkReal x2604=(cj5*sj4);
IkReal x2605=(cj5*r21);
IkReal x2606=(r21*sj4*sj5);
if( IKabs((((x2603*x2604))+((cj1*r20*sj5))+(((-1.0)*sj1*x2606))+((cj1*x2605))+((sj1*x2601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2601*x2602))+(((-1.0)*r20*x2602*x2604))+((cj1*x2606))+((sj1*x2605))+((sj5*x2603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2603*x2604))+((cj1*r20*sj5))+(((-1.0)*sj1*x2606))+((cj1*x2605))+((sj1*x2601))))+IKsqr(((((-1.0)*x2601*x2602))+(((-1.0)*r20*x2602*x2604))+((cj1*x2606))+((sj1*x2605))+((sj5*x2603))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2603*x2604))+((cj1*r20*sj5))+(((-1.0)*sj1*x2606))+((cj1*x2605))+((sj1*x2601))), ((((-1.0)*x2601*x2602))+(((-1.0)*r20*x2602*x2604))+((cj1*x2606))+((sj1*x2605))+((sj5*x2603))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2607=IKcos(j2);
IkReal x2608=IKsin(j2);
IkReal x2609=(r10*sj0);
IkReal x2610=((0.076)*cj5);
IkReal x2611=(cj0*r00);
IkReal x2612=((0.076)*sj5);
IkReal x2613=(r11*sj0);
IkReal x2614=((1.0)*sj5);
IkReal x2615=((1.0)*cj0);
IkReal x2616=(cj0*r01);
IkReal x2617=((1.0)*sj1);
IkReal x2618=((0.3425)*sj1);
IkReal x2619=(sj4*sj5);
IkReal x2620=((1.0)*sj0);
IkReal x2621=(cj1*x2607);
IkReal x2622=((1.0)*cj5*sj4);
IkReal x2623=(cj1*x2608);
IkReal x2624=(sj1*x2607);
IkReal x2625=(x2608*x2617);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2614))+x2623+x2624);
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x2614))+(((-1.0)*x2625))+x2621);
evalcond[2]=(((cj5*x2616))+((cj5*x2613))+((sj5*x2611))+(((-1.0)*x2625))+((sj5*x2609))+x2621);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(cj4,-1);
if(!x2626.valid){
continue;
}
evalcond[3]=((((-1.0)*x2608*x2618))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x2623))+(((0.0775)*x2624))+(((0.3425)*x2621))+(((-0.076)*r22*sj4*(x2626.value))));
evalcond[4]=(((x2613*x2619))+(((-1.0)*x2611*x2622))+(((-1.0)*x2607*x2617))+(((-1.0)*x2623))+(((-1.0)*cj4*r02*x2615))+(((-1.0)*cj4*r12*x2620))+((x2616*x2619))+(((-1.0)*x2609*x2622)));
evalcond[5]=(((x2610*x2611))+(((-1.0)*x2607*x2618))+(((0.2845)*sj1))+(((-1.0)*x2612*x2616))+(((-1.0)*x2612*x2613))+(((0.0535)*cj1))+(((-1.0)*py*x2620))+(((0.0775)*x2621))+(((-0.3425)*x2623))+((x2609*x2610))+(((-1.0)*px*x2615))+(((-0.0775)*sj1*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2627=(sj4*sj5);
IkReal x2628=((1.0)*cj4);
IkReal x2629=((1.0)*cj5*sj4);
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2630.valid){
continue;
}
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2628))+(((-1.0)*r10*x2629))+((r11*x2627)))),IkReal((((r01*x2627))+(((-1.0)*r00*x2629))+(((-1.0)*r02*x2628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2630.value)))+(x2631.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2632=IKcos(j0);
IkReal x2633=IKsin(j0);
IkReal x2634=((1.0)*r01);
IkReal x2635=(r11*sj5);
IkReal x2636=(cj4*r00);
IkReal x2637=((1.0)*r10);
IkReal x2638=(r01*sj5);
IkReal x2639=(cj5*x2633);
IkReal x2640=(sj4*x2632);
IkReal x2641=(sj4*x2633);
IkReal x2642=(cj5*x2632);
IkReal x2643=(cj4*x2633);
IkReal x2644=(cj4*x2632);
evalcond[0]=(((r11*x2642))+(((-1.0)*r00*sj5*x2633))+(((-1.0)*x2634*x2639))+((r10*sj5*x2632)));
evalcond[1]=((((0.076)*r10*x2642))+(((-0.076)*x2632*x2635))+(((0.076)*x2633*x2638))+(((-0.076)*r00*x2639))+((px*x2633))+(((-1.0)*py*x2632)));
evalcond[2]=(((r12*x2641))+(((-1.0)*cj4*x2637*x2639))+((x2638*x2644))+(((-1.0)*x2636*x2642))+((r02*x2640))+((x2635*x2643)));
evalcond[3]=(((r02*x2643))+(((-1.0)*cj5*x2637*x2640))+((x2635*x2640))+((r00*sj4*x2639))+(((-1.0)*r12*x2644))+(((-1.0)*sj5*x2634*x2641)));
evalcond[4]=((-1.0)+((r12*x2640))+((x2635*x2644))+(((-1.0)*r02*x2641))+(((-1.0)*cj4*x2637*x2642))+((x2636*x2639))+(((-1.0)*sj5*x2634*x2643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2677=IKPowWithIntegerCheck(cj4,-1);
if(!x2677.valid){
continue;
}
IkReal x2645=x2677.value;
IkReal x2646=(cj5*r21);
IkReal x2647=((0.304)*sj0);
IkReal x2648=(cj5*r10);
IkReal x2649=(r11*sj5);
IkReal x2650=(cj0*px);
IkReal x2651=(r20*sj5);
IkReal x2652=(py*sj0);
IkReal x2653=(cj4*r22);
IkReal x2654=((0.912)*sj0);
IkReal x2655=((0.912)*cj0);
IkReal x2656=(r01*sj5);
IkReal x2657=(cj5*r00);
IkReal x2658=((0.304)*cj0);
IkReal x2659=((0.93)*x2653);
IkReal x2660=((4.11)*x2651);
IkReal x2661=((4.11)*x2646);
IkReal x2662=((12.0)*x2650);
IkReal x2663=((12.0)*x2652);
IkReal x2664=((2055.0)*x2653);
IkReal x2665=(r21*sj4*sj5);
IkReal x2666=(cj5*r20*sj4);
IkReal x2667=(r22*sj4*x2645);
IkReal x2668=((0.93)*x2666);
IkReal x2669=(x2655*x2656);
IkReal x2670=(x2649*x2654);
IkReal x2671=((2055.0)*x2666);
IkReal x2672=((456.0)*x2667);
IkReal x2673=(x2664+x2671+x2672);
IkReal x2674=((((0.93)*x2665))+((x2655*x2657))+((x2648*x2654)));
IkReal x2675=((((2055.0)*x2665))+(((465.0)*x2651))+(((465.0)*x2646))+(((6000.0)*pz)));
IkReal x2676=(x2659+x2662+x2663+x2660+x2661+x2668+x2669+x2670);
j1eval[0]=((10.816)+(((0.002)*(IKabs(((569.0)+(((-1.0)*x2675))+x2673)))))+(IKabs(((0.214)+(((-1.0)*x2674))+x2676)))+(IKabs(((-0.214)+(((-1.0)*x2674))+x2676)))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x2675))+x2673)))))+(((0.002)*(IKabs(((-569.0)+(((685.0)*x2653))+(((-155.0)*x2646))+(((-155.0)*x2651))+(((152.0)*x2667))+(((685.0)*x2666))+(((-2000.0)*pz))+(((-685.0)*x2665)))))))+(IKabs(((0.214)+(((0.31)*x2666))+(((1.37)*x2651))+(((1.37)*x2646))+(((-0.31)*x2665))+(((-1.0)*x2647*x2648))+((x2656*x2658))+(((4.0)*x2650))+(((4.0)*x2652))+(((-1.0)*x2657*x2658))+((x2647*x2649))+(((0.31)*x2653))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2708=IKPowWithIntegerCheck(cj4,-1);
if(!x2708.valid){
continue;
}
IkReal x2678=x2708.value;
IkReal x2679=cj4*cj4;
IkReal x2680=((569.0)*cj4);
IkReal x2681=(cj4*cj5);
IkReal x2682=((0.002)*x2678);
IkReal x2683=(cj4*pz);
IkReal x2684=((685.0)*sj4);
IkReal x2685=(r22*sj4);
IkReal x2686=((2055.0)*sj4);
IkReal x2687=((456.0)*x2685);
IkReal x2688=((6000.0)*x2683);
IkReal x2689=((152.0)*x2685);
IkReal x2690=((2000.0)*x2683);
IkReal x2691=(cj4*r21*sj5);
IkReal x2692=(r22*x2679);
IkReal x2693=(cj4*r20*sj5);
IkReal x2694=((2055.0)*x2692);
IkReal x2695=((465.0)*x2693);
IkReal x2696=((465.0)*r21*x2681);
IkReal x2697=((685.0)*x2692);
IkReal x2698=((155.0)*x2693);
IkReal x2699=((155.0)*r21*x2681);
IkReal x2700=(r20*x2681*x2686);
IkReal x2701=(x2686*x2691);
IkReal x2702=(r20*x2681*x2684);
IkReal x2703=(x2684*x2691);
IkReal x2704=(x2702+x2689+x2697);
IkReal x2705=(x2700+x2687+x2694);
IkReal x2706=(x2701+x2688+x2696+x2695);
IkReal x2707=(x2703+x2699+x2698+x2690);
op[0]=(x2682*((x2704+(((-1.0)*x2680))+(((-1.0)*x2707)))));
op[1]=-0.428;
op[2]=(x2682*((x2705+(((-1.0)*x2680))+(((-1.0)*x2706)))));
op[3]=-0.856;
op[4]=(x2682*((x2705+(((-1.0)*x2706))+x2680)));
op[5]=-0.428;
op[6]=(x2682*((x2704+(((-1.0)*x2707))+x2680)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2709=((0.304)*sj0);
IkReal x2710=(cj5*r10);
IkReal x2711=(r11*sj5);
IkReal x2712=(cj0*px);
IkReal x2713=(cj5*r21);
IkReal x2714=(py*sj0);
IkReal x2715=(r20*sj5);
IkReal x2716=(cj4*r22);
IkReal x2717=((0.912)*sj0);
IkReal x2718=((0.912)*cj0);
IkReal x2719=(r01*sj5);
IkReal x2720=(cj5*r00);
IkReal x2721=((0.304)*cj0);
IkReal x2722=((4.0)*x2712);
IkReal x2723=((1.37)*x2713);
IkReal x2724=((1.37)*x2715);
IkReal x2725=((4.0)*x2714);
IkReal x2726=((0.31)*x2716);
IkReal x2727=((0.93)*x2716);
IkReal x2728=((4.11)*x2715);
IkReal x2729=((4.11)*x2713);
IkReal x2730=((12.0)*x2712);
IkReal x2731=((12.0)*x2714);
IkReal x2732=(r21*sj4*sj5);
IkReal x2733=(cj5*r20*sj4);
IkReal x2734=(x2719*x2721);
IkReal x2735=((0.31)*x2733);
IkReal x2736=((0.93)*x2733);
IkReal x2737=(x2718*x2719);
IkReal x2738=(x2711*x2717);
IkReal x2739=(x2709*x2711);
IkReal x2740=(x2709*x2710);
IkReal x2741=(x2720*x2721);
IkReal x2742=((0.31)*x2732);
IkReal x2743=(((x2710*x2717))+(((0.93)*x2732))+((x2718*x2720)));
IkReal x2744=(x2741+x2740+x2742);
IkReal x2745=(x2734+x2735+x2739+x2726+x2725+x2724+x2723+x2722);
IkReal x2746=(x2736+x2737+x2730+x2731+x2738+x2727+x2729+x2728);
j1evalpoly[0]=((-0.214)+x2745+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((0.214)+x2746+(((-1.0)*x2743))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+x2745+(((-1.0)*x2744))))))+(((-2.276)*htj1))+(((-1.0)*x2744))+(((-4.552)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.214)+x2746+(((-1.0)*x2743)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2747=(cj4*r22);
IkReal x2748=((1.0)*cj1);
IkReal x2749=(r20*sj1);
IkReal x2750=(cj5*sj4);
IkReal x2751=(cj5*r21);
IkReal x2752=(r21*sj4*sj5);
if( IKabs((((x2749*x2750))+((cj1*r20*sj5))+(((-1.0)*sj1*x2752))+((sj1*x2747))+((cj1*x2751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2747*x2748))+((sj5*x2749))+((sj1*x2751))+(((-1.0)*r20*x2748*x2750))+((cj1*x2752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2749*x2750))+((cj1*r20*sj5))+(((-1.0)*sj1*x2752))+((sj1*x2747))+((cj1*x2751))))+IKsqr(((((-1.0)*x2747*x2748))+((sj5*x2749))+((sj1*x2751))+(((-1.0)*r20*x2748*x2750))+((cj1*x2752))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2749*x2750))+((cj1*r20*sj5))+(((-1.0)*sj1*x2752))+((sj1*x2747))+((cj1*x2751))), ((((-1.0)*x2747*x2748))+((sj5*x2749))+((sj1*x2751))+(((-1.0)*r20*x2748*x2750))+((cj1*x2752))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2753=IKcos(j2);
IkReal x2754=IKsin(j2);
IkReal x2755=(r10*sj0);
IkReal x2756=((0.076)*cj5);
IkReal x2757=(cj0*r00);
IkReal x2758=((0.076)*sj5);
IkReal x2759=(r11*sj0);
IkReal x2760=((1.0)*sj5);
IkReal x2761=((1.0)*cj0);
IkReal x2762=(cj0*r01);
IkReal x2763=((1.0)*sj1);
IkReal x2764=((0.3425)*sj1);
IkReal x2765=(sj4*sj5);
IkReal x2766=((1.0)*sj0);
IkReal x2767=(cj1*x2753);
IkReal x2768=((1.0)*cj5*sj4);
IkReal x2769=(cj1*x2754);
IkReal x2770=(sj1*x2753);
IkReal x2771=(x2754*x2763);
evalcond[0]=(x2770+x2769+(((-1.0)*r20*x2760))+(((-1.0)*cj5*r21)));
evalcond[1]=(x2767+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x2760))+(((-1.0)*x2771)));
evalcond[2]=(x2767+((cj5*x2762))+((sj5*x2757))+((sj5*x2755))+(((-1.0)*x2771))+((cj5*x2759)));
CheckValue<IkReal> x2772=IKPowWithIntegerCheck(cj4,-1);
if(!x2772.valid){
continue;
}
evalcond[3]=((((0.0775)*x2770))+(((0.0535)*sj1))+(((0.3425)*x2767))+(((-0.2845)*cj1))+(((0.0775)*x2769))+pz+(((-1.0)*x2754*x2764))+(((-0.076)*r22*sj4*(x2772.value))));
evalcond[4]=((((-1.0)*x2755*x2768))+(((-1.0)*x2769))+((x2759*x2765))+(((-1.0)*cj4*r02*x2761))+((x2762*x2765))+(((-1.0)*cj4*r12*x2766))+(((-1.0)*x2757*x2768))+(((-1.0)*x2753*x2763)));
evalcond[5]=((((-1.0)*py*x2766))+(((0.2845)*sj1))+((x2756*x2757))+(((-1.0)*x2758*x2762))+(((0.0775)*x2767))+(((0.0535)*cj1))+(((-1.0)*px*x2761))+((x2755*x2756))+(((-1.0)*x2753*x2764))+(((-0.3425)*x2769))+(((-1.0)*x2758*x2759))+(((-0.0775)*sj1*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2773 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*sj5)))),-1);
if(!x2774.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2773.value)+(((1.5707963267949)*(x2774.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2775=IKcos(j0);
IkReal x2776=IKsin(j0);
IkReal x2777=((1.0)*r01);
IkReal x2778=(r11*sj5);
IkReal x2779=(cj4*r00);
IkReal x2780=((1.0)*r10);
IkReal x2781=(r01*sj5);
IkReal x2782=(cj5*x2776);
IkReal x2783=(sj4*x2775);
IkReal x2784=(sj4*x2776);
IkReal x2785=(cj5*x2775);
IkReal x2786=(cj4*x2776);
IkReal x2787=(cj4*x2775);
evalcond[0]=(((r10*sj5*x2775))+(((-1.0)*r00*sj5*x2776))+((r11*x2785))+(((-1.0)*x2777*x2782)));
evalcond[1]=((((0.076)*r10*x2785))+(((-0.076)*r00*x2782))+(((-0.076)*x2775*x2778))+((px*x2776))+(((0.076)*x2776*x2781))+(((-1.0)*py*x2775)));
evalcond[2]=(((x2778*x2786))+((x2781*x2787))+(((-1.0)*x2779*x2785))+(((-1.0)*cj4*x2780*x2782))+((r02*x2783))+((r12*x2784)));
evalcond[3]=(((x2778*x2783))+((r02*x2786))+((r00*sj4*x2782))+(((-1.0)*r12*x2787))+(((-1.0)*cj5*x2780*x2783))+(((-1.0)*sj5*x2777*x2784)));
evalcond[4]=((-1.0)+((x2779*x2782))+((x2778*x2787))+(((-1.0)*cj4*x2780*x2785))+((r12*x2783))+(((-1.0)*r02*x2784))+(((-1.0)*sj5*x2777*x2786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(cj4,-1);
if(!x2820.valid){
continue;
}
IkReal x2788=x2820.value;
IkReal x2789=(cj5*r21);
IkReal x2790=((0.304)*sj0);
IkReal x2791=(cj5*r10);
IkReal x2792=(r11*sj5);
IkReal x2793=(cj0*px);
IkReal x2794=(r20*sj5);
IkReal x2795=(py*sj0);
IkReal x2796=(cj4*r22);
IkReal x2797=((0.912)*sj0);
IkReal x2798=((0.912)*cj0);
IkReal x2799=(r01*sj5);
IkReal x2800=(cj5*r00);
IkReal x2801=((0.304)*cj0);
IkReal x2802=((0.93)*x2796);
IkReal x2803=((4.11)*x2794);
IkReal x2804=((4.11)*x2789);
IkReal x2805=((12.0)*x2793);
IkReal x2806=((12.0)*x2795);
IkReal x2807=((2055.0)*x2796);
IkReal x2808=(r21*sj4*sj5);
IkReal x2809=(cj5*r20*sj4);
IkReal x2810=(r22*sj4*x2788);
IkReal x2811=((0.93)*x2809);
IkReal x2812=(x2798*x2799);
IkReal x2813=(x2792*x2797);
IkReal x2814=((2055.0)*x2809);
IkReal x2815=((456.0)*x2810);
IkReal x2816=(x2807+x2815+x2814);
IkReal x2817=(((x2798*x2800))+((x2791*x2797))+(((0.93)*x2808)));
IkReal x2818=((((465.0)*x2789))+(((465.0)*x2794))+(((6000.0)*pz))+(((2055.0)*x2808)));
IkReal x2819=(x2802+x2803+x2806+x2804+x2805+x2811+x2813+x2812);
j1eval[0]=((10.816)+(((0.002)*(IKabs(((-569.0)+(((152.0)*x2810))+(((685.0)*x2796))+(((-155.0)*x2794))+(((-155.0)*x2789))+(((685.0)*x2809))+(((-685.0)*x2808))+(((-2000.0)*pz)))))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x2818))+x2816)))))+(IKabs(((0.214)+(((-1.0)*x2790*x2791))+(((0.31)*x2809))+(((-1.0)*x2800*x2801))+(((4.0)*x2795))+(((4.0)*x2793))+((x2790*x2792))+(((0.31)*x2796))+(((-0.31)*x2808))+((x2799*x2801))+(((1.37)*x2794))+(((1.37)*x2789)))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x2818))+x2816)))))+(IKabs(((0.214)+(((-1.0)*x2817))+x2819)))+(IKabs(((-0.214)+(((-1.0)*x2817))+x2819))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x2851=IKPowWithIntegerCheck(cj4,-1);
if(!x2851.valid){
continue;
}
IkReal x2821=x2851.value;
IkReal x2822=cj4*cj4;
IkReal x2823=((569.0)*cj4);
IkReal x2824=(cj4*cj5);
IkReal x2825=((0.002)*x2821);
IkReal x2826=(cj4*pz);
IkReal x2827=((685.0)*sj4);
IkReal x2828=(r22*sj4);
IkReal x2829=((2055.0)*sj4);
IkReal x2830=((456.0)*x2828);
IkReal x2831=((6000.0)*x2826);
IkReal x2832=((152.0)*x2828);
IkReal x2833=((2000.0)*x2826);
IkReal x2834=(cj4*r21*sj5);
IkReal x2835=(r22*x2822);
IkReal x2836=(cj4*r20*sj5);
IkReal x2837=((2055.0)*x2835);
IkReal x2838=((465.0)*x2836);
IkReal x2839=((465.0)*r21*x2824);
IkReal x2840=((685.0)*x2835);
IkReal x2841=((155.0)*x2836);
IkReal x2842=((155.0)*r21*x2824);
IkReal x2843=(r20*x2824*x2829);
IkReal x2844=(x2829*x2834);
IkReal x2845=(r20*x2824*x2827);
IkReal x2846=(x2827*x2834);
IkReal x2847=(x2845+x2840+x2832);
IkReal x2848=(x2843+x2837+x2830);
IkReal x2849=(x2844+x2839+x2838+x2831);
IkReal x2850=(x2846+x2842+x2841+x2833);
op[0]=(x2825*(((((-1.0)*x2823))+x2847+(((-1.0)*x2850)))));
op[1]=-0.428;
op[2]=(x2825*(((((-1.0)*x2823))+x2848+(((-1.0)*x2849)))));
op[3]=-0.856;
op[4]=(x2825*((x2848+x2823+(((-1.0)*x2849)))));
op[5]=-0.428;
op[6]=(x2825*((x2847+x2823+(((-1.0)*x2850)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2852=((0.304)*sj0);
IkReal x2853=(cj5*r10);
IkReal x2854=(r11*sj5);
IkReal x2855=(cj0*px);
IkReal x2856=(cj5*r21);
IkReal x2857=(py*sj0);
IkReal x2858=(r20*sj5);
IkReal x2859=(cj4*r22);
IkReal x2860=((0.912)*sj0);
IkReal x2861=((0.912)*cj0);
IkReal x2862=(r01*sj5);
IkReal x2863=(cj5*r00);
IkReal x2864=((0.304)*cj0);
IkReal x2865=((4.0)*x2855);
IkReal x2866=((1.37)*x2856);
IkReal x2867=((1.37)*x2858);
IkReal x2868=((4.0)*x2857);
IkReal x2869=((0.31)*x2859);
IkReal x2870=((0.93)*x2859);
IkReal x2871=((4.11)*x2858);
IkReal x2872=((4.11)*x2856);
IkReal x2873=((12.0)*x2855);
IkReal x2874=((12.0)*x2857);
IkReal x2875=(r21*sj4*sj5);
IkReal x2876=(cj5*r20*sj4);
IkReal x2877=(x2862*x2864);
IkReal x2878=((0.31)*x2876);
IkReal x2879=((0.93)*x2876);
IkReal x2880=(x2861*x2862);
IkReal x2881=(x2854*x2860);
IkReal x2882=(x2852*x2854);
IkReal x2883=(x2852*x2853);
IkReal x2884=(x2863*x2864);
IkReal x2885=((0.31)*x2875);
IkReal x2886=(((x2853*x2860))+(((0.93)*x2875))+((x2861*x2863)));
IkReal x2887=(x2883+x2884+x2885);
IkReal x2888=(x2882+x2865+x2866+x2867+x2868+x2869+x2877+x2878);
IkReal x2889=(x2880+x2881+x2873+x2872+x2871+x2870+x2874+x2879);
j1evalpoly[0]=((-0.214)+(((-2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.214)+(((-1.0)*x2886))+x2889))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.214)+(((-1.0)*x2887))+x2888))))+(((htj1*htj1*htj1*htj1)*(((0.214)+(((-1.0)*x2886))+x2889))))+(((-1.0)*x2887))+(((-2.276)*htj1))+x2888+(((-4.552)*(htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2890=(cj4*r22);
IkReal x2891=((1.0)*cj1);
IkReal x2892=(r20*sj1);
IkReal x2893=(cj5*sj4);
IkReal x2894=(cj5*r21);
IkReal x2895=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+((x2892*x2893))+(((-1.0)*sj1*x2895))+((sj1*x2890))+((cj1*x2894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2890*x2891))+((sj5*x2892))+((sj1*x2894))+(((-1.0)*r20*x2891*x2893))+((cj1*x2895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+((x2892*x2893))+(((-1.0)*sj1*x2895))+((sj1*x2890))+((cj1*x2894))))+IKsqr(((((-1.0)*x2890*x2891))+((sj5*x2892))+((sj1*x2894))+(((-1.0)*r20*x2891*x2893))+((cj1*x2895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+((x2892*x2893))+(((-1.0)*sj1*x2895))+((sj1*x2890))+((cj1*x2894))), ((((-1.0)*x2890*x2891))+((sj5*x2892))+((sj1*x2894))+(((-1.0)*r20*x2891*x2893))+((cj1*x2895))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2896=IKcos(j2);
IkReal x2897=IKsin(j2);
IkReal x2898=(r10*sj0);
IkReal x2899=((0.076)*cj5);
IkReal x2900=(cj0*r00);
IkReal x2901=((0.076)*sj5);
IkReal x2902=(r11*sj0);
IkReal x2903=((1.0)*sj5);
IkReal x2904=((1.0)*cj0);
IkReal x2905=(cj0*r01);
IkReal x2906=((1.0)*sj1);
IkReal x2907=((0.3425)*sj1);
IkReal x2908=(sj4*sj5);
IkReal x2909=((1.0)*sj0);
IkReal x2910=(cj1*x2896);
IkReal x2911=((1.0)*cj5*sj4);
IkReal x2912=(cj1*x2897);
IkReal x2913=(sj1*x2896);
IkReal x2914=(x2897*x2906);
evalcond[0]=((((-1.0)*cj5*r21))+x2912+x2913+(((-1.0)*r20*x2903)));
evalcond[1]=((((-1.0)*r21*sj4*x2903))+((cj4*r22))+((cj5*r20*sj4))+x2910+(((-1.0)*x2914)));
evalcond[2]=(((sj5*x2898))+((sj5*x2900))+((cj5*x2902))+((cj5*x2905))+x2910+(((-1.0)*x2914)));
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(cj4,-1);
if(!x2915.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*x2913))+(((0.0775)*x2912))+(((-0.2845)*cj1))+(((-1.0)*x2897*x2907))+pz+(((0.3425)*x2910))+(((-0.076)*r22*sj4*(x2915.value))));
evalcond[4]=(((x2902*x2908))+((x2905*x2908))+(((-1.0)*cj4*r02*x2904))+(((-1.0)*x2896*x2906))+(((-1.0)*x2898*x2911))+(((-1.0)*cj4*r12*x2909))+(((-1.0)*x2900*x2911))+(((-1.0)*x2912)));
evalcond[5]=(((x2899*x2900))+(((-1.0)*x2901*x2905))+(((-1.0)*x2901*x2902))+(((0.2845)*sj1))+((x2898*x2899))+(((0.0775)*x2910))+(((-1.0)*px*x2904))+(((-1.0)*x2896*x2907))+(((0.0535)*cj1))+(((-0.0775)*sj1*x2897))+(((-0.3425)*x2912))+(((-1.0)*py*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2916=(((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j0eval[0]=x2916;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x2916);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2917=(sj4*sj5);
IkReal x2918=((1.0)*cj4);
IkReal x2919=((1.0)*cj5*sj4);
IkReal x2920=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x2920;
j0eval[1]=((IKabs((((r01*x2917))+(((-1.0)*r02*x2918))+(((-1.0)*r00*x2919)))))+(IKabs((((r11*x2917))+(((-1.0)*r10*x2919))+(((-1.0)*r12*x2918))))));
j0eval[2]=IKsign(x2920);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x2921=(rxp2_2*sj4);
IkReal x2922=((0.076)*sj5);
IkReal x2923=((0.076)*cj5);
IkReal x2924=(r20*sj4);
IkReal x2925=(r21*sj4);
IkReal x2926=(cj4*rxp1_2*sj5);
IkReal x2927=(cj4*cj5*rxp0_2);
j0eval[0]=((((13.1578947368421)*x2927))+(((-13.1578947368421)*x2921))+(((-13.1578947368421)*x2926))+((cj5*x2925))+((sj5*x2924)));
j0eval[1]=((IKabs((((r00*x2923))+(((-1.0)*px))+(((-1.0)*r01*x2922)))))+(IKabs((((r10*x2923))+(((-1.0)*py))+(((-1.0)*r11*x2922))))));
j0eval[2]=IKsign((((x2922*x2924))+((x2923*x2925))+x2927+(((-1.0)*x2926))+(((-1.0)*x2921))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2928=((-1.0)*r20);
IkReal x2930 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2930)==0){
continue;
}
IkReal x2929=pow(x2930,-0.5);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2928),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
IkReal gconst24=((-1.0)*(x2931.value));
IkReal gconst25=(r21*x2929);
IkReal gconst26=(x2928*x2929);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2932.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x2933=((-1.0)*r20);
IkReal x2934=x2929;
CheckValue<IkReal> x2936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2933),IKFAST_ATAN2_MAGTHRESH);
if(!x2936.valid){
continue;
}
IkReal x2935=((-1.0)*(x2936.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2935;
IkReal gconst24=x2935;
IkReal gconst25=(r21*x2934);
IkReal gconst26=(x2933*x2934);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2937=((-1.0)*r20);
IkReal x2938=x2929;
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2937),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
IkReal x2939=((-1.0)*(x2940.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2939;
IkReal gconst24=x2939;
IkReal gconst25=(r21*x2938);
IkReal gconst26=(x2937*x2938);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2941=((-1.0)*r20);
IkReal x2942=x2929;
CheckValue<IkReal> x2944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2941),IKFAST_ATAN2_MAGTHRESH);
if(!x2944.valid){
continue;
}
IkReal x2943=((-1.0)*(x2944.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2943;
IkReal gconst24=x2943;
IkReal gconst25=(r21*x2942);
IkReal gconst26=(x2941*x2942);
IkReal x2945=(rxp2_2*sj4);
IkReal x2946=(r21*rxp1_2);
IkReal x2947=(r20*rxp0_2);
IkReal x2948=x2929;
IkReal x2949=(cj4*x2948);
j0eval[0]=((((-13.1578947368421)*x2947*x2949))+(((-13.1578947368421)*x2946*x2949))+(((-13.1578947368421)*x2945)));
j0eval[1]=IKsign(((((-1.0)*x2946*x2949))+(((-1.0)*x2945))+(((-1.0)*x2947*x2949))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2950=((0.076)*gconst25);
IkReal x2951=((0.076)*gconst26);
CheckValue<IkReal> x2952 = IKatan2WithCheck(IkReal((((r10*x2951))+(((-1.0)*py))+(((-1.0)*r11*x2950)))),IkReal((((r00*x2951))+(((-1.0)*px))+(((-1.0)*r01*x2950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*gconst25*rxp1_2))+((cj4*gconst26*rxp0_2))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x2951))+((r20*sj4*x2950)))),-1);
if(!x2953.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2952.value)+(((1.5707963267949)*(x2953.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x2954=IKcos(j0);
IkReal x2955=IKsin(j0);
IkReal x2956=(r02*sj4);
IkReal x2957=(r12*sj4);
IkReal x2958=((1.0)*cj4);
IkReal x2959=(cj4*r01);
IkReal x2960=(gconst25*r01);
IkReal x2961=(cj4*gconst25*r11);
IkReal x2962=((1.0)*x2955);
IkReal x2963=(gconst25*x2954);
IkReal x2964=(gconst26*x2954);
IkReal x2965=(r10*x2964);
IkReal x2966=(gconst26*r00*x2955);
IkReal x2967=(r11*x2963);
evalcond[0]=(((r11*x2964))+((r10*x2963))+(((-1.0)*gconst25*r00*x2962))+(((-1.0)*gconst26*r01*x2962)));
evalcond[1]=((((0.076)*x2955*x2960))+(((-1.0)*py*x2954))+(((0.076)*x2965))+((px*x2955))+(((-0.076)*x2966))+(((-0.076)*x2967)));
evalcond[2]=(((x2954*x2956))+(((-1.0)*gconst26*r10*x2955*x2958))+(((-1.0)*r00*x2958*x2964))+((x2955*x2961))+((x2959*x2963))+((x2955*x2957)));
evalcond[3]=(((cj4*r02*x2955))+(((-1.0)*sj4*x2960*x2962))+(((-1.0)*sj4*x2965))+(((-1.0)*r12*x2954*x2958))+((sj4*x2966))+((sj4*x2967)));
evalcond[4]=((1.0)+((x2954*x2957))+((x2954*x2961))+((cj4*x2966))+(((-1.0)*x2958*x2965))+(((-1.0)*x2955*x2958*x2960))+(((-1.0)*x2956*x2962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2968=((-1.0)*r20);
IkReal x2969=x2929;
CheckValue<IkReal> x2971 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2968),IKFAST_ATAN2_MAGTHRESH);
if(!x2971.valid){
continue;
}
IkReal x2970=((-1.0)*(x2971.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x2970;
IkReal gconst24=x2970;
IkReal gconst25=(r21*x2969);
IkReal gconst26=(x2968*x2969);
CheckValue<IkReal> x3007=IKPowWithIntegerCheck(cj4,-1);
if(!x3007.valid){
continue;
}
IkReal x2972=x3007.value;
IkReal x2973=((6000.0)*pz);
IkReal x2974=((2000.0)*pz);
IkReal x2975=(gconst25*sj4);
IkReal x2976=((465.0)*cj4);
IkReal x2977=(r12*sj0);
IkReal x2978=(gconst26*sj4);
IkReal x2979=(r10*sj0);
IkReal x2980=(cj0*r02);
IkReal x2981=(cj0*r00);
IkReal x2982=(cj4*r22);
IkReal x2983=(cj0*r01);
IkReal x2984=((155.0)*cj4);
IkReal x2985=(gconst26*r21);
IkReal x2986=(r11*sj0);
IkReal x2987=(gconst25*r20);
IkReal x2988=((2055.0)*x2982);
IkReal x2989=((685.0)*x2982);
IkReal x2990=(r22*sj4*x2972);
IkReal x2991=((2055.0)*r21*x2975);
IkReal x2992=((2055.0)*r20*x2978);
IkReal x2993=((456.0)*x2990);
IkReal x2994=((685.0)*r21*x2975);
IkReal x2995=((152.0)*x2990);
IkReal x2996=((685.0)*r20*x2978);
IkReal x2997=((465.0)*x2975*x2986);
IkReal x2998=((465.0)*x2975*x2983);
IkReal x2999=((569.0)+x2994+x2974);
IkReal x3000=((-569.0)+x2991+x2973);
IkReal x3001=((569.0)+x2991+x2973);
IkReal x3002=(x2998+x2997);
IkReal x3003=(x2988+x2992+x2993);
IkReal x3004=(x2989+x2995+x2996);
IkReal x3005=(x3003+(((465.0)*x2985))+(((465.0)*x2987)));
IkReal x3006=(((x2976*x2980))+(((465.0)*x2978*x2981))+x3003+(((465.0)*x2978*x2979))+((x2976*x2977)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs((x3000+(((-1.0)*x3005)))))))+(((0.00058411214953271)*(IKabs((x3001+(((-1.0)*x3005)))))))+(((0.00058411214953271)*(IKabs((x3001+x3002+(((-1.0)*x3006)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x2985))+(((-155.0)*x2987))+(((-1.0)*x3004))+x2999)))))+(((0.00058411214953271)*(IKabs((x3000+x3002+(((-1.0)*x3006)))))))+(((0.00058411214953271)*(IKabs(((((-1.0)*x2977*x2984))+(((155.0)*x2975*x2983))+(((155.0)*x2975*x2986))+(((-155.0)*x2978*x2981))+(((-1.0)*x3004))+(((-1.0)*x2980*x2984))+(((-155.0)*x2978*x2979))+x2999))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(cj4,-1);
if(!x3038.valid){
continue;
}
IkReal x3008=x3038.value;
IkReal x3009=((569.0)*cj4);
IkReal x3010=cj4*cj4;
IkReal x3011=(cj4*r20);
IkReal x3012=((2055.0)*sj4);
IkReal x3013=(cj4*pz);
IkReal x3014=((685.0)*sj4);
IkReal x3015=((0.002)*x3008);
IkReal x3016=(r22*sj4);
IkReal x3017=((6000.0)*x3013);
IkReal x3018=((456.0)*x3016);
IkReal x3019=((2000.0)*x3013);
IkReal x3020=((152.0)*x3016);
IkReal x3021=(cj4*gconst25*r21);
IkReal x3022=(r22*x3010);
IkReal x3023=(cj4*gconst26*r21);
IkReal x3024=((2055.0)*x3022);
IkReal x3025=((465.0)*gconst25*x3011);
IkReal x3026=((465.0)*x3023);
IkReal x3027=((155.0)*gconst25*x3011);
IkReal x3028=((155.0)*x3023);
IkReal x3029=((685.0)*x3022);
IkReal x3030=(x3012*x3021);
IkReal x3031=(gconst26*x3011*x3012);
IkReal x3032=(x3014*x3021);
IkReal x3033=(gconst26*x3011*x3014);
IkReal x3034=(x3017+x3030);
IkReal x3035=(x3019+x3032);
IkReal x3036=(x3033+x3029+x3028+x3027+x3020);
IkReal x3037=(x3018+x3031+x3026+x3025+x3024);
op[0]=(x3015*((x3009+x3035+(((-1.0)*x3036)))));
op[1]=0.428;
op[2]=(x3015*((x3009+x3034+(((-1.0)*x3037)))));
op[3]=0.856;
op[4]=(x3015*((x3034+(((-1.0)*x3009))+(((-1.0)*x3037)))));
op[5]=0.428;
op[6]=(x3015*((x3035+(((-1.0)*x3009))+(((-1.0)*x3036)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3039=cj4*cj4;
CheckValue<IkReal> x3083=IKPowWithIntegerCheck(cj4,-1);
if(!x3083.valid){
continue;
}
IkReal x3040=x3083.value;
IkReal x3041=((569.0)*cj4);
IkReal x3042=((0.002)*x3040);
IkReal x3043=(r22*sj4);
IkReal x3044=(gconst25*r01);
IkReal x3045=(gconst26*r00);
IkReal x3046=(cj4*pz);
IkReal x3047=(cj4*sj4);
IkReal x3048=(gconst25*r21);
IkReal x3049=(gconst26*r20);
IkReal x3050=((6000.0)*x3046);
IkReal x3051=((456.0)*x3043);
IkReal x3052=((2000.0)*x3046);
IkReal x3053=((152.0)*x3043);
IkReal x3054=(r22*x3039);
IkReal x3055=((465.0)*x3047);
IkReal x3056=(gconst25*r11*sj0);
IkReal x3057=(gconst26*r10*sj0);
IkReal x3058=((2055.0)*x3054);
IkReal x3059=((685.0)*x3054);
IkReal x3060=(r12*sj0*x3039);
IkReal x3061=((155.0)*cj0*x3047);
IkReal x3062=(cj0*r02*x3039);
IkReal x3063=((2055.0)*x3047*x3048);
IkReal x3064=((465.0)*x3060);
IkReal x3065=((465.0)*x3062);
IkReal x3066=((2055.0)*x3047*x3049);
IkReal x3067=((685.0)*x3047*x3048);
IkReal x3068=((155.0)*x3062);
IkReal x3069=((155.0)*x3060);
IkReal x3070=((685.0)*x3047*x3049);
IkReal x3071=(x3055*x3056);
IkReal x3072=(cj0*x3044*x3055);
IkReal x3073=(cj0*x3045*x3055);
IkReal x3074=(x3055*x3057);
IkReal x3075=(x3044*x3061);
IkReal x3076=((155.0)*x3047*x3056);
IkReal x3077=((155.0)*x3047*x3057);
IkReal x3078=(x3045*x3061);
IkReal x3079=(x3075+x3076+x3067+x3052);
IkReal x3080=(x3071+x3072+x3063+x3050);
IkReal x3081=(x3073+x3074+x3066+x3065+x3064+x3058+x3051);
IkReal x3082=(x3070+x3077+x3078+x3069+x3068+x3059+x3053);
j1evalpoly[0]=((((0.428)*htj1))+((x3042*(((((-1.0)*x3082))+x3079+(((-1.0)*x3041))))))+((x3042*(htj1*htj1)*(((((-1.0)*x3081))+x3080+(((-1.0)*x3041))))))+((x3042*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3081))+x3080+x3041))))+(((0.856)*(htj1*htj1*htj1)))+((x3042*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3082))+x3041+x3079))))+(((0.428)*(htj1*htj1*htj1*htj1*htj1))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3084=((1.0)*cj1);
IkReal x3085=(cj4*r22);
IkReal x3086=(r20*sj1);
IkReal x3087=(gconst26*sj4);
IkReal x3088=((1.0)*gconst25);
IkReal x3089=(r21*sj4);
IkReal x3090=(gconst26*r21);
if( IKabs((((sj1*x3085))+(((-1.0)*sj1*x3088*x3089))+(((-1.0)*gconst25*r20*x3084))+((x3086*x3087))+(((-1.0)*x3084*x3090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*gconst25*x3089))+(((-1.0)*sj1*x3090))+(((-1.0)*r20*x3084*x3087))+(((-1.0)*x3084*x3085))+(((-1.0)*x3086*x3088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3085))+(((-1.0)*sj1*x3088*x3089))+(((-1.0)*gconst25*r20*x3084))+((x3086*x3087))+(((-1.0)*x3084*x3090))))+IKsqr((((cj1*gconst25*x3089))+(((-1.0)*sj1*x3090))+(((-1.0)*r20*x3084*x3087))+(((-1.0)*x3084*x3085))+(((-1.0)*x3086*x3088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3085))+(((-1.0)*sj1*x3088*x3089))+(((-1.0)*gconst25*r20*x3084))+((x3086*x3087))+(((-1.0)*x3084*x3090))), (((cj1*gconst25*x3089))+(((-1.0)*sj1*x3090))+(((-1.0)*r20*x3084*x3087))+(((-1.0)*x3084*x3085))+(((-1.0)*x3086*x3088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3091=IKcos(j2);
IkReal x3092=IKsin(j2);
IkReal x3093=(sj0*sj4);
IkReal x3094=(gconst25*r11);
IkReal x3095=(gconst26*r10);
IkReal x3096=((0.076)*sj0);
IkReal x3097=(gconst26*sj4);
IkReal x3098=((1.0)*r21);
IkReal x3099=((1.0)*cj0);
IkReal x3100=(cj0*gconst26);
IkReal x3101=((1.0)*sj1);
IkReal x3102=((1.0)*sj0);
IkReal x3103=(gconst25*sj4);
IkReal x3104=(cj0*r01);
IkReal x3105=(cj1*x3091);
IkReal x3106=(cj1*x3092);
IkReal x3107=(sj1*x3091);
IkReal x3108=(sj1*x3092);
IkReal x3109=(x3091*x3101);
IkReal x3110=((1.0)*x3106);
IkReal x3111=(x3109+x3110);
evalcond[0]=((((-1.0)*gconst26*x3098))+(((-1.0)*x3111))+(((-1.0)*gconst25*r20)));
evalcond[1]=(x3105+((cj4*r22))+((r20*x3097))+(((-1.0)*x3098*x3103))+(((-1.0)*x3092*x3101)));
evalcond[2]=(x3108+((gconst26*r11*sj0))+((cj0*gconst25*r00))+((gconst25*r10*sj0))+(((-1.0)*x3105))+((r01*x3100)));
CheckValue<IkReal> x3112=IKPowWithIntegerCheck(cj4,-1);
if(!x3112.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x3106))+(((0.0775)*x3107))+(((-0.3425)*x3108))+pz+(((0.3425)*x3105))+(((-0.076)*r22*sj4*(x3112.value))));
evalcond[4]=((((-1.0)*x3093*x3095))+(((-1.0)*cj4*r12*x3102))+(((-1.0)*x3111))+((x3103*x3104))+(((-1.0)*cj4*r02*x3099))+(((-1.0)*r00*x3097*x3099))+((x3093*x3094)));
evalcond[5]=((((0.076)*r00*x3100))+(((-1.0)*px*x3099))+(((0.2845)*sj1))+(((0.0775)*x3105))+(((-1.0)*py*x3102))+(((0.0535)*cj1))+(((-0.0775)*x3108))+(((-0.3425)*x3106))+(((-0.3425)*x3107))+(((-0.076)*gconst25*x3104))+((x3095*x3096))+(((-1.0)*x3094*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3113=((1.0)*cj4);
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal((((gconst25*r10))+((gconst26*r11)))),IkReal((((gconst26*r01))+((gconst25*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r20*sj4))+((gconst25*r21*sj4))+((r22*(((((-1.0)*x3113*(gconst26*gconst26)))+(((-1.0)*x3113*(gconst25*gconst25))))))))),-1);
if(!x3115.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3116=IKcos(j0);
IkReal x3117=IKsin(j0);
IkReal x3118=(r02*sj4);
IkReal x3119=(r12*sj4);
IkReal x3120=((1.0)*cj4);
IkReal x3121=(cj4*r01);
IkReal x3122=(gconst25*r01);
IkReal x3123=(cj4*gconst25*r11);
IkReal x3124=((1.0)*x3117);
IkReal x3125=(gconst25*x3116);
IkReal x3126=(gconst26*x3116);
IkReal x3127=(r10*x3126);
IkReal x3128=(gconst26*r00*x3117);
IkReal x3129=(r11*x3125);
evalcond[0]=((((-1.0)*gconst25*r00*x3124))+((r10*x3125))+((r11*x3126))+(((-1.0)*gconst26*r01*x3124)));
evalcond[1]=((((0.076)*x3127))+(((0.076)*x3117*x3122))+(((-1.0)*py*x3116))+(((-0.076)*x3129))+(((-0.076)*x3128))+((px*x3117)));
evalcond[2]=((((-1.0)*r00*x3120*x3126))+(((-1.0)*gconst26*r10*x3117*x3120))+((x3121*x3125))+((x3116*x3118))+((x3117*x3119))+((x3117*x3123)));
evalcond[3]=((((-1.0)*r12*x3116*x3120))+((sj4*x3129))+((sj4*x3128))+((cj4*r02*x3117))+(((-1.0)*sj4*x3127))+(((-1.0)*sj4*x3122*x3124)));
evalcond[4]=((1.0)+(((-1.0)*x3117*x3120*x3122))+((x3116*x3123))+(((-1.0)*x3120*x3127))+((cj4*x3128))+(((-1.0)*x3118*x3124))+((x3116*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3130=((-1.0)*r20);
IkReal x3131=x2929;
CheckValue<IkReal> x3133 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3130),IKFAST_ATAN2_MAGTHRESH);
if(!x3133.valid){
continue;
}
IkReal x3132=((-1.0)*(x3133.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3132;
IkReal gconst24=x3132;
IkReal gconst25=(r21*x3131);
IkReal gconst26=(x3130*x3131);
CheckValue<IkReal> x3169=IKPowWithIntegerCheck(cj4,-1);
if(!x3169.valid){
continue;
}
IkReal x3134=x3169.value;
IkReal x3135=((6000.0)*pz);
IkReal x3136=((2000.0)*pz);
IkReal x3137=(gconst25*sj4);
IkReal x3138=((465.0)*cj4);
IkReal x3139=(r12*sj0);
IkReal x3140=(gconst26*sj4);
IkReal x3141=(r10*sj0);
IkReal x3142=(cj0*r02);
IkReal x3143=(cj0*r00);
IkReal x3144=(cj4*r22);
IkReal x3145=(cj0*r01);
IkReal x3146=((155.0)*cj4);
IkReal x3147=(gconst26*r21);
IkReal x3148=(r11*sj0);
IkReal x3149=(gconst25*r20);
IkReal x3150=((2055.0)*x3144);
IkReal x3151=((685.0)*x3144);
IkReal x3152=(r22*sj4*x3134);
IkReal x3153=((2055.0)*r21*x3137);
IkReal x3154=((2055.0)*r20*x3140);
IkReal x3155=((456.0)*x3152);
IkReal x3156=((685.0)*r21*x3137);
IkReal x3157=((152.0)*x3152);
IkReal x3158=((685.0)*r20*x3140);
IkReal x3159=((465.0)*x3137*x3148);
IkReal x3160=((465.0)*x3137*x3145);
IkReal x3161=((569.0)+x3156+x3136);
IkReal x3162=((-569.0)+x3153+x3135);
IkReal x3163=((569.0)+x3153+x3135);
IkReal x3164=(x3159+x3160);
IkReal x3165=(x3150+x3155+x3154);
IkReal x3166=(x3151+x3157+x3158);
IkReal x3167=(x3165+(((465.0)*x3149))+(((465.0)*x3147)));
IkReal x3168=(x3165+((x3138*x3139))+(((465.0)*x3140*x3143))+(((465.0)*x3140*x3141))+((x3138*x3142)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs((x3163+(((-1.0)*x3167)))))))+(((0.00058411214953271)*(IKabs((x3162+(((-1.0)*x3167)))))))+(((0.00058411214953271)*(IKabs((x3161+(((-155.0)*x3149))+(((-155.0)*x3147))+(((-1.0)*x3166)))))))+(((0.00058411214953271)*(IKabs((x3164+x3163+(((-1.0)*x3168)))))))+(((0.00058411214953271)*(IKabs(((((155.0)*x3137*x3145))+(((155.0)*x3137*x3148))+x3161+(((-1.0)*x3142*x3146))+(((-155.0)*x3140*x3141))+(((-155.0)*x3140*x3143))+(((-1.0)*x3139*x3146))+(((-1.0)*x3166)))))))+(((0.00058411214953271)*(IKabs((x3164+x3162+(((-1.0)*x3168))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3200=IKPowWithIntegerCheck(cj4,-1);
if(!x3200.valid){
continue;
}
IkReal x3170=x3200.value;
IkReal x3171=((569.0)*cj4);
IkReal x3172=cj4*cj4;
IkReal x3173=(cj4*r20);
IkReal x3174=((2055.0)*sj4);
IkReal x3175=(cj4*pz);
IkReal x3176=((685.0)*sj4);
IkReal x3177=((0.002)*x3170);
IkReal x3178=(r22*sj4);
IkReal x3179=((6000.0)*x3175);
IkReal x3180=((456.0)*x3178);
IkReal x3181=((2000.0)*x3175);
IkReal x3182=((152.0)*x3178);
IkReal x3183=(cj4*gconst25*r21);
IkReal x3184=(r22*x3172);
IkReal x3185=(cj4*gconst26*r21);
IkReal x3186=((2055.0)*x3184);
IkReal x3187=((465.0)*gconst25*x3173);
IkReal x3188=((465.0)*x3185);
IkReal x3189=((155.0)*gconst25*x3173);
IkReal x3190=((155.0)*x3185);
IkReal x3191=((685.0)*x3184);
IkReal x3192=(x3174*x3183);
IkReal x3193=(gconst26*x3173*x3174);
IkReal x3194=(x3176*x3183);
IkReal x3195=(gconst26*x3173*x3176);
IkReal x3196=(x3192+x3179);
IkReal x3197=(x3181+x3194);
IkReal x3198=(x3182+x3189+x3195+x3191+x3190);
IkReal x3199=(x3186+x3187+x3180+x3188+x3193);
op[0]=(x3177*((x3197+x3171+(((-1.0)*x3198)))));
op[1]=0.428;
op[2]=(x3177*((x3196+x3171+(((-1.0)*x3199)))));
op[3]=0.856;
op[4]=(x3177*((x3196+(((-1.0)*x3171))+(((-1.0)*x3199)))));
op[5]=0.428;
op[6]=(x3177*((x3197+(((-1.0)*x3171))+(((-1.0)*x3198)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3201=cj4*cj4;
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(cj4,-1);
if(!x3245.valid){
continue;
}
IkReal x3202=x3245.value;
IkReal x3203=((569.0)*cj4);
IkReal x3204=((0.002)*x3202);
IkReal x3205=(r22*sj4);
IkReal x3206=(gconst25*r01);
IkReal x3207=(gconst26*r00);
IkReal x3208=(cj4*pz);
IkReal x3209=(cj4*sj4);
IkReal x3210=(gconst25*r21);
IkReal x3211=(gconst26*r20);
IkReal x3212=((6000.0)*x3208);
IkReal x3213=((456.0)*x3205);
IkReal x3214=((2000.0)*x3208);
IkReal x3215=((152.0)*x3205);
IkReal x3216=(r22*x3201);
IkReal x3217=((465.0)*x3209);
IkReal x3218=(gconst25*r11*sj0);
IkReal x3219=(gconst26*r10*sj0);
IkReal x3220=((2055.0)*x3216);
IkReal x3221=((685.0)*x3216);
IkReal x3222=(r12*sj0*x3201);
IkReal x3223=((155.0)*cj0*x3209);
IkReal x3224=(cj0*r02*x3201);
IkReal x3225=((2055.0)*x3209*x3210);
IkReal x3226=((465.0)*x3222);
IkReal x3227=((465.0)*x3224);
IkReal x3228=((2055.0)*x3209*x3211);
IkReal x3229=((685.0)*x3209*x3210);
IkReal x3230=((155.0)*x3224);
IkReal x3231=((155.0)*x3222);
IkReal x3232=((685.0)*x3209*x3211);
IkReal x3233=(x3217*x3218);
IkReal x3234=(cj0*x3206*x3217);
IkReal x3235=(cj0*x3207*x3217);
IkReal x3236=(x3217*x3219);
IkReal x3237=(x3206*x3223);
IkReal x3238=((155.0)*x3209*x3218);
IkReal x3239=((155.0)*x3209*x3219);
IkReal x3240=(x3207*x3223);
IkReal x3241=(x3214+x3237+x3238+x3229);
IkReal x3242=(x3212+x3233+x3234+x3225);
IkReal x3243=(x3213+x3236+x3235+x3228+x3227+x3226+x3220);
IkReal x3244=(x3240+x3215+x3232+x3230+x3231+x3239+x3221);
j1evalpoly[0]=((((0.428)*htj1))+((x3204*(htj1*htj1*htj1*htj1)*((x3242+x3203+(((-1.0)*x3243))))))+((x3204*((x3241+(((-1.0)*x3244))+(((-1.0)*x3203))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3204*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3241+x3203+(((-1.0)*x3244))))))+((x3204*(htj1*htj1)*((x3242+(((-1.0)*x3243))+(((-1.0)*x3203)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3246=((1.0)*cj1);
IkReal x3247=(cj4*r22);
IkReal x3248=(r20*sj1);
IkReal x3249=(gconst26*sj4);
IkReal x3250=((1.0)*gconst25);
IkReal x3251=(r21*sj4);
IkReal x3252=(gconst26*r21);
if( IKabs((((sj1*x3247))+(((-1.0)*x3246*x3252))+(((-1.0)*gconst25*r20*x3246))+((x3248*x3249))+(((-1.0)*sj1*x3250*x3251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*gconst25*x3251))+(((-1.0)*x3248*x3250))+(((-1.0)*sj1*x3252))+(((-1.0)*r20*x3246*x3249))+(((-1.0)*x3246*x3247)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3247))+(((-1.0)*x3246*x3252))+(((-1.0)*gconst25*r20*x3246))+((x3248*x3249))+(((-1.0)*sj1*x3250*x3251))))+IKsqr((((cj1*gconst25*x3251))+(((-1.0)*x3248*x3250))+(((-1.0)*sj1*x3252))+(((-1.0)*r20*x3246*x3249))+(((-1.0)*x3246*x3247))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3247))+(((-1.0)*x3246*x3252))+(((-1.0)*gconst25*r20*x3246))+((x3248*x3249))+(((-1.0)*sj1*x3250*x3251))), (((cj1*gconst25*x3251))+(((-1.0)*x3248*x3250))+(((-1.0)*sj1*x3252))+(((-1.0)*r20*x3246*x3249))+(((-1.0)*x3246*x3247))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3253=IKcos(j2);
IkReal x3254=IKsin(j2);
IkReal x3255=(sj0*sj4);
IkReal x3256=(gconst25*r11);
IkReal x3257=(gconst26*r10);
IkReal x3258=((0.076)*sj0);
IkReal x3259=(gconst26*sj4);
IkReal x3260=((1.0)*r21);
IkReal x3261=((1.0)*cj0);
IkReal x3262=(cj0*gconst26);
IkReal x3263=((1.0)*sj1);
IkReal x3264=((1.0)*sj0);
IkReal x3265=(gconst25*sj4);
IkReal x3266=(cj0*r01);
IkReal x3267=(cj1*x3253);
IkReal x3268=(cj1*x3254);
IkReal x3269=(sj1*x3253);
IkReal x3270=(sj1*x3254);
IkReal x3271=(x3253*x3263);
IkReal x3272=((1.0)*x3268);
IkReal x3273=(x3272+x3271);
evalcond[0]=((((-1.0)*x3273))+(((-1.0)*gconst25*r20))+(((-1.0)*gconst26*x3260)));
evalcond[1]=((((-1.0)*x3260*x3265))+((cj4*r22))+x3267+(((-1.0)*x3254*x3263))+((r20*x3259)));
evalcond[2]=(((gconst26*r11*sj0))+((r01*x3262))+(((-1.0)*x3267))+((cj0*gconst25*r00))+x3270+((gconst25*r10*sj0)));
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(cj4,-1);
if(!x3274.valid){
continue;
}
evalcond[3]=((((0.3425)*x3267))+(((0.0535)*sj1))+(((0.0775)*x3269))+(((0.0775)*x3268))+(((-0.2845)*cj1))+pz+(((-0.3425)*x3270))+(((-0.076)*r22*sj4*(x3274.value))));
evalcond[4]=((((-1.0)*x3255*x3257))+(((-1.0)*r00*x3259*x3261))+((x3265*x3266))+(((-1.0)*x3273))+(((-1.0)*cj4*r12*x3264))+(((-1.0)*cj4*r02*x3261))+((x3255*x3256)));
evalcond[5]=((((-1.0)*px*x3261))+(((0.076)*r00*x3262))+(((-0.076)*gconst25*x3266))+(((0.2845)*sj1))+(((0.0775)*x3267))+(((0.0535)*cj1))+(((-1.0)*x3256*x3258))+(((-1.0)*py*x3264))+((x3257*x3258))+(((-0.0775)*x3270))+(((-0.3425)*x3269))+(((-0.3425)*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3275=((1.0)*gconst26);
IkReal x3276=(gconst25*sj4);
IkReal x3277=((1.0)*cj4);
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3277))+((r11*x3276))+(((-1.0)*r10*sj4*x3275)))),IkReal((((r01*x3276))+(((-1.0)*r00*sj4*x3275))+(((-1.0)*r02*x3277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3275))+(((-1.0)*gconst25*r20)))),-1);
if(!x3279.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3278.value)+(((1.5707963267949)*(x3279.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3280=IKcos(j0);
IkReal x3281=IKsin(j0);
IkReal x3282=(r02*sj4);
IkReal x3283=(r12*sj4);
IkReal x3284=((1.0)*cj4);
IkReal x3285=(cj4*r01);
IkReal x3286=(gconst25*r01);
IkReal x3287=(cj4*gconst25*r11);
IkReal x3288=((1.0)*x3281);
IkReal x3289=(gconst25*x3280);
IkReal x3290=(gconst26*x3280);
IkReal x3291=(r10*x3290);
IkReal x3292=(gconst26*r00*x3281);
IkReal x3293=(r11*x3289);
evalcond[0]=((((-1.0)*gconst25*r00*x3288))+(((-1.0)*gconst26*r01*x3288))+((r10*x3289))+((r11*x3290)));
evalcond[1]=((((0.076)*x3291))+(((-1.0)*py*x3280))+(((-0.076)*x3293))+(((-0.076)*x3292))+((px*x3281))+(((0.076)*x3281*x3286)));
evalcond[2]=(((x3285*x3289))+((x3280*x3282))+(((-1.0)*r00*x3284*x3290))+((x3281*x3283))+((x3281*x3287))+(((-1.0)*gconst26*r10*x3281*x3284)));
evalcond[3]=((((-1.0)*r12*x3280*x3284))+(((-1.0)*sj4*x3286*x3288))+(((-1.0)*sj4*x3291))+((sj4*x3293))+((sj4*x3292))+((cj4*r02*x3281)));
evalcond[4]=((1.0)+((cj4*x3292))+((x3280*x3287))+((x3280*x3283))+(((-1.0)*x3282*x3288))+(((-1.0)*x3284*x3291))+(((-1.0)*x3281*x3284*x3286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3294=((-1.0)*r20);
IkReal x3295=x2929;
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3294),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
IkReal x3296=((-1.0)*(x3297.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst25;
cj5=gconst26;
j5=x3296;
IkReal gconst24=x3296;
IkReal gconst25=(r21*x3295);
IkReal gconst26=(x3294*x3295);
CheckValue<IkReal> x3333=IKPowWithIntegerCheck(cj4,-1);
if(!x3333.valid){
continue;
}
IkReal x3298=x3333.value;
IkReal x3299=((6000.0)*pz);
IkReal x3300=((2000.0)*pz);
IkReal x3301=(gconst25*sj4);
IkReal x3302=((465.0)*cj4);
IkReal x3303=(r12*sj0);
IkReal x3304=(gconst26*sj4);
IkReal x3305=(r10*sj0);
IkReal x3306=(cj0*r02);
IkReal x3307=(cj0*r00);
IkReal x3308=(cj4*r22);
IkReal x3309=(cj0*r01);
IkReal x3310=((155.0)*cj4);
IkReal x3311=(gconst26*r21);
IkReal x3312=(r11*sj0);
IkReal x3313=(gconst25*r20);
IkReal x3314=((2055.0)*x3308);
IkReal x3315=((685.0)*x3308);
IkReal x3316=(r22*sj4*x3298);
IkReal x3317=((2055.0)*r21*x3301);
IkReal x3318=((2055.0)*r20*x3304);
IkReal x3319=((456.0)*x3316);
IkReal x3320=((685.0)*r21*x3301);
IkReal x3321=((152.0)*x3316);
IkReal x3322=((685.0)*r20*x3304);
IkReal x3323=((465.0)*x3301*x3312);
IkReal x3324=((465.0)*x3301*x3309);
IkReal x3325=((569.0)+x3320+x3300);
IkReal x3326=((-569.0)+x3317+x3299);
IkReal x3327=((569.0)+x3317+x3299);
IkReal x3328=(x3323+x3324);
IkReal x3329=(x3319+x3318+x3314);
IkReal x3330=(x3321+x3322+x3315);
IkReal x3331=((((465.0)*x3313))+(((465.0)*x3311))+x3329);
IkReal x3332=(x3329+(((465.0)*x3304*x3307))+(((465.0)*x3304*x3305))+((x3302*x3303))+((x3302*x3306)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs((x3325+(((-155.0)*x3313))+(((-155.0)*x3311))+(((-1.0)*x3330)))))))+(((0.00058411214953271)*(IKabs(((((155.0)*x3301*x3309))+(((155.0)*x3301*x3312))+x3325+(((-1.0)*x3330))+(((-1.0)*x3306*x3310))+(((-1.0)*x3303*x3310))+(((-155.0)*x3304*x3307))+(((-155.0)*x3304*x3305)))))))+(((0.00058411214953271)*(IKabs((x3326+(((-1.0)*x3331)))))))+(((0.00058411214953271)*(IKabs((x3327+x3328+(((-1.0)*x3332)))))))+(((0.00058411214953271)*(IKabs((x3326+x3328+(((-1.0)*x3332)))))))+(((0.00058411214953271)*(IKabs((x3327+(((-1.0)*x3331))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(cj4,-1);
if(!x3364.valid){
continue;
}
IkReal x3334=x3364.value;
IkReal x3335=((569.0)*cj4);
IkReal x3336=cj4*cj4;
IkReal x3337=(cj4*r20);
IkReal x3338=((2055.0)*sj4);
IkReal x3339=(cj4*pz);
IkReal x3340=((685.0)*sj4);
IkReal x3341=((0.002)*x3334);
IkReal x3342=(r22*sj4);
IkReal x3343=((6000.0)*x3339);
IkReal x3344=((456.0)*x3342);
IkReal x3345=((2000.0)*x3339);
IkReal x3346=((152.0)*x3342);
IkReal x3347=(cj4*gconst25*r21);
IkReal x3348=(r22*x3336);
IkReal x3349=(cj4*gconst26*r21);
IkReal x3350=((2055.0)*x3348);
IkReal x3351=((465.0)*gconst25*x3337);
IkReal x3352=((465.0)*x3349);
IkReal x3353=((155.0)*gconst25*x3337);
IkReal x3354=((155.0)*x3349);
IkReal x3355=((685.0)*x3348);
IkReal x3356=(x3338*x3347);
IkReal x3357=(gconst26*x3337*x3338);
IkReal x3358=(x3340*x3347);
IkReal x3359=(gconst26*x3337*x3340);
IkReal x3360=(x3343+x3356);
IkReal x3361=(x3345+x3358);
IkReal x3362=(x3346+x3355+x3354+x3353+x3359);
IkReal x3363=(x3344+x3357+x3351+x3350+x3352);
op[0]=(x3341*((x3361+x3335+(((-1.0)*x3362)))));
op[1]=0.428;
op[2]=(x3341*((x3360+x3335+(((-1.0)*x3363)))));
op[3]=0.856;
op[4]=(x3341*((x3360+(((-1.0)*x3363))+(((-1.0)*x3335)))));
op[5]=0.428;
op[6]=(x3341*((x3361+(((-1.0)*x3362))+(((-1.0)*x3335)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3365=cj4*cj4;
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(cj4,-1);
if(!x3409.valid){
continue;
}
IkReal x3366=x3409.value;
IkReal x3367=((569.0)*cj4);
IkReal x3368=((0.002)*x3366);
IkReal x3369=(r22*sj4);
IkReal x3370=(gconst25*r01);
IkReal x3371=(gconst26*r00);
IkReal x3372=(cj4*pz);
IkReal x3373=(cj4*sj4);
IkReal x3374=(gconst25*r21);
IkReal x3375=(gconst26*r20);
IkReal x3376=((6000.0)*x3372);
IkReal x3377=((456.0)*x3369);
IkReal x3378=((2000.0)*x3372);
IkReal x3379=((152.0)*x3369);
IkReal x3380=(r22*x3365);
IkReal x3381=((465.0)*x3373);
IkReal x3382=(gconst25*r11*sj0);
IkReal x3383=(gconst26*r10*sj0);
IkReal x3384=((2055.0)*x3380);
IkReal x3385=((685.0)*x3380);
IkReal x3386=(r12*sj0*x3365);
IkReal x3387=((155.0)*cj0*x3373);
IkReal x3388=(cj0*r02*x3365);
IkReal x3389=((2055.0)*x3373*x3374);
IkReal x3390=((465.0)*x3386);
IkReal x3391=((465.0)*x3388);
IkReal x3392=((2055.0)*x3373*x3375);
IkReal x3393=((685.0)*x3373*x3374);
IkReal x3394=((155.0)*x3388);
IkReal x3395=((155.0)*x3386);
IkReal x3396=((685.0)*x3373*x3375);
IkReal x3397=(x3381*x3382);
IkReal x3398=(cj0*x3370*x3381);
IkReal x3399=(cj0*x3371*x3381);
IkReal x3400=(x3381*x3383);
IkReal x3401=(x3370*x3387);
IkReal x3402=((155.0)*x3373*x3382);
IkReal x3403=((155.0)*x3373*x3383);
IkReal x3404=(x3371*x3387);
IkReal x3405=(x3378+x3393+x3401+x3402);
IkReal x3406=(x3376+x3389+x3397+x3398);
IkReal x3407=(x3377+x3384+x3391+x3390+x3392+x3399+x3400);
IkReal x3408=(x3379+x3385+x3395+x3394+x3396+x3403+x3404);
j1evalpoly[0]=(((x3368*(htj1*htj1*htj1*htj1)*((x3367+x3406+(((-1.0)*x3407))))))+(((0.428)*htj1))+((x3368*(htj1*htj1)*(((((-1.0)*x3367))+x3406+(((-1.0)*x3407))))))+((x3368*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3367+x3405+(((-1.0)*x3408))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3368*(((((-1.0)*x3367))+x3405+(((-1.0)*x3408)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3410=((1.0)*cj1);
IkReal x3411=(cj4*r22);
IkReal x3412=(r20*sj1);
IkReal x3413=(gconst26*sj4);
IkReal x3414=((1.0)*gconst25);
IkReal x3415=(r21*sj4);
IkReal x3416=(gconst26*r21);
if( IKabs((((sj1*x3411))+(((-1.0)*sj1*x3414*x3415))+(((-1.0)*gconst25*r20*x3410))+((x3412*x3413))+(((-1.0)*x3410*x3416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3412*x3414))+(((-1.0)*r20*x3410*x3413))+(((-1.0)*x3410*x3411))+((cj1*gconst25*x3415))+(((-1.0)*sj1*x3416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3411))+(((-1.0)*sj1*x3414*x3415))+(((-1.0)*gconst25*r20*x3410))+((x3412*x3413))+(((-1.0)*x3410*x3416))))+IKsqr(((((-1.0)*x3412*x3414))+(((-1.0)*r20*x3410*x3413))+(((-1.0)*x3410*x3411))+((cj1*gconst25*x3415))+(((-1.0)*sj1*x3416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3411))+(((-1.0)*sj1*x3414*x3415))+(((-1.0)*gconst25*r20*x3410))+((x3412*x3413))+(((-1.0)*x3410*x3416))), ((((-1.0)*x3412*x3414))+(((-1.0)*r20*x3410*x3413))+(((-1.0)*x3410*x3411))+((cj1*gconst25*x3415))+(((-1.0)*sj1*x3416))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3417=IKcos(j2);
IkReal x3418=IKsin(j2);
IkReal x3419=(sj0*sj4);
IkReal x3420=(gconst25*r11);
IkReal x3421=(gconst26*r10);
IkReal x3422=((0.076)*sj0);
IkReal x3423=(gconst26*sj4);
IkReal x3424=((1.0)*r21);
IkReal x3425=((1.0)*cj0);
IkReal x3426=(cj0*gconst26);
IkReal x3427=((1.0)*sj1);
IkReal x3428=((1.0)*sj0);
IkReal x3429=(gconst25*sj4);
IkReal x3430=(cj0*r01);
IkReal x3431=(cj1*x3417);
IkReal x3432=(cj1*x3418);
IkReal x3433=(sj1*x3417);
IkReal x3434=(sj1*x3418);
IkReal x3435=(x3417*x3427);
IkReal x3436=((1.0)*x3432);
IkReal x3437=(x3435+x3436);
evalcond[0]=((((-1.0)*x3437))+(((-1.0)*gconst25*r20))+(((-1.0)*gconst26*x3424)));
evalcond[1]=(((cj4*r22))+((r20*x3423))+(((-1.0)*x3424*x3429))+x3431+(((-1.0)*x3418*x3427)));
evalcond[2]=(((gconst26*r11*sj0))+((cj0*gconst25*r00))+((gconst25*r10*sj0))+x3434+(((-1.0)*x3431))+((r01*x3426)));
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(cj4,-1);
if(!x3438.valid){
continue;
}
evalcond[3]=((((0.0775)*x3433))+(((0.0775)*x3432))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x3434))+pz+(((0.3425)*x3431))+(((-0.076)*r22*sj4*(x3438.value))));
evalcond[4]=(((x3429*x3430))+(((-1.0)*x3419*x3421))+(((-1.0)*cj4*r12*x3428))+(((-1.0)*x3437))+(((-1.0)*r00*x3423*x3425))+((x3419*x3420))+(((-1.0)*cj4*r02*x3425)));
evalcond[5]=((((-0.0775)*x3434))+(((-1.0)*px*x3425))+(((-0.076)*gconst25*x3430))+(((0.0775)*x3431))+(((-1.0)*x3420*x3422))+(((0.2845)*sj1))+(((-0.3425)*x3433))+(((-0.3425)*x3432))+((x3421*x3422))+(((0.0535)*cj1))+(((0.076)*r00*x3426))+(((-1.0)*py*x3428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3439=((-1.0)*r21);
IkReal x3441 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3441)==0){
continue;
}
IkReal x3440=pow(x3441,-0.5);
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal(x3439),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x3442.value))));
IkReal gconst28=(x3439*x3440);
IkReal gconst29=((1.0)*r20*x3440);
CheckValue<IkReal> x3443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3443.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3443.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
IkReal x3444=((-1.0)*r21);
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(x3444),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
IkReal x3445=((1.0)*(x3447.value));
IkReal x3446=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3445)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3445)));
IkReal gconst28=(x3444*x3446);
IkReal gconst29=((1.0)*r20*x3446);
j0eval[0]=0;
j0eval[1]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x3448=((-1.0)*r21);
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal(x3448),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
IkReal x3449=((1.0)*(x3451.value));
IkReal x3450=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3449)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3449)));
IkReal gconst28=(x3448*x3450);
IkReal gconst29=((1.0)*r20*x3450);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x3452=((-1.0)*r21);
CheckValue<IkReal> x3455 = IKatan2WithCheck(IkReal(x3452),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3455.valid){
continue;
}
IkReal x3453=((1.0)*(x3455.value));
IkReal x3454=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3453)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3453)));
IkReal gconst28=(x3452*x3454);
IkReal gconst29=((1.0)*r20*x3454);
IkReal x3456=(rxp2_2*sj4);
IkReal x3457=(r21*rxp1_2);
IkReal x3458=(r20*rxp0_2);
IkReal x3459=x3440;
IkReal x3460=(cj4*x3459);
j0eval[0]=((((-13.1578947368421)*x3456))+(((13.1578947368421)*x3458*x3460))+(((13.1578947368421)*x3457*x3460)));
j0eval[1]=IKsign(((((-1.0)*x3456))+(((1.0)*x3457*x3460))+(((1.0)*x3458*x3460))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3461=((0.076)*gconst29);
IkReal x3462=((0.076)*gconst28);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign((((r20*sj4*x3462))+((cj4*gconst29*rxp0_2))+(((-1.0)*cj4*gconst28*rxp1_2))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x3461)))),-1);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3462))+(((-1.0)*py))+((r10*x3461)))),IkReal((((r00*x3461))+(((-1.0)*px))+(((-1.0)*r01*x3462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3463.value)))+(x3464.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3465=IKcos(j0);
IkReal x3466=IKsin(j0);
IkReal x3467=((1.0)*gconst29);
IkReal x3468=(r02*sj4);
IkReal x3469=(r12*sj4);
IkReal x3470=(gconst28*r01);
IkReal x3471=(cj4*x3466);
IkReal x3472=((1.0)*x3466);
IkReal x3473=(r01*x3466);
IkReal x3474=(cj4*x3465);
IkReal x3475=(r10*x3465);
IkReal x3476=(gconst28*r11*x3465);
IkReal x3477=(gconst29*r00*x3466);
evalcond[0]=(((gconst28*x3475))+(((-1.0)*x3467*x3473))+(((-1.0)*gconst28*r00*x3472))+((gconst29*r11*x3465)));
evalcond[1]=((((-1.0)*py*x3465))+(((0.076)*gconst29*x3475))+((px*x3466))+(((-0.076)*x3477))+(((-0.076)*x3476))+(((0.076)*x3466*x3470)));
evalcond[2]=(((x3470*x3474))+(((-1.0)*r00*x3467*x3474))+((x3465*x3468))+((x3466*x3469))+((gconst28*r11*x3471))+(((-1.0)*r10*x3467*x3471)));
evalcond[3]=(((sj4*x3477))+((sj4*x3476))+(((-1.0)*sj4*x3470*x3472))+(((-1.0)*r12*x3474))+((r02*x3471))+(((-1.0)*sj4*x3467*x3475)));
evalcond[4]=((1.0)+(((-1.0)*x3470*x3471))+((x3465*x3469))+((gconst28*r11*x3474))+(((-1.0)*x3468*x3472))+(((-1.0)*r10*x3467*x3474))+((gconst29*r00*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3478=((-1.0)*r21);
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal(x3478),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
IkReal x3479=((1.0)*(x3481.value));
IkReal x3480=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3479)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3479)));
IkReal gconst28=(x3478*x3480);
IkReal gconst29=((1.0)*r20*x3480);
IkReal x3482=((6000.0)*pz);
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(cj4,-1);
if(!x3516.valid){
continue;
}
IkReal x3483=x3516.value;
IkReal x3484=((2000.0)*pz);
IkReal x3485=((465.0)*cj4);
IkReal x3486=(r12*sj0);
IkReal x3487=(gconst28*sj4);
IkReal x3488=((155.0)*sj0);
IkReal x3489=(gconst29*r21);
IkReal x3490=(cj0*r02);
IkReal x3491=(gconst29*sj4);
IkReal x3492=(cj4*r22);
IkReal x3493=(cj0*r01);
IkReal x3494=((155.0)*cj4);
IkReal x3495=(cj0*r00);
IkReal x3496=((465.0)*sj0);
IkReal x3497=(gconst28*r20);
IkReal x3498=((2055.0)*x3492);
IkReal x3499=((685.0)*x3492);
IkReal x3500=(r22*sj4*x3483);
IkReal x3501=((2055.0)*r21*x3487);
IkReal x3502=((456.0)*x3500);
IkReal x3503=((2055.0)*r20*x3491);
IkReal x3504=((685.0)*r21*x3487);
IkReal x3505=((152.0)*x3500);
IkReal x3506=((685.0)*r20*x3491);
IkReal x3507=((465.0)*x3487*x3493);
IkReal x3508=(r11*x3487*x3496);
IkReal x3509=(x3501+x3482);
IkReal x3510=((569.0)+x3504+x3484);
IkReal x3511=(x3508+x3507);
IkReal x3512=(x3502+x3503+x3498);
IkReal x3513=(x3505+x3506+x3499);
IkReal x3514=(x3512+(((465.0)*x3489))+(((465.0)*x3497)));
IkReal x3515=(((r10*x3491*x3496))+(((465.0)*x3491*x3495))+((x3485*x3490))+x3512+((x3485*x3486)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((((-1.0)*x3486*x3494))+(((-1.0)*x3513))+x3510+(((155.0)*x3487*x3493))+((r11*x3487*x3488))+(((-1.0)*x3490*x3494))+(((-1.0)*r10*x3488*x3491))+(((-155.0)*x3491*x3495)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x3515))+x3509+x3511)))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x3515))+x3509+x3511)))))+(((0.00058411214953271)*(IKabs(((-569.0)+(((-1.0)*x3514))+x3509)))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3489))+(((-1.0)*x3513))+x3510+(((-155.0)*x3497)))))))+(((0.00058411214953271)*(IKabs(((569.0)+(((-1.0)*x3514))+x3509))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(cj4,-1);
if(!x3547.valid){
continue;
}
IkReal x3517=x3547.value;
IkReal x3518=((569.0)*cj4);
IkReal x3519=cj4*cj4;
IkReal x3520=(cj4*sj4);
IkReal x3521=(gconst28*r21);
IkReal x3522=(cj4*pz);
IkReal x3523=(gconst29*r20);
IkReal x3524=(r22*sj4);
IkReal x3525=((0.002)*x3517);
IkReal x3526=((6000.0)*x3522);
IkReal x3527=((456.0)*x3524);
IkReal x3528=((2000.0)*x3522);
IkReal x3529=((152.0)*x3524);
IkReal x3530=(cj4*gconst29*r21);
IkReal x3531=(r22*x3519);
IkReal x3532=(cj4*gconst28*r20);
IkReal x3533=((2055.0)*x3531);
IkReal x3534=((465.0)*x3530);
IkReal x3535=((465.0)*x3532);
IkReal x3536=((155.0)*x3532);
IkReal x3537=((155.0)*x3530);
IkReal x3538=((685.0)*x3531);
IkReal x3539=((2055.0)*x3520*x3521);
IkReal x3540=((2055.0)*x3520*x3523);
IkReal x3541=((685.0)*x3520*x3521);
IkReal x3542=((685.0)*x3520*x3523);
IkReal x3543=(x3528+x3541);
IkReal x3544=(x3539+x3526);
IkReal x3545=(x3537+x3536+x3538+x3529+x3542);
IkReal x3546=(x3533+x3535+x3534+x3527+x3540);
op[0]=(x3525*((x3518+x3543+(((-1.0)*x3545)))));
op[1]=0.428;
op[2]=(x3525*((x3518+x3544+(((-1.0)*x3546)))));
op[3]=0.856;
op[4]=(x3525*(((((-1.0)*x3518))+x3544+(((-1.0)*x3546)))));
op[5]=0.428;
op[6]=(x3525*(((((-1.0)*x3518))+x3543+(((-1.0)*x3545)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3548=cj4*cj4;
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(cj4,-1);
if(!x3594.valid){
continue;
}
IkReal x3549=x3594.value;
IkReal x3550=((569.0)*cj4);
IkReal x3551=(cj0*r00);
IkReal x3552=(r10*sj0);
IkReal x3553=(cj4*sj4);
IkReal x3554=((465.0)*cj0);
IkReal x3555=(gconst28*r01);
IkReal x3556=((155.0)*gconst29);
IkReal x3557=((155.0)*cj0);
IkReal x3558=(gconst29*r20);
IkReal x3559=(gconst28*r21);
IkReal x3560=(r22*sj4);
IkReal x3561=((0.002)*x3549);
IkReal x3562=(cj4*pz);
IkReal x3563=((6000.0)*x3562);
IkReal x3564=((456.0)*x3560);
IkReal x3565=((2000.0)*x3562);
IkReal x3566=((152.0)*x3560);
IkReal x3567=(r22*x3548);
IkReal x3568=(r02*x3548);
IkReal x3569=(gconst28*r11*sj0);
IkReal x3570=((2055.0)*x3567);
IkReal x3571=((685.0)*x3567);
IkReal x3572=((465.0)*gconst29*x3553);
IkReal x3573=(r12*sj0*x3548);
IkReal x3574=((2055.0)*x3553*x3559);
IkReal x3575=((465.0)*x3573);
IkReal x3576=((2055.0)*x3553*x3558);
IkReal x3577=(x3554*x3568);
IkReal x3578=((685.0)*x3553*x3559);
IkReal x3579=(x3557*x3568);
IkReal x3580=((155.0)*x3573);
IkReal x3581=((685.0)*x3553*x3558);
IkReal x3582=((465.0)*x3553*x3569);
IkReal x3583=(x3553*x3554*x3555);
IkReal x3584=(x3551*x3572);
IkReal x3585=(x3552*x3572);
IkReal x3586=((155.0)*x3553*x3569);
IkReal x3587=(x3553*x3555*x3557);
IkReal x3588=(x3551*x3553*x3556);
IkReal x3589=(x3552*x3553*x3556);
IkReal x3590=(x3578+x3565+x3586+x3587);
IkReal x3591=(x3574+x3563+x3582+x3583);
IkReal x3592=(x3579+x3571+x3566+x3580+x3581+x3588+x3589);
IkReal x3593=(x3575+x3577+x3576+x3570+x3564+x3584+x3585);
j1evalpoly[0]=((((0.428)*htj1))+((x3561*((x3590+(((-1.0)*x3550))+(((-1.0)*x3592))))))+((x3561*(htj1*htj1)*((x3591+(((-1.0)*x3550))+(((-1.0)*x3593))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3561*(htj1*htj1*htj1*htj1)*((x3550+x3591+(((-1.0)*x3593))))))+((x3561*(htj1*htj1*htj1*htj1*htj1*htj1)*((x3550+x3590+(((-1.0)*x3592)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3595=((1.0)*cj1);
IkReal x3596=(cj4*r22);
IkReal x3597=(gconst29*r21);
IkReal x3598=((1.0)*sj1);
IkReal x3599=(gconst28*r20);
IkReal x3600=(gconst29*r20*sj4);
IkReal x3601=(gconst28*r21*sj4);
if( IKabs((((sj1*x3596))+(((-1.0)*x3598*x3601))+(((-1.0)*x3595*x3597))+(((-1.0)*x3595*x3599))+((sj1*x3600)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3601))+(((-1.0)*x3598*x3599))+(((-1.0)*x3595*x3596))+(((-1.0)*x3595*x3600))+(((-1.0)*x3597*x3598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x3596))+(((-1.0)*x3598*x3601))+(((-1.0)*x3595*x3597))+(((-1.0)*x3595*x3599))+((sj1*x3600))))+IKsqr((((cj1*x3601))+(((-1.0)*x3598*x3599))+(((-1.0)*x3595*x3596))+(((-1.0)*x3595*x3600))+(((-1.0)*x3597*x3598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x3596))+(((-1.0)*x3598*x3601))+(((-1.0)*x3595*x3597))+(((-1.0)*x3595*x3599))+((sj1*x3600))), (((cj1*x3601))+(((-1.0)*x3598*x3599))+(((-1.0)*x3595*x3596))+(((-1.0)*x3595*x3600))+(((-1.0)*x3597*x3598))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3602=IKcos(j2);
IkReal x3603=IKsin(j2);
IkReal x3604=((1.0)*r21);
IkReal x3605=(gconst28*sj4);
IkReal x3606=((1.0)*cj0);
IkReal x3607=((1.0)*sj1);
IkReal x3608=(gconst29*sj4);
IkReal x3609=(cj0*r00);
IkReal x3610=((1.0)*sj0);
IkReal x3611=(gconst29*sj0);
IkReal x3612=(cj0*r01);
IkReal x3613=(cj1*x3602);
IkReal x3614=(gconst28*r11*sj0);
IkReal x3615=(cj1*x3603);
IkReal x3616=(sj1*x3602);
IkReal x3617=(sj1*x3603);
IkReal x3618=(x3602*x3607);
IkReal x3619=((1.0)*x3615);
IkReal x3620=(x3618+x3619);
evalcond[0]=((((-1.0)*x3620))+(((-1.0)*gconst28*r20))+(((-1.0)*gconst29*x3604)));
evalcond[1]=(((cj4*r22))+x3613+(((-1.0)*x3603*x3607))+((r20*x3608))+(((-1.0)*x3604*x3605)));
evalcond[2]=(((r11*x3611))+(((-1.0)*x3613))+((gconst28*r10*sj0))+x3617+((gconst28*x3609))+((gconst29*x3612)));
CheckValue<IkReal> x3621=IKPowWithIntegerCheck(cj4,-1);
if(!x3621.valid){
continue;
}
evalcond[3]=((((0.3425)*x3613))+(((-0.3425)*x3617))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.076)*r22*sj4*(x3621.value)))+(((0.0775)*x3615))+(((0.0775)*x3616)));
evalcond[4]=(((x3605*x3612))+(((-1.0)*x3620))+(((-1.0)*cj4*r02*x3606))+(((-1.0)*r00*x3606*x3608))+(((-1.0)*cj4*r12*x3610))+((r11*sj0*x3605))+(((-1.0)*r10*x3608*x3610)));
evalcond[5]=((((-0.3425)*x3615))+(((-0.3425)*x3616))+(((-0.076)*gconst28*x3612))+(((-1.0)*py*x3610))+(((0.2845)*sj1))+(((0.076)*r10*x3611))+(((-0.076)*x3614))+(((-0.0775)*x3617))+(((0.0535)*cj1))+(((0.076)*gconst29*x3609))+(((-1.0)*px*x3606))+(((0.0775)*x3613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3622=((1.0)*cj4);
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal((((gconst28*r10))+((gconst29*r11)))),IkReal((((gconst29*r01))+((gconst28*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(IKsign((((gconst28*r21*sj4))+(((-1.0)*gconst29*r20*sj4))+((r22*(((((-1.0)*x3622*(gconst29*gconst29)))+(((-1.0)*x3622*(gconst28*gconst28))))))))),-1);
if(!x3624.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3623.value)+(((1.5707963267949)*(x3624.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3625=IKcos(j0);
IkReal x3626=IKsin(j0);
IkReal x3627=((1.0)*gconst29);
IkReal x3628=(r02*sj4);
IkReal x3629=(r12*sj4);
IkReal x3630=(gconst28*r01);
IkReal x3631=(cj4*x3626);
IkReal x3632=((1.0)*x3626);
IkReal x3633=(r01*x3626);
IkReal x3634=(cj4*x3625);
IkReal x3635=(r10*x3625);
IkReal x3636=(gconst28*r11*x3625);
IkReal x3637=(gconst29*r00*x3626);
evalcond[0]=((((-1.0)*x3627*x3633))+((gconst29*r11*x3625))+((gconst28*x3635))+(((-1.0)*gconst28*r00*x3632)));
evalcond[1]=(((px*x3626))+(((-0.076)*x3636))+(((-0.076)*x3637))+(((-1.0)*py*x3625))+(((0.076)*gconst29*x3635))+(((0.076)*x3626*x3630)));
evalcond[2]=(((x3626*x3629))+((gconst28*r11*x3631))+(((-1.0)*r00*x3627*x3634))+(((-1.0)*r10*x3627*x3631))+((x3625*x3628))+((x3630*x3634)));
evalcond[3]=(((r02*x3631))+(((-1.0)*sj4*x3630*x3632))+(((-1.0)*sj4*x3627*x3635))+(((-1.0)*r12*x3634))+((sj4*x3637))+((sj4*x3636)));
evalcond[4]=((1.0)+(((-1.0)*x3628*x3632))+((gconst28*r11*x3634))+(((-1.0)*x3630*x3631))+((gconst29*r00*x3631))+(((-1.0)*r10*x3627*x3634))+((x3625*x3629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3638=((-1.0)*r21);
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal(x3638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
IkReal x3639=((1.0)*(x3641.value));
IkReal x3640=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3639)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3639)));
IkReal gconst28=(x3638*x3640);
IkReal gconst29=((1.0)*r20*x3640);
IkReal x3642=((6000.0)*pz);
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(cj4,-1);
if(!x3676.valid){
continue;
}
IkReal x3643=x3676.value;
IkReal x3644=((2000.0)*pz);
IkReal x3645=((465.0)*cj4);
IkReal x3646=(r12*sj0);
IkReal x3647=(gconst28*sj4);
IkReal x3648=((155.0)*sj0);
IkReal x3649=(gconst29*r21);
IkReal x3650=(cj0*r02);
IkReal x3651=(gconst29*sj4);
IkReal x3652=(cj4*r22);
IkReal x3653=(cj0*r01);
IkReal x3654=((155.0)*cj4);
IkReal x3655=(cj0*r00);
IkReal x3656=((465.0)*sj0);
IkReal x3657=(gconst28*r20);
IkReal x3658=((2055.0)*x3652);
IkReal x3659=((685.0)*x3652);
IkReal x3660=(r22*sj4*x3643);
IkReal x3661=((2055.0)*r21*x3647);
IkReal x3662=((456.0)*x3660);
IkReal x3663=((2055.0)*r20*x3651);
IkReal x3664=((685.0)*r21*x3647);
IkReal x3665=((152.0)*x3660);
IkReal x3666=((685.0)*r20*x3651);
IkReal x3667=((465.0)*x3647*x3653);
IkReal x3668=(r11*x3647*x3656);
IkReal x3669=(x3661+x3642);
IkReal x3670=((569.0)+x3664+x3644);
IkReal x3671=(x3667+x3668);
IkReal x3672=(x3663+x3662+x3658);
IkReal x3673=(x3665+x3666+x3659);
IkReal x3674=((((465.0)*x3657))+(((465.0)*x3649))+x3672);
IkReal x3675=(((x3645*x3650))+(((465.0)*x3651*x3655))+((r10*x3651*x3656))+x3672+((x3645*x3646)));
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((-569.0)+x3669+(((-1.0)*x3674)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3651*x3655))+(((-1.0)*x3646*x3654))+(((155.0)*x3647*x3653))+(((-1.0)*r10*x3648*x3651))+((r11*x3647*x3648))+x3670+(((-1.0)*x3650*x3654))+(((-1.0)*x3673)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3669+x3671+(((-1.0)*x3675)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3669+x3671+(((-1.0)*x3675)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3649))+(((-155.0)*x3657))+x3670+(((-1.0)*x3673)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3669+(((-1.0)*x3674))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(cj4,-1);
if(!x3707.valid){
continue;
}
IkReal x3677=x3707.value;
IkReal x3678=((569.0)*cj4);
IkReal x3679=cj4*cj4;
IkReal x3680=(cj4*sj4);
IkReal x3681=(gconst28*r21);
IkReal x3682=(cj4*pz);
IkReal x3683=(gconst29*r20);
IkReal x3684=(r22*sj4);
IkReal x3685=((0.002)*x3677);
IkReal x3686=((6000.0)*x3682);
IkReal x3687=((456.0)*x3684);
IkReal x3688=((2000.0)*x3682);
IkReal x3689=((152.0)*x3684);
IkReal x3690=(cj4*gconst29*r21);
IkReal x3691=(r22*x3679);
IkReal x3692=(cj4*gconst28*r20);
IkReal x3693=((2055.0)*x3691);
IkReal x3694=((465.0)*x3690);
IkReal x3695=((465.0)*x3692);
IkReal x3696=((155.0)*x3692);
IkReal x3697=((155.0)*x3690);
IkReal x3698=((685.0)*x3691);
IkReal x3699=((2055.0)*x3680*x3681);
IkReal x3700=((2055.0)*x3680*x3683);
IkReal x3701=((685.0)*x3680*x3681);
IkReal x3702=((685.0)*x3680*x3683);
IkReal x3703=(x3688+x3701);
IkReal x3704=(x3699+x3686);
IkReal x3705=(x3698+x3696+x3697+x3689+x3702);
IkReal x3706=(x3693+x3694+x3695+x3687+x3700);
op[0]=(x3685*(((((-1.0)*x3705))+x3678+x3703)));
op[1]=0.428;
op[2]=(x3685*(((((-1.0)*x3706))+x3678+x3704)));
op[3]=0.856;
op[4]=(x3685*(((((-1.0)*x3706))+x3704+(((-1.0)*x3678)))));
op[5]=0.428;
op[6]=(x3685*(((((-1.0)*x3705))+x3703+(((-1.0)*x3678)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3708=cj4*cj4;
CheckValue<IkReal> x3754=IKPowWithIntegerCheck(cj4,-1);
if(!x3754.valid){
continue;
}
IkReal x3709=x3754.value;
IkReal x3710=((569.0)*cj4);
IkReal x3711=(cj0*r00);
IkReal x3712=(r10*sj0);
IkReal x3713=(cj4*sj4);
IkReal x3714=((465.0)*cj0);
IkReal x3715=(gconst28*r01);
IkReal x3716=((155.0)*gconst29);
IkReal x3717=((155.0)*cj0);
IkReal x3718=(gconst29*r20);
IkReal x3719=(gconst28*r21);
IkReal x3720=(r22*sj4);
IkReal x3721=((0.002)*x3709);
IkReal x3722=(cj4*pz);
IkReal x3723=((6000.0)*x3722);
IkReal x3724=((456.0)*x3720);
IkReal x3725=((2000.0)*x3722);
IkReal x3726=((152.0)*x3720);
IkReal x3727=(r22*x3708);
IkReal x3728=(r02*x3708);
IkReal x3729=(gconst28*r11*sj0);
IkReal x3730=((2055.0)*x3727);
IkReal x3731=((685.0)*x3727);
IkReal x3732=((465.0)*gconst29*x3713);
IkReal x3733=(r12*sj0*x3708);
IkReal x3734=((2055.0)*x3713*x3719);
IkReal x3735=((465.0)*x3733);
IkReal x3736=((2055.0)*x3713*x3718);
IkReal x3737=(x3714*x3728);
IkReal x3738=((685.0)*x3713*x3719);
IkReal x3739=(x3717*x3728);
IkReal x3740=((155.0)*x3733);
IkReal x3741=((685.0)*x3713*x3718);
IkReal x3742=((465.0)*x3713*x3729);
IkReal x3743=(x3713*x3714*x3715);
IkReal x3744=(x3711*x3732);
IkReal x3745=(x3712*x3732);
IkReal x3746=((155.0)*x3713*x3729);
IkReal x3747=(x3713*x3715*x3717);
IkReal x3748=(x3711*x3713*x3716);
IkReal x3749=(x3712*x3713*x3716);
IkReal x3750=(x3746+x3747+x3725+x3738);
IkReal x3751=(x3742+x3743+x3723+x3734);
IkReal x3752=(x3748+x3749+x3740+x3741+x3726+x3739+x3731);
IkReal x3753=(x3744+x3745+x3724+x3737+x3736+x3735+x3730);
j1evalpoly[0]=((((0.428)*htj1))+((x3721*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3752))+x3750+x3710))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3721*(htj1*htj1)*(((((-1.0)*x3710))+(((-1.0)*x3753))+x3751))))+((x3721*(((((-1.0)*x3710))+(((-1.0)*x3752))+x3750))))+((x3721*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3753))+x3751+x3710)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3755=((1.0)*cj1);
IkReal x3756=(cj4*r22);
IkReal x3757=(gconst29*r21);
IkReal x3758=((1.0)*sj1);
IkReal x3759=(gconst28*r20);
IkReal x3760=(gconst29*r20*sj4);
IkReal x3761=(gconst28*r21*sj4);
if( IKabs(((((-1.0)*x3755*x3757))+(((-1.0)*x3755*x3759))+((sj1*x3756))+((sj1*x3760))+(((-1.0)*x3758*x3761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3755*x3756))+(((-1.0)*x3755*x3760))+(((-1.0)*x3758*x3759))+((cj1*x3761))+(((-1.0)*x3757*x3758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3755*x3757))+(((-1.0)*x3755*x3759))+((sj1*x3756))+((sj1*x3760))+(((-1.0)*x3758*x3761))))+IKsqr(((((-1.0)*x3755*x3756))+(((-1.0)*x3755*x3760))+(((-1.0)*x3758*x3759))+((cj1*x3761))+(((-1.0)*x3757*x3758))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3755*x3757))+(((-1.0)*x3755*x3759))+((sj1*x3756))+((sj1*x3760))+(((-1.0)*x3758*x3761))), ((((-1.0)*x3755*x3756))+(((-1.0)*x3755*x3760))+(((-1.0)*x3758*x3759))+((cj1*x3761))+(((-1.0)*x3757*x3758))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3762=IKcos(j2);
IkReal x3763=IKsin(j2);
IkReal x3764=((1.0)*r21);
IkReal x3765=(gconst28*sj4);
IkReal x3766=((1.0)*cj0);
IkReal x3767=((1.0)*sj1);
IkReal x3768=(gconst29*sj4);
IkReal x3769=(cj0*r00);
IkReal x3770=((1.0)*sj0);
IkReal x3771=(gconst29*sj0);
IkReal x3772=(cj0*r01);
IkReal x3773=(cj1*x3762);
IkReal x3774=(gconst28*r11*sj0);
IkReal x3775=(cj1*x3763);
IkReal x3776=(sj1*x3762);
IkReal x3777=(sj1*x3763);
IkReal x3778=(x3762*x3767);
IkReal x3779=((1.0)*x3775);
IkReal x3780=(x3779+x3778);
evalcond[0]=((((-1.0)*gconst29*x3764))+(((-1.0)*x3780))+(((-1.0)*gconst28*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3763*x3767))+(((-1.0)*x3764*x3765))+x3773+((r20*x3768)));
evalcond[2]=((((-1.0)*x3773))+((gconst28*r10*sj0))+((gconst29*x3772))+((gconst28*x3769))+x3777+((r11*x3771)));
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(cj4,-1);
if(!x3781.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.3425)*x3777))+(((-0.2845)*cj1))+pz+(((0.3425)*x3773))+(((0.0775)*x3776))+(((0.0775)*x3775))+(((-0.076)*r22*sj4*(x3781.value))));
evalcond[4]=((((-1.0)*r10*x3768*x3770))+(((-1.0)*r00*x3766*x3768))+(((-1.0)*cj4*r02*x3766))+(((-1.0)*x3780))+((r11*sj0*x3765))+(((-1.0)*cj4*r12*x3770))+((x3765*x3772)));
evalcond[5]=((((0.2845)*sj1))+(((-0.3425)*x3776))+(((-0.3425)*x3775))+(((-0.076)*x3774))+(((0.0535)*cj1))+(((0.076)*gconst29*x3769))+(((-0.076)*gconst28*x3772))+(((0.0775)*x3773))+(((-1.0)*px*x3766))+(((-1.0)*py*x3770))+(((-0.0775)*x3777))+(((0.076)*r10*x3771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3782=((1.0)*gconst29);
IkReal x3783=(gconst28*sj4);
IkReal x3784=((1.0)*cj4);
CheckValue<IkReal> x3785=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x3782)))),-1);
if(!x3785.valid){
continue;
}
CheckValue<IkReal> x3786 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3784))+(((-1.0)*r10*sj4*x3782))+((r11*x3783)))),IkReal(((((-1.0)*r00*sj4*x3782))+(((-1.0)*r02*x3784))+((r01*x3783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3786.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3785.value)))+(x3786.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3787=IKcos(j0);
IkReal x3788=IKsin(j0);
IkReal x3789=((1.0)*gconst29);
IkReal x3790=(r02*sj4);
IkReal x3791=(r12*sj4);
IkReal x3792=(gconst28*r01);
IkReal x3793=(cj4*x3788);
IkReal x3794=((1.0)*x3788);
IkReal x3795=(r01*x3788);
IkReal x3796=(cj4*x3787);
IkReal x3797=(r10*x3787);
IkReal x3798=(gconst28*r11*x3787);
IkReal x3799=(gconst29*r00*x3788);
evalcond[0]=((((-1.0)*gconst28*r00*x3794))+((gconst28*x3797))+((gconst29*r11*x3787))+(((-1.0)*x3789*x3795)));
evalcond[1]=((((0.076)*x3788*x3792))+((px*x3788))+(((-1.0)*py*x3787))+(((0.076)*gconst29*x3797))+(((-0.076)*x3799))+(((-0.076)*x3798)));
evalcond[2]=(((gconst28*r11*x3793))+((x3792*x3796))+((x3788*x3791))+(((-1.0)*r00*x3789*x3796))+(((-1.0)*r10*x3789*x3793))+((x3787*x3790)));
evalcond[3]=((((-1.0)*r12*x3796))+((r02*x3793))+(((-1.0)*sj4*x3789*x3797))+(((-1.0)*sj4*x3792*x3794))+((sj4*x3798))+((sj4*x3799)));
evalcond[4]=((1.0)+(((-1.0)*x3792*x3793))+((gconst28*r11*x3796))+(((-1.0)*r10*x3789*x3796))+(((-1.0)*x3790*x3794))+((x3787*x3791))+((gconst29*r00*x3793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x3800=((-1.0)*r21);
CheckValue<IkReal> x3803 = IKatan2WithCheck(IkReal(x3800),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3803.valid){
continue;
}
IkReal x3801=((1.0)*(x3803.value));
IkReal x3802=x3440;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x3801)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x3801)));
IkReal gconst28=(x3800*x3802);
IkReal gconst29=((1.0)*r20*x3802);
IkReal x3804=((6000.0)*pz);
CheckValue<IkReal> x3838=IKPowWithIntegerCheck(cj4,-1);
if(!x3838.valid){
continue;
}
IkReal x3805=x3838.value;
IkReal x3806=((2000.0)*pz);
IkReal x3807=((465.0)*cj4);
IkReal x3808=(r12*sj0);
IkReal x3809=(gconst28*sj4);
IkReal x3810=((155.0)*sj0);
IkReal x3811=(gconst29*r21);
IkReal x3812=(cj0*r02);
IkReal x3813=(gconst29*sj4);
IkReal x3814=(cj4*r22);
IkReal x3815=(cj0*r01);
IkReal x3816=((155.0)*cj4);
IkReal x3817=(cj0*r00);
IkReal x3818=((465.0)*sj0);
IkReal x3819=(gconst28*r20);
IkReal x3820=((2055.0)*x3814);
IkReal x3821=((685.0)*x3814);
IkReal x3822=(r22*sj4*x3805);
IkReal x3823=((2055.0)*r21*x3809);
IkReal x3824=((456.0)*x3822);
IkReal x3825=((2055.0)*r20*x3813);
IkReal x3826=((685.0)*r21*x3809);
IkReal x3827=((152.0)*x3822);
IkReal x3828=((685.0)*r20*x3813);
IkReal x3829=((465.0)*x3809*x3815);
IkReal x3830=(r11*x3809*x3818);
IkReal x3831=(x3823+x3804);
IkReal x3832=((569.0)+x3826+x3806);
IkReal x3833=(x3829+x3830);
IkReal x3834=(x3825+x3824+x3820);
IkReal x3835=(x3827+x3821+x3828);
IkReal x3836=((((465.0)*x3811))+(((465.0)*x3819))+x3834);
IkReal x3837=(((r10*x3813*x3818))+((x3807*x3808))+(((465.0)*x3813*x3817))+((x3807*x3812))+x3834);
j1eval[0]=((1.0)+(((0.00058411214953271)*(IKabs(((569.0)+x3831+(((-1.0)*x3836)))))))+(((0.00058411214953271)*(IKabs(((569.0)+x3831+x3833+(((-1.0)*x3837)))))))+(((0.00058411214953271)*(IKabs(((((-155.0)*x3811))+(((-155.0)*x3819))+x3832+(((-1.0)*x3835)))))))+(((0.00058411214953271)*(IKabs(((((-1.0)*r10*x3810*x3813))+(((-1.0)*x3808*x3816))+(((155.0)*x3809*x3815))+(((-1.0)*x3812*x3816))+x3832+((r11*x3809*x3810))+(((-155.0)*x3813*x3817))+(((-1.0)*x3835)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3831+x3833+(((-1.0)*x3837)))))))+(((0.00058411214953271)*(IKabs(((-569.0)+x3831+(((-1.0)*x3836))))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x3869=IKPowWithIntegerCheck(cj4,-1);
if(!x3869.valid){
continue;
}
IkReal x3839=x3869.value;
IkReal x3840=((569.0)*cj4);
IkReal x3841=cj4*cj4;
IkReal x3842=(cj4*sj4);
IkReal x3843=(gconst28*r21);
IkReal x3844=(cj4*pz);
IkReal x3845=(gconst29*r20);
IkReal x3846=(r22*sj4);
IkReal x3847=((0.002)*x3839);
IkReal x3848=((6000.0)*x3844);
IkReal x3849=((456.0)*x3846);
IkReal x3850=((2000.0)*x3844);
IkReal x3851=((152.0)*x3846);
IkReal x3852=(cj4*gconst29*r21);
IkReal x3853=(r22*x3841);
IkReal x3854=(cj4*gconst28*r20);
IkReal x3855=((2055.0)*x3853);
IkReal x3856=((465.0)*x3852);
IkReal x3857=((465.0)*x3854);
IkReal x3858=((155.0)*x3854);
IkReal x3859=((155.0)*x3852);
IkReal x3860=((685.0)*x3853);
IkReal x3861=((2055.0)*x3842*x3843);
IkReal x3862=((2055.0)*x3842*x3845);
IkReal x3863=((685.0)*x3842*x3843);
IkReal x3864=((685.0)*x3842*x3845);
IkReal x3865=(x3863+x3850);
IkReal x3866=(x3861+x3848);
IkReal x3867=(x3860+x3864+x3851+x3858+x3859);
IkReal x3868=(x3862+x3856+x3857+x3855+x3849);
op[0]=(x3847*(((((-1.0)*x3867))+x3865+x3840)));
op[1]=0.428;
op[2]=(x3847*(((((-1.0)*x3868))+x3866+x3840)));
op[3]=0.856;
op[4]=(x3847*(((((-1.0)*x3868))+x3866+(((-1.0)*x3840)))));
op[5]=0.428;
op[6]=(x3847*(((((-1.0)*x3867))+x3865+(((-1.0)*x3840)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x3870=cj4*cj4;
CheckValue<IkReal> x3916=IKPowWithIntegerCheck(cj4,-1);
if(!x3916.valid){
continue;
}
IkReal x3871=x3916.value;
IkReal x3872=((569.0)*cj4);
IkReal x3873=(cj0*r00);
IkReal x3874=(r10*sj0);
IkReal x3875=(cj4*sj4);
IkReal x3876=((465.0)*cj0);
IkReal x3877=(gconst28*r01);
IkReal x3878=((155.0)*gconst29);
IkReal x3879=((155.0)*cj0);
IkReal x3880=(gconst29*r20);
IkReal x3881=(gconst28*r21);
IkReal x3882=(r22*sj4);
IkReal x3883=((0.002)*x3871);
IkReal x3884=(cj4*pz);
IkReal x3885=((6000.0)*x3884);
IkReal x3886=((456.0)*x3882);
IkReal x3887=((2000.0)*x3884);
IkReal x3888=((152.0)*x3882);
IkReal x3889=(r22*x3870);
IkReal x3890=(r02*x3870);
IkReal x3891=(gconst28*r11*sj0);
IkReal x3892=((2055.0)*x3889);
IkReal x3893=((685.0)*x3889);
IkReal x3894=((465.0)*gconst29*x3875);
IkReal x3895=(r12*sj0*x3870);
IkReal x3896=((2055.0)*x3875*x3881);
IkReal x3897=((465.0)*x3895);
IkReal x3898=((2055.0)*x3875*x3880);
IkReal x3899=(x3876*x3890);
IkReal x3900=((685.0)*x3875*x3881);
IkReal x3901=(x3879*x3890);
IkReal x3902=((155.0)*x3895);
IkReal x3903=((685.0)*x3875*x3880);
IkReal x3904=((465.0)*x3875*x3891);
IkReal x3905=(x3875*x3876*x3877);
IkReal x3906=(x3873*x3894);
IkReal x3907=(x3874*x3894);
IkReal x3908=((155.0)*x3875*x3891);
IkReal x3909=(x3875*x3877*x3879);
IkReal x3910=(x3873*x3875*x3878);
IkReal x3911=(x3874*x3875*x3878);
IkReal x3912=(x3900+x3908+x3909+x3887);
IkReal x3913=(x3904+x3905+x3896+x3885);
IkReal x3914=(x3901+x3902+x3903+x3911+x3910+x3893+x3888);
IkReal x3915=(x3906+x3907+x3898+x3899+x3892+x3897+x3886);
j1evalpoly[0]=(((x3883*(htj1*htj1*htj1*htj1)*(((((-1.0)*x3915))+x3913+x3872))))+((x3883*(htj1*htj1)*(((((-1.0)*x3915))+x3913+(((-1.0)*x3872))))))+(((0.428)*htj1))+((x3883*(htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x3914))+x3912+x3872))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+((x3883*(((((-1.0)*x3914))+x3912+(((-1.0)*x3872)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3917=((1.0)*cj1);
IkReal x3918=(cj4*r22);
IkReal x3919=(gconst29*r21);
IkReal x3920=((1.0)*sj1);
IkReal x3921=(gconst28*r20);
IkReal x3922=(gconst29*r20*sj4);
IkReal x3923=(gconst28*r21*sj4);
if( IKabs(((((-1.0)*x3917*x3919))+((sj1*x3918))+(((-1.0)*x3917*x3921))+(((-1.0)*x3920*x3923))+((sj1*x3922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3917*x3918))+(((-1.0)*x3917*x3922))+(((-1.0)*x3919*x3920))+(((-1.0)*x3920*x3921))+((cj1*x3923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3917*x3919))+((sj1*x3918))+(((-1.0)*x3917*x3921))+(((-1.0)*x3920*x3923))+((sj1*x3922))))+IKsqr(((((-1.0)*x3917*x3918))+(((-1.0)*x3917*x3922))+(((-1.0)*x3919*x3920))+(((-1.0)*x3920*x3921))+((cj1*x3923))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3917*x3919))+((sj1*x3918))+(((-1.0)*x3917*x3921))+(((-1.0)*x3920*x3923))+((sj1*x3922))), ((((-1.0)*x3917*x3918))+(((-1.0)*x3917*x3922))+(((-1.0)*x3919*x3920))+(((-1.0)*x3920*x3921))+((cj1*x3923))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3924=IKcos(j2);
IkReal x3925=IKsin(j2);
IkReal x3926=((1.0)*r21);
IkReal x3927=(gconst28*sj4);
IkReal x3928=((1.0)*cj0);
IkReal x3929=((1.0)*sj1);
IkReal x3930=(gconst29*sj4);
IkReal x3931=(cj0*r00);
IkReal x3932=((1.0)*sj0);
IkReal x3933=(gconst29*sj0);
IkReal x3934=(cj0*r01);
IkReal x3935=(cj1*x3924);
IkReal x3936=(gconst28*r11*sj0);
IkReal x3937=(cj1*x3925);
IkReal x3938=(sj1*x3924);
IkReal x3939=(sj1*x3925);
IkReal x3940=(x3924*x3929);
IkReal x3941=((1.0)*x3937);
IkReal x3942=(x3940+x3941);
evalcond[0]=((((-1.0)*gconst28*r20))+(((-1.0)*x3942))+(((-1.0)*gconst29*x3926)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x3925*x3929))+((r20*x3930))+(((-1.0)*x3926*x3927))+x3935);
evalcond[2]=((((-1.0)*x3935))+((gconst28*r10*sj0))+((gconst29*x3934))+x3939+((gconst28*x3931))+((r11*x3933)));
CheckValue<IkReal> x3943=IKPowWithIntegerCheck(cj4,-1);
if(!x3943.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((0.0775)*x3938))+(((0.0775)*x3937))+(((-0.2845)*cj1))+(((-0.3425)*x3939))+pz+(((0.3425)*x3935))+(((-0.076)*r22*sj4*(x3943.value))));
evalcond[4]=((((-1.0)*r00*x3928*x3930))+(((-1.0)*r10*x3930*x3932))+(((-1.0)*cj4*r12*x3932))+(((-1.0)*cj4*r02*x3928))+(((-1.0)*x3942))+((x3927*x3934))+((r11*sj0*x3927)));
evalcond[5]=((((-0.076)*gconst28*x3934))+(((-0.0775)*x3939))+(((-1.0)*px*x3928))+(((0.2845)*sj1))+(((0.0775)*x3935))+(((0.0535)*cj1))+(((-0.3425)*x3938))+(((-0.3425)*x3937))+(((0.076)*r10*x3933))+(((0.076)*gconst29*x3931))+(((-0.076)*x3936))+(((-1.0)*py*x3932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3944=((0.076)*sj5);
IkReal x3945=((0.076)*cj5);
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(IKsign((((r20*sj4*x3944))+(((-1.0)*rxp2_2*sj4))+((r21*sj4*x3945))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5)))),-1);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947 = IKatan2WithCheck(IkReal(((((-1.0)*py))+(((-1.0)*r11*x3944))+((r10*x3945)))),IkReal((((r00*x3945))+(((-1.0)*r01*x3944))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3947.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3946.value)))+(x3947.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x3948=IKcos(j0);
IkReal x3949=IKsin(j0);
IkReal x3950=((1.0)*r01);
IkReal x3951=(r11*sj5);
IkReal x3952=(cj4*r00);
IkReal x3953=((1.0)*r10);
IkReal x3954=(r01*sj5);
IkReal x3955=(cj5*x3949);
IkReal x3956=(sj4*x3948);
IkReal x3957=(sj4*x3949);
IkReal x3958=(cj5*x3948);
IkReal x3959=(cj4*x3949);
IkReal x3960=(cj4*x3948);
evalcond[0]=((((-1.0)*x3950*x3955))+(((-1.0)*r00*sj5*x3949))+((r11*x3958))+((r10*sj5*x3948)));
evalcond[1]=((((0.076)*x3949*x3954))+(((-1.0)*py*x3948))+(((0.076)*r10*x3958))+(((-0.076)*r00*x3955))+((px*x3949))+(((-0.076)*x3948*x3951)));
evalcond[2]=((((-1.0)*cj4*x3953*x3955))+((x3954*x3960))+(((-1.0)*x3952*x3958))+((r02*x3956))+((x3951*x3959))+((r12*x3957)));
evalcond[3]=(((r00*sj4*x3955))+(((-1.0)*cj5*x3953*x3956))+(((-1.0)*sj5*x3950*x3957))+(((-1.0)*r12*x3960))+((r02*x3959))+((x3951*x3956)));
evalcond[4]=((1.0)+(((-1.0)*cj4*x3953*x3958))+((x3951*x3960))+(((-1.0)*sj5*x3950*x3959))+(((-1.0)*r02*x3957))+((x3952*x3955))+((r12*x3956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3961=((6000.0)*pz);
CheckValue<IkReal> x3989=IKPowWithIntegerCheck(cj4,-1);
if(!x3989.valid){
continue;
}
IkReal x3962=x3989.value;
IkReal x3963=(r20*sj5);
IkReal x3964=((0.304)*sj0);
IkReal x3965=(r11*sj5);
IkReal x3966=(cj0*px);
IkReal x3967=(py*sj0);
IkReal x3968=(cj4*r22);
IkReal x3969=(cj5*r10);
IkReal x3970=(cj5*r21);
IkReal x3971=((0.912)*sj0);
IkReal x3972=((0.912)*cj0);
IkReal x3973=(r01*sj5);
IkReal x3974=(cj5*r00);
IkReal x3975=((0.304)*cj0);
IkReal x3976=((4.11)*x3963);
IkReal x3977=((4.11)*x3970);
IkReal x3978=(cj5*r20*sj4);
IkReal x3979=(r21*sj4*sj5);
IkReal x3980=(r22*sj4*x3962);
IkReal x3981=((2055.0)*x3979);
IkReal x3982=(x3972*x3974);
IkReal x3983=(x3969*x3971);
IkReal x3984=((0.93)*x3979);
IkReal x3985=(x3981+x3961);
IkReal x3986=((((465.0)*x3970))+(((465.0)*x3963))+(((2055.0)*x3978))+(((456.0)*x3980))+(((2055.0)*x3968)));
IkReal x3987=(x3984+x3982+x3983+x3977+x3976);
IkReal x3988=(((x3965*x3971))+(((12.0)*x3966))+(((12.0)*x3967))+(((0.93)*x3978))+(((0.93)*x3968))+((x3972*x3973)));
j1eval[0]=((10.816)+(IKabs(((0.214)+x3987+(((-1.0)*x3988)))))+(IKabs(((-0.214)+x3987+(((-1.0)*x3988)))))+(((0.002)*(IKabs(((569.0)+(((-152.0)*x3980))+(((-685.0)*x3978))+(((-155.0)*x3963))+(((-155.0)*x3970))+(((-685.0)*x3968))+(((685.0)*x3979))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((569.0)+x3985+(((-1.0)*x3986)))))))+(((0.002)*(IKabs(((-569.0)+x3985+(((-1.0)*x3986)))))))+(IKabs(((-0.214)+(((1.37)*x3963))+(((-4.0)*x3966))+(((-4.0)*x3967))+(((1.37)*x3970))+(((0.31)*x3979))+((x3974*x3975))+(((-1.0)*x3973*x3975))+(((-0.31)*x3978))+(((-0.31)*x3968))+((x3964*x3969))+(((-1.0)*x3964*x3965))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4020=IKPowWithIntegerCheck(cj4,-1);
if(!x4020.valid){
continue;
}
IkReal x3990=x4020.value;
IkReal x3991=((569.0)*cj4);
IkReal x3992=cj4*cj4;
IkReal x3993=(cj4*cj5);
IkReal x3994=(cj4*pz);
IkReal x3995=((685.0)*sj4);
IkReal x3996=(r22*sj4);
IkReal x3997=((0.002)*x3990);
IkReal x3998=((2055.0)*sj4);
IkReal x3999=((6000.0)*x3994);
IkReal x4000=((456.0)*x3996);
IkReal x4001=((2000.0)*x3994);
IkReal x4002=((152.0)*x3996);
IkReal x4003=(cj4*r21*sj5);
IkReal x4004=(r22*x3992);
IkReal x4005=(cj4*r20*sj5);
IkReal x4006=((2055.0)*x4004);
IkReal x4007=((465.0)*x4005);
IkReal x4008=((465.0)*r21*x3993);
IkReal x4009=((155.0)*x4005);
IkReal x4010=((155.0)*r21*x3993);
IkReal x4011=((685.0)*x4004);
IkReal x4012=(x3998*x4003);
IkReal x4013=(r20*x3993*x3998);
IkReal x4014=(x3995*x4003);
IkReal x4015=(r20*x3993*x3995);
IkReal x4016=(x4012+x3999);
IkReal x4017=(x4001+x4014);
IkReal x4018=(x4008+x4000+x4006+x4007+x4013);
IkReal x4019=(x4009+x4002+x4011+x4010+x4015);
op[0]=(x3997*((x4017+x3991+(((-1.0)*x4019)))));
op[1]=0.428;
op[2]=(x3997*((x4016+x3991+(((-1.0)*x4018)))));
op[3]=0.856;
op[4]=(x3997*(((((-1.0)*x3991))+x4016+(((-1.0)*x4018)))));
op[5]=0.428;
op[6]=(x3997*(((((-1.0)*x3991))+x4017+(((-1.0)*x4019)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4021=((0.93)*sj4);
IkReal x4022=(cj5*r20);
IkReal x4023=((0.304)*sj0);
IkReal x4024=(cj5*r10);
IkReal x4025=(r11*sj5);
IkReal x4026=(r21*sj5);
IkReal x4027=((0.31)*sj4);
IkReal x4028=(cj0*px);
IkReal x4029=(py*sj0);
IkReal x4030=(r20*sj5);
IkReal x4031=(cj5*r21);
IkReal x4032=(cj4*r22);
IkReal x4033=((0.912)*sj0);
IkReal x4034=((0.912)*cj0);
IkReal x4035=(r01*sj5);
IkReal x4036=(cj5*r00);
IkReal x4037=((0.304)*cj0);
IkReal x4038=((1.37)*x4031);
IkReal x4039=((1.37)*x4030);
IkReal x4040=((4.11)*x4030);
IkReal x4041=((4.11)*x4031);
IkReal x4042=(x4023*x4024);
IkReal x4043=(x4036*x4037);
IkReal x4044=(x4026*x4027);
IkReal x4045=(x4034*x4036);
IkReal x4046=(x4024*x4033);
IkReal x4047=(x4021*x4026);
IkReal x4048=(x4044+x4042+x4043+x4039+x4038);
IkReal x4049=(x4045+x4046+x4047+x4040+x4041);
IkReal x4050=(((x4021*x4022))+(((12.0)*x4028))+(((12.0)*x4029))+((x4034*x4035))+(((0.93)*x4032))+((x4025*x4033)));
IkReal x4051=(((x4035*x4037))+(((0.31)*x4032))+((x4022*x4027))+((x4023*x4025))+(((4.0)*x4029))+(((4.0)*x4028)));
j1evalpoly[0]=((0.214)+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+x4048+(((htj1*htj1*htj1*htj1)*(((-0.214)+x4049+(((-1.0)*x4050))))))+(((2.276)*htj1))+(((-1.0)*x4051))+(((htj1*htj1)*(((0.214)+x4049+(((-1.0)*x4050))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+x4048+(((-1.0)*x4051)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4052=((1.0)*cj1);
IkReal x4053=(cj4*r22);
IkReal x4054=(cj5*r21);
IkReal x4055=((1.0)*sj1);
IkReal x4056=(r20*sj5);
IkReal x4057=(r21*sj4*sj5);
IkReal x4058=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x4055*x4057))+(((-1.0)*x4052*x4054))+(((-1.0)*x4052*x4056))+((sj1*x4058))+((sj1*x4053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4055*x4056))+(((-1.0)*x4052*x4053))+(((-1.0)*x4052*x4058))+(((-1.0)*x4054*x4055))+((cj1*x4057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4055*x4057))+(((-1.0)*x4052*x4054))+(((-1.0)*x4052*x4056))+((sj1*x4058))+((sj1*x4053))))+IKsqr(((((-1.0)*x4055*x4056))+(((-1.0)*x4052*x4053))+(((-1.0)*x4052*x4058))+(((-1.0)*x4054*x4055))+((cj1*x4057))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4055*x4057))+(((-1.0)*x4052*x4054))+(((-1.0)*x4052*x4056))+((sj1*x4058))+((sj1*x4053))), ((((-1.0)*x4055*x4056))+(((-1.0)*x4052*x4053))+(((-1.0)*x4052*x4058))+(((-1.0)*x4054*x4055))+((cj1*x4057))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4059=IKcos(j2);
IkReal x4060=IKsin(j2);
IkReal x4061=(r10*sj0);
IkReal x4062=((0.076)*cj5);
IkReal x4063=(cj0*r00);
IkReal x4064=((0.076)*sj5);
IkReal x4065=(r11*sj0);
IkReal x4066=((1.0)*sj5);
IkReal x4067=((1.0)*cj0);
IkReal x4068=(cj0*r01);
IkReal x4069=((1.0)*sj1);
IkReal x4070=((0.3425)*sj1);
IkReal x4071=(sj4*sj5);
IkReal x4072=((1.0)*sj0);
IkReal x4073=(cj1*x4059);
IkReal x4074=((1.0)*cj5*sj4);
IkReal x4075=(cj1*x4060);
IkReal x4076=(sj1*x4060);
IkReal x4077=(x4059*x4069);
IkReal x4078=((1.0)*x4075);
IkReal x4079=(x4078+x4077);
evalcond[0]=((((-1.0)*r20*x4066))+(((-1.0)*x4079))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*x4060*x4069))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4066))+x4073);
evalcond[2]=((((-1.0)*x4073))+((sj5*x4063))+((sj5*x4061))+x4076+((cj5*x4065))+((cj5*x4068)));
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(cj4,-1);
if(!x4080.valid){
continue;
}
evalcond[3]=((((0.3425)*x4073))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*sj1*x4059))+pz+(((0.0775)*x4075))+(((-1.0)*x4060*x4070))+(((-0.076)*r22*sj4*(x4080.value))));
evalcond[4]=((((-1.0)*cj4*r02*x4067))+((x4065*x4071))+(((-1.0)*x4079))+(((-1.0)*cj4*r12*x4072))+(((-1.0)*x4061*x4074))+((x4068*x4071))+(((-1.0)*x4063*x4074)));
evalcond[5]=(((x4061*x4062))+(((-0.0775)*x4076))+(((0.2845)*sj1))+(((-1.0)*x4064*x4068))+(((-1.0)*x4064*x4065))+(((-1.0)*py*x4072))+(((-0.3425)*x4075))+(((-1.0)*px*x4067))+(((0.0535)*cj1))+((x4062*x4063))+(((0.0775)*x4073))+(((-1.0)*x4059*x4070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4081=(sj4*sj5);
IkReal x4082=((1.0)*cj4);
IkReal x4083=((1.0)*cj5*sj4);
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4082))+((r11*x4081))+(((-1.0)*r10*x4083)))),IkReal((((r01*x4081))+(((-1.0)*r02*x4082))+(((-1.0)*r00*x4083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4085.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4084.value)+(((1.5707963267949)*(x4085.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4086=IKcos(j0);
IkReal x4087=IKsin(j0);
IkReal x4088=((1.0)*r01);
IkReal x4089=(r11*sj5);
IkReal x4090=(cj4*r00);
IkReal x4091=((1.0)*r10);
IkReal x4092=(r01*sj5);
IkReal x4093=(cj5*x4087);
IkReal x4094=(sj4*x4086);
IkReal x4095=(sj4*x4087);
IkReal x4096=(cj5*x4086);
IkReal x4097=(cj4*x4087);
IkReal x4098=(cj4*x4086);
evalcond[0]=(((r10*sj5*x4086))+((r11*x4096))+(((-1.0)*x4088*x4093))+(((-1.0)*r00*sj5*x4087)));
evalcond[1]=(((px*x4087))+(((0.076)*r10*x4096))+(((-0.076)*x4086*x4089))+(((-0.076)*r00*x4093))+(((0.076)*x4087*x4092))+(((-1.0)*py*x4086)));
evalcond[2]=((((-1.0)*cj4*x4091*x4093))+((x4089*x4097))+((r12*x4095))+((r02*x4094))+(((-1.0)*x4090*x4096))+((x4092*x4098)));
evalcond[3]=((((-1.0)*cj5*x4091*x4094))+(((-1.0)*sj5*x4088*x4095))+((x4089*x4094))+((r00*sj4*x4093))+((r02*x4097))+(((-1.0)*r12*x4098)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4095))+(((-1.0)*cj4*x4091*x4096))+(((-1.0)*sj5*x4088*x4097))+((x4089*x4098))+((r12*x4094))+((x4090*x4093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4099=((6000.0)*pz);
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(cj4,-1);
if(!x4127.valid){
continue;
}
IkReal x4100=x4127.value;
IkReal x4101=(r20*sj5);
IkReal x4102=((0.304)*sj0);
IkReal x4103=(r11*sj5);
IkReal x4104=(cj0*px);
IkReal x4105=(py*sj0);
IkReal x4106=(cj4*r22);
IkReal x4107=(cj5*r10);
IkReal x4108=(cj5*r21);
IkReal x4109=((0.912)*sj0);
IkReal x4110=((0.912)*cj0);
IkReal x4111=(r01*sj5);
IkReal x4112=(cj5*r00);
IkReal x4113=((0.304)*cj0);
IkReal x4114=((4.11)*x4101);
IkReal x4115=((4.11)*x4108);
IkReal x4116=(cj5*r20*sj4);
IkReal x4117=(r21*sj4*sj5);
IkReal x4118=(r22*sj4*x4100);
IkReal x4119=((2055.0)*x4117);
IkReal x4120=(x4110*x4112);
IkReal x4121=(x4107*x4109);
IkReal x4122=((0.93)*x4117);
IkReal x4123=(x4099+x4119);
IkReal x4124=((((456.0)*x4118))+(((2055.0)*x4106))+(((465.0)*x4101))+(((465.0)*x4108))+(((2055.0)*x4116)));
IkReal x4125=(x4122+x4121+x4120+x4114+x4115);
IkReal x4126=((((0.93)*x4116))+((x4103*x4109))+(((0.93)*x4106))+(((12.0)*x4105))+(((12.0)*x4104))+((x4110*x4111)));
j1eval[0]=((10.816)+(((0.002)*(IKabs(((569.0)+(((685.0)*x4117))+(((-685.0)*x4116))+(((-155.0)*x4108))+(((-155.0)*x4101))+(((-685.0)*x4106))+(((-152.0)*x4118))+(((2000.0)*pz)))))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x4124))+x4123)))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x4124))+x4123)))))+(IKabs(((0.214)+(((-1.0)*x4126))+x4125)))+(IKabs(((-0.214)+((x4112*x4113))+(((-1.0)*x4111*x4113))+(((1.37)*x4101))+(((1.37)*x4108))+(((-4.0)*x4105))+(((-4.0)*x4104))+(((-0.31)*x4106))+(((-1.0)*x4102*x4103))+(((-0.31)*x4116))+(((0.31)*x4117))+((x4102*x4107)))))+(IKabs(((-0.214)+(((-1.0)*x4126))+x4125))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4158=IKPowWithIntegerCheck(cj4,-1);
if(!x4158.valid){
continue;
}
IkReal x4128=x4158.value;
IkReal x4129=((569.0)*cj4);
IkReal x4130=cj4*cj4;
IkReal x4131=(cj4*cj5);
IkReal x4132=(cj4*pz);
IkReal x4133=((685.0)*sj4);
IkReal x4134=(r22*sj4);
IkReal x4135=((0.002)*x4128);
IkReal x4136=((2055.0)*sj4);
IkReal x4137=((6000.0)*x4132);
IkReal x4138=((456.0)*x4134);
IkReal x4139=((2000.0)*x4132);
IkReal x4140=((152.0)*x4134);
IkReal x4141=(cj4*r21*sj5);
IkReal x4142=(r22*x4130);
IkReal x4143=(cj4*r20*sj5);
IkReal x4144=((2055.0)*x4142);
IkReal x4145=((465.0)*x4143);
IkReal x4146=((465.0)*r21*x4131);
IkReal x4147=((155.0)*x4143);
IkReal x4148=((155.0)*r21*x4131);
IkReal x4149=((685.0)*x4142);
IkReal x4150=(x4136*x4141);
IkReal x4151=(r20*x4131*x4136);
IkReal x4152=(x4133*x4141);
IkReal x4153=(r20*x4131*x4133);
IkReal x4154=(x4150+x4137);
IkReal x4155=(x4152+x4139);
IkReal x4156=(x4151+x4145+x4144+x4146+x4138);
IkReal x4157=(x4153+x4149+x4148+x4147+x4140);
op[0]=(x4135*((x4129+x4155+(((-1.0)*x4157)))));
op[1]=0.428;
op[2]=(x4135*((x4129+x4154+(((-1.0)*x4156)))));
op[3]=0.856;
op[4]=(x4135*(((((-1.0)*x4129))+x4154+(((-1.0)*x4156)))));
op[5]=0.428;
op[6]=(x4135*(((((-1.0)*x4129))+x4155+(((-1.0)*x4157)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4159=((0.93)*sj4);
IkReal x4160=(cj5*r20);
IkReal x4161=((0.304)*sj0);
IkReal x4162=(cj5*r10);
IkReal x4163=(r11*sj5);
IkReal x4164=(r21*sj5);
IkReal x4165=((0.31)*sj4);
IkReal x4166=(cj0*px);
IkReal x4167=(py*sj0);
IkReal x4168=(r20*sj5);
IkReal x4169=(cj5*r21);
IkReal x4170=(cj4*r22);
IkReal x4171=((0.912)*sj0);
IkReal x4172=((0.912)*cj0);
IkReal x4173=(r01*sj5);
IkReal x4174=(cj5*r00);
IkReal x4175=((0.304)*cj0);
IkReal x4176=((1.37)*x4169);
IkReal x4177=((1.37)*x4168);
IkReal x4178=((4.11)*x4168);
IkReal x4179=((4.11)*x4169);
IkReal x4180=(x4161*x4162);
IkReal x4181=(x4174*x4175);
IkReal x4182=(x4164*x4165);
IkReal x4183=(x4172*x4174);
IkReal x4184=(x4162*x4171);
IkReal x4185=(x4159*x4164);
IkReal x4186=(x4181+x4180+x4182+x4176+x4177);
IkReal x4187=(x4183+x4185+x4184+x4178+x4179);
IkReal x4188=((((0.93)*x4170))+((x4163*x4171))+(((12.0)*x4167))+(((12.0)*x4166))+((x4159*x4160))+((x4172*x4173)));
IkReal x4189=(((x4173*x4175))+(((4.0)*x4167))+(((4.0)*x4166))+((x4160*x4165))+((x4161*x4163))+(((0.31)*x4170)));
j1evalpoly[0]=((0.214)+(((-1.0)*x4189))+(((htj1*htj1)*(((0.214)+(((-1.0)*x4188))+x4187))))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4189))+x4186))))+x4186+(((2.276)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4188))+x4187)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4190=((1.0)*cj1);
IkReal x4191=(cj4*r22);
IkReal x4192=(cj5*r21);
IkReal x4193=((1.0)*sj1);
IkReal x4194=(r20*sj5);
IkReal x4195=(r21*sj4*sj5);
IkReal x4196=(cj5*r20*sj4);
if( IKabs((((sj1*x4191))+((sj1*x4196))+(((-1.0)*x4193*x4195))+(((-1.0)*x4190*x4192))+(((-1.0)*x4190*x4194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x4195))+(((-1.0)*x4193*x4194))+(((-1.0)*x4190*x4191))+(((-1.0)*x4190*x4196))+(((-1.0)*x4192*x4193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4191))+((sj1*x4196))+(((-1.0)*x4193*x4195))+(((-1.0)*x4190*x4192))+(((-1.0)*x4190*x4194))))+IKsqr((((cj1*x4195))+(((-1.0)*x4193*x4194))+(((-1.0)*x4190*x4191))+(((-1.0)*x4190*x4196))+(((-1.0)*x4192*x4193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4191))+((sj1*x4196))+(((-1.0)*x4193*x4195))+(((-1.0)*x4190*x4192))+(((-1.0)*x4190*x4194))), (((cj1*x4195))+(((-1.0)*x4193*x4194))+(((-1.0)*x4190*x4191))+(((-1.0)*x4190*x4196))+(((-1.0)*x4192*x4193))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4197=IKcos(j2);
IkReal x4198=IKsin(j2);
IkReal x4199=(r10*sj0);
IkReal x4200=((0.076)*cj5);
IkReal x4201=(cj0*r00);
IkReal x4202=((0.076)*sj5);
IkReal x4203=(r11*sj0);
IkReal x4204=((1.0)*sj5);
IkReal x4205=((1.0)*cj0);
IkReal x4206=(cj0*r01);
IkReal x4207=((1.0)*sj1);
IkReal x4208=((0.3425)*sj1);
IkReal x4209=(sj4*sj5);
IkReal x4210=((1.0)*sj0);
IkReal x4211=(cj1*x4197);
IkReal x4212=((1.0)*cj5*sj4);
IkReal x4213=(cj1*x4198);
IkReal x4214=(sj1*x4198);
IkReal x4215=(x4197*x4207);
IkReal x4216=((1.0)*x4213);
IkReal x4217=(x4215+x4216);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4204))+(((-1.0)*x4217)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4204))+(((-1.0)*x4198*x4207))+x4211);
evalcond[2]=(((sj5*x4199))+((sj5*x4201))+x4214+(((-1.0)*x4211))+((cj5*x4203))+((cj5*x4206)));
CheckValue<IkReal> x4218=IKPowWithIntegerCheck(cj4,-1);
if(!x4218.valid){
continue;
}
evalcond[3]=((((0.0775)*x4213))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*x4198*x4208))+pz+(((0.0775)*sj1*x4197))+(((0.3425)*x4211))+(((-0.076)*r22*sj4*(x4218.value))));
evalcond[4]=((((-1.0)*cj4*r12*x4210))+(((-1.0)*x4199*x4212))+((x4206*x4209))+(((-1.0)*cj4*r02*x4205))+((x4203*x4209))+(((-1.0)*x4201*x4212))+(((-1.0)*x4217)));
evalcond[5]=(((x4199*x4200))+(((-1.0)*x4197*x4208))+(((0.0775)*x4211))+(((0.2845)*sj1))+(((-0.3425)*x4213))+(((-1.0)*px*x4205))+(((0.0535)*cj1))+(((-0.0775)*x4214))+(((-1.0)*py*x4210))+((x4200*x4201))+(((-1.0)*x4202*x4206))+(((-1.0)*x4202*x4203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4219=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+(((-1.0)*cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x4219.valid){
continue;
}
CheckValue<IkReal> x4220 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4220.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4219.value)))+(x4220.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x4221=IKcos(j0);
IkReal x4222=IKsin(j0);
IkReal x4223=((1.0)*r01);
IkReal x4224=(r11*sj5);
IkReal x4225=(cj4*r00);
IkReal x4226=((1.0)*r10);
IkReal x4227=(r01*sj5);
IkReal x4228=(cj5*x4222);
IkReal x4229=(sj4*x4221);
IkReal x4230=(sj4*x4222);
IkReal x4231=(cj5*x4221);
IkReal x4232=(cj4*x4222);
IkReal x4233=(cj4*x4221);
evalcond[0]=((((-1.0)*x4223*x4228))+((r10*sj5*x4221))+(((-1.0)*r00*sj5*x4222))+((r11*x4231)));
evalcond[1]=((((0.076)*r10*x4231))+(((-0.076)*r00*x4228))+(((0.076)*x4222*x4227))+((px*x4222))+(((-0.076)*x4221*x4224))+(((-1.0)*py*x4221)));
evalcond[2]=(((r12*x4230))+((r02*x4229))+((x4227*x4233))+(((-1.0)*cj4*x4226*x4228))+(((-1.0)*x4225*x4231))+((x4224*x4232)));
evalcond[3]=(((x4224*x4229))+((r00*sj4*x4228))+(((-1.0)*sj5*x4223*x4230))+(((-1.0)*r12*x4233))+((r02*x4232))+(((-1.0)*cj5*x4226*x4229)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4230))+(((-1.0)*sj5*x4223*x4232))+(((-1.0)*cj4*x4226*x4231))+((x4225*x4228))+((r12*x4229))+((x4224*x4233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4234=((6000.0)*pz);
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(cj4,-1);
if(!x4262.valid){
continue;
}
IkReal x4235=x4262.value;
IkReal x4236=(r20*sj5);
IkReal x4237=((0.304)*sj0);
IkReal x4238=(r11*sj5);
IkReal x4239=(cj0*px);
IkReal x4240=(py*sj0);
IkReal x4241=(cj4*r22);
IkReal x4242=(cj5*r10);
IkReal x4243=(cj5*r21);
IkReal x4244=((0.912)*sj0);
IkReal x4245=((0.912)*cj0);
IkReal x4246=(r01*sj5);
IkReal x4247=(cj5*r00);
IkReal x4248=((0.304)*cj0);
IkReal x4249=((4.11)*x4236);
IkReal x4250=((4.11)*x4243);
IkReal x4251=(cj5*r20*sj4);
IkReal x4252=(r21*sj4*sj5);
IkReal x4253=(r22*sj4*x4235);
IkReal x4254=((2055.0)*x4252);
IkReal x4255=(x4245*x4247);
IkReal x4256=(x4242*x4244);
IkReal x4257=((0.93)*x4252);
IkReal x4258=(x4254+x4234);
IkReal x4259=((((465.0)*x4236))+(((2055.0)*x4241))+(((465.0)*x4243))+(((456.0)*x4253))+(((2055.0)*x4251)));
IkReal x4260=(x4250+x4255+x4257+x4256+x4249);
IkReal x4261=((((0.93)*x4241))+((x4238*x4244))+(((12.0)*x4240))+(((12.0)*x4239))+(((0.93)*x4251))+((x4245*x4246)));
j1eval[0]=((10.816)+(((0.002)*(IKabs(((569.0)+(((-152.0)*x4253))+(((-155.0)*x4236))+(((685.0)*x4252))+(((-685.0)*x4251))+(((-155.0)*x4243))+(((2000.0)*pz))+(((-685.0)*x4241)))))))+(IKabs(((0.214)+x4260+(((-1.0)*x4261)))))+(IKabs(((-0.214)+(((-4.0)*x4239))+(((0.31)*x4252))+(((1.37)*x4236))+(((1.37)*x4243))+((x4237*x4242))+(((-0.31)*x4241))+(((-1.0)*x4237*x4238))+(((-1.0)*x4246*x4248))+((x4247*x4248))+(((-4.0)*x4240))+(((-0.31)*x4251)))))+(((0.002)*(IKabs(((-569.0)+(((-1.0)*x4259))+x4258)))))+(((0.002)*(IKabs(((569.0)+(((-1.0)*x4259))+x4258)))))+(IKabs(((-0.214)+x4260+(((-1.0)*x4261))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
CheckValue<IkReal> x4293=IKPowWithIntegerCheck(cj4,-1);
if(!x4293.valid){
continue;
}
IkReal x4263=x4293.value;
IkReal x4264=((569.0)*cj4);
IkReal x4265=cj4*cj4;
IkReal x4266=(cj4*cj5);
IkReal x4267=(cj4*pz);
IkReal x4268=((685.0)*sj4);
IkReal x4269=(r22*sj4);
IkReal x4270=((0.002)*x4263);
IkReal x4271=((2055.0)*sj4);
IkReal x4272=((6000.0)*x4267);
IkReal x4273=((456.0)*x4269);
IkReal x4274=((2000.0)*x4267);
IkReal x4275=((152.0)*x4269);
IkReal x4276=(cj4*r21*sj5);
IkReal x4277=(r22*x4265);
IkReal x4278=(cj4*r20*sj5);
IkReal x4279=((2055.0)*x4277);
IkReal x4280=((465.0)*x4278);
IkReal x4281=((465.0)*r21*x4266);
IkReal x4282=((155.0)*x4278);
IkReal x4283=((155.0)*r21*x4266);
IkReal x4284=((685.0)*x4277);
IkReal x4285=(x4271*x4276);
IkReal x4286=(r20*x4266*x4271);
IkReal x4287=(x4268*x4276);
IkReal x4288=(r20*x4266*x4268);
IkReal x4289=(x4285+x4272);
IkReal x4290=(x4287+x4274);
IkReal x4291=(x4280+x4281+x4286+x4273+x4279);
IkReal x4292=(x4282+x4283+x4284+x4288+x4275);
op[0]=(x4270*(((((-1.0)*x4292))+x4290+x4264)));
op[1]=0.428;
op[2]=(x4270*(((((-1.0)*x4291))+x4289+x4264)));
op[3]=0.856;
op[4]=(x4270*(((((-1.0)*x4291))+x4289+(((-1.0)*x4264)))));
op[5]=0.428;
op[6]=(x4270*(((((-1.0)*x4292))+x4290+(((-1.0)*x4264)))));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4294=((0.93)*sj4);
IkReal x4295=(cj5*r20);
IkReal x4296=((0.304)*sj0);
IkReal x4297=(cj5*r10);
IkReal x4298=(r11*sj5);
IkReal x4299=(r21*sj5);
IkReal x4300=((0.31)*sj4);
IkReal x4301=(cj0*px);
IkReal x4302=(py*sj0);
IkReal x4303=(r20*sj5);
IkReal x4304=(cj5*r21);
IkReal x4305=(cj4*r22);
IkReal x4306=((0.912)*sj0);
IkReal x4307=((0.912)*cj0);
IkReal x4308=(r01*sj5);
IkReal x4309=(cj5*r00);
IkReal x4310=((0.304)*cj0);
IkReal x4311=((1.37)*x4304);
IkReal x4312=((1.37)*x4303);
IkReal x4313=((4.11)*x4303);
IkReal x4314=((4.11)*x4304);
IkReal x4315=(x4296*x4297);
IkReal x4316=(x4309*x4310);
IkReal x4317=(x4299*x4300);
IkReal x4318=(x4307*x4309);
IkReal x4319=(x4297*x4306);
IkReal x4320=(x4294*x4299);
IkReal x4321=(x4311+x4312+x4315+x4316+x4317);
IkReal x4322=(x4320+x4313+x4314+x4318+x4319);
IkReal x4323=((((12.0)*x4302))+(((12.0)*x4301))+(((0.93)*x4305))+((x4298*x4306))+((x4307*x4308))+((x4294*x4295)));
IkReal x4324=(((x4295*x4300))+((x4308*x4310))+(((0.31)*x4305))+((x4296*x4298))+(((4.0)*x4301))+(((4.0)*x4302)));
j1evalpoly[0]=((0.214)+(((-1.0)*x4324))+(((4.552)*(htj1*htj1*htj1)))+(((2.276)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4324))+x4321))))+(((htj1*htj1)*(((0.214)+(((-1.0)*x4323))+x4322))))+(((2.276)*htj1))+(((htj1*htj1*htj1*htj1)*(((-0.214)+(((-1.0)*x4323))+x4322))))+x4321);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4325=((1.0)*cj1);
IkReal x4326=(cj4*r22);
IkReal x4327=(cj5*r21);
IkReal x4328=((1.0)*sj1);
IkReal x4329=(r20*sj5);
IkReal x4330=(r21*sj4*sj5);
IkReal x4331=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x4325*x4327))+(((-1.0)*x4325*x4329))+((sj1*x4331))+((sj1*x4326))+(((-1.0)*x4328*x4330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4325*x4331))+(((-1.0)*x4325*x4326))+(((-1.0)*x4327*x4328))+((cj1*x4330))+(((-1.0)*x4328*x4329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4325*x4327))+(((-1.0)*x4325*x4329))+((sj1*x4331))+((sj1*x4326))+(((-1.0)*x4328*x4330))))+IKsqr(((((-1.0)*x4325*x4331))+(((-1.0)*x4325*x4326))+(((-1.0)*x4327*x4328))+((cj1*x4330))+(((-1.0)*x4328*x4329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4325*x4327))+(((-1.0)*x4325*x4329))+((sj1*x4331))+((sj1*x4326))+(((-1.0)*x4328*x4330))), ((((-1.0)*x4325*x4331))+(((-1.0)*x4325*x4326))+(((-1.0)*x4327*x4328))+((cj1*x4330))+(((-1.0)*x4328*x4329))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4332=IKcos(j2);
IkReal x4333=IKsin(j2);
IkReal x4334=(r10*sj0);
IkReal x4335=((0.076)*cj5);
IkReal x4336=(cj0*r00);
IkReal x4337=((0.076)*sj5);
IkReal x4338=(r11*sj0);
IkReal x4339=((1.0)*sj5);
IkReal x4340=((1.0)*cj0);
IkReal x4341=(cj0*r01);
IkReal x4342=((1.0)*sj1);
IkReal x4343=((0.3425)*sj1);
IkReal x4344=(sj4*sj5);
IkReal x4345=((1.0)*sj0);
IkReal x4346=(cj1*x4332);
IkReal x4347=((1.0)*cj5*sj4);
IkReal x4348=(cj1*x4333);
IkReal x4349=(sj1*x4333);
IkReal x4350=(x4332*x4342);
IkReal x4351=((1.0)*x4348);
IkReal x4352=(x4350+x4351);
evalcond[0]=((((-1.0)*r20*x4339))+(((-1.0)*x4352))+(((-1.0)*cj5*r21)));
evalcond[1]=((((-1.0)*x4333*x4342))+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x4339))+x4346);
evalcond[2]=(((cj5*x4338))+((sj5*x4336))+((sj5*x4334))+((cj5*x4341))+x4349+(((-1.0)*x4346)));
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(cj4,-1);
if(!x4353.valid){
continue;
}
evalcond[3]=((((-1.0)*x4333*x4343))+(((0.3425)*x4346))+(((0.0775)*x4348))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*sj1*x4332))+(((-0.076)*r22*sj4*(x4353.value))));
evalcond[4]=((((-1.0)*cj4*r12*x4345))+(((-1.0)*x4352))+((x4338*x4344))+((x4341*x4344))+(((-1.0)*x4336*x4347))+(((-1.0)*cj4*r02*x4340))+(((-1.0)*x4334*x4347)));
evalcond[5]=((((-1.0)*py*x4345))+((x4334*x4335))+(((0.0775)*x4346))+(((0.2845)*sj1))+(((-0.0775)*x4349))+((x4335*x4336))+(((0.0535)*cj1))+(((-0.3425)*x4348))+(((-1.0)*x4337*x4341))+(((-1.0)*px*x4340))+(((-1.0)*x4332*x4343))+(((-1.0)*x4337*x4338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4354=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x4354) < -0.00001)
continue;
IkReal x4355=IKabs(IKsqrt(x4354));
IkReal x4361 = x4354;
if(IKabs(x4361)==0){
continue;
}
IkReal x4356=pow(x4361,-0.5);
IkReal x4357=((13.1578947368421)*x4356);
CheckValue<IkReal> x4362=IKPowWithIntegerCheck(x4355,-1);
if(!x4362.valid){
continue;
}
IkReal x4358=x4362.value;
IkReal x4359=(r22*x4358);
if((((1.0)+(((-1.0)*(x4359*x4359))))) < -0.00001)
continue;
IkReal x4360=IKsqrt(((1.0)+(((-1.0)*(x4359*x4359)))));
if( (x4359) < -1-IKFAST_SINCOS_THRESH || (x4359) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
IkReal gconst0=((IKasin(x4359))+(((-1.0)*(x4363.value))));
IkReal gconst1=((((-1.0)*rxp0_2*x4357*x4359))+((rxp1_2*x4357*x4360)));
IkReal gconst2=((((-1.0)*rxp1_2*x4357*x4359))+(((-1.0)*rxp0_2*x4357*x4360)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4364=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x4364.valid){
continue;
}
if( ((r22*(x4364.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4364.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4365 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4365.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x4364.value))))))+(x4365.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4366=((0.076)*cj3);
IkReal x4367=((1.0)*cj3);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal((((gconst2*r10*x4366))+(((-1.0)*gconst1*r11*x4366))+(((-1.0)*py*x4367)))),IkReal(((((-1.0)*px*x4367))+(((-1.0)*gconst1*r01*x4366))+((gconst2*r00*x4366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(IKsign((((r22*(((((-0.076)*(gconst2*gconst2)))+(((-0.076)*(gconst1*gconst1)))))))+(((-1.0)*gconst1*rxp0_2))+(((-1.0)*gconst2*rxp1_2)))),-1);
if(!x4369.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4368.value)+(((1.5707963267949)*(x4369.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4370=IKcos(j0);
IkReal x4371=IKsin(j0);
IkReal x4372=(cj4*gconst1);
IkReal x4373=((1.0)*sj4);
IkReal x4374=(gconst2*r00);
IkReal x4375=((1.0)*cj4);
IkReal x4376=(gconst1*r01);
IkReal x4377=(r11*x4370);
IkReal x4378=(r02*x4371);
IkReal x4379=((0.076)*x4371);
IkReal x4380=(r12*x4370);
IkReal x4381=((1.0)*x4371);
IkReal x4382=(gconst2*r10*x4370);
evalcond[0]=(cj3+((gconst1*r10*x4370))+(((-1.0)*gconst1*r00*x4381))+(((-1.0)*gconst2*r01*x4381))+((gconst2*x4377)));
evalcond[1]=(((x4376*x4379))+(((-0.076)*gconst1*x4377))+(((-1.0)*py*x4370))+((px*x4371))+(((-1.0)*x4374*x4379))+(((0.076)*x4382)));
evalcond[2]=((((-1.0)*x4371*x4373*x4376))+((gconst1*sj4*x4377))+(((-1.0)*x4373*x4382))+((sj4*x4371*x4374))+(((-1.0)*x4375*x4380))+((cj4*x4378)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*r01*x4372*x4381))+((cj4*x4371*x4374))+((x4372*x4377))+((sj4*x4380))+(((-1.0)*x4373*x4378))+(((-1.0)*x4375*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4383=x4354;
if((x4383) < -0.00001)
continue;
IkReal x4384=IKabs(IKsqrt(x4383));
IkReal x4391 = x4383;
if(IKabs(x4391)==0){
continue;
}
IkReal x4385=pow(x4391,-0.5);
IkReal x4386=((13.1578947368421)*x4385);
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(x4384,-1);
if(!x4392.valid){
continue;
}
IkReal x4387=x4392.value;
IkReal x4388=(r22*x4387);
if((((1.0)+(((-1.0)*(x4388*x4388))))) < -0.00001)
continue;
IkReal x4389=IKsqrt(((1.0)+(((-1.0)*(x4388*x4388)))));
if( (x4388) < -1-IKFAST_SINCOS_THRESH || (x4388) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
IkReal x4390=((IKasin(x4388))+(((-1.0)*(x4393.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4390;
IkReal gconst0=x4390;
IkReal gconst1=((((-1.0)*rxp0_2*x4386*x4388))+((rxp1_2*x4386*x4389)));
IkReal gconst2=((((-1.0)*rxp1_2*x4386*x4388))+(((-1.0)*rxp0_2*x4386*x4389)));
IkReal x4394=((1.138)*cj3);
IkReal x4395=((12.0)*pz);
IkReal x4396=(gconst2*sj4);
IkReal x4397=((0.31)*sj0);
IkReal x4398=((0.93)*sj4);
IkReal x4399=((0.93)*cj4);
IkReal x4400=((1.37)*r20);
IkReal x4401=(gconst2*r20);
IkReal x4402=((4.0)*pz);
IkReal x4403=((0.31)*cj4);
IkReal x4404=(gconst1*r21);
IkReal x4405=((0.912)*cj3);
IkReal x4406=((4.11)*r20);
IkReal x4407=(gconst1*r11);
IkReal x4408=(cj0*r02);
IkReal x4409=(cj0*r00);
IkReal x4410=((0.31)*sj4);
IkReal x4411=((0.304)*cj3);
IkReal x4412=(cj3*x4395);
IkReal x4413=(r22*x4398);
IkReal x4414=((0.912)*x4404);
IkReal x4415=(cj0*gconst1*r01);
IkReal x4416=((4.11)*cj4*r22);
IkReal x4417=((1.37)*cj4*r22);
IkReal x4418=(x4399*x4401);
IkReal x4419=(x4401*x4405);
IkReal x4420=(cj3*x4416);
IkReal x4421=(x4399*x4404);
IkReal x4422=(x4404*x4405);
IkReal x4423=((4.11)*sj4*x4404);
IkReal x4424=(cj3*sj4*x4404);
IkReal x4425=(cj3*x4396*x4406);
IkReal x4426=(cj3*x4423);
IkReal x4427=(sj0*x4398*x4407);
IkReal x4428=(x4398*x4415);
IkReal x4429=(x4419+x4418+x4420+x4425);
IkReal x4430=(x4414+x4428+x4423+x4427+x4395);
IkReal x4431=(x4413+x4412+x4422+x4421+x4426);
IkReal x4432=(x4416+(((0.93)*x4396*x4409))+((r12*sj0*x4399))+(((0.93)*r10*sj0*x4396))+(((0.912)*x4401))+((x4396*x4406))+((x4399*x4408)));
j1eval[0]=((1.712)+(IKabs(((-1.138)+x4430+(((-1.0)*x4432)))))+(IKabs(((((-1.0)*x4394))+((cj3*x4396*x4400))+(((-1.0)*x4403*x4404))+((x4401*x4411))+((x4401*x4403))+(((-1.0)*cj3*x4402))+(((-1.0)*r22*x4410))+(((-1.0)*x4404*x4411))+(((-1.37)*x4424))+((cj3*x4417)))))+(IKabs(((1.138)+x4430+(((-1.0)*x4432)))))+(IKabs((x4429+(((-1.0)*x4431))+x4394)))+(IKabs(((((-1.0)*x4394))+x4429+(((-1.0)*x4431)))))+(((1.712)*(IKabs(cj3))))+(IKabs(((1.138)+(((-1.0)*r10*x4396*x4397))+(((-0.31)*x4396*x4409))+((x4410*x4415))+x4402+(((-1.0)*x4403*x4408))+(((0.304)*x4404))+(((-1.0)*x4396*x4400))+(((1.37)*sj4*x4404))+(((-1.0)*x4417))+((sj4*x4397*x4407))+(((-1.0)*cj4*r12*x4397))+(((-0.304)*x4401))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4433=((1.138)*cj3);
IkReal x4434=(r22*sj4);
IkReal x4435=(gconst2*r20);
IkReal x4436=((0.31)*cj4);
IkReal x4437=((0.304)*cj3);
IkReal x4438=(gconst1*r21);
IkReal x4439=((0.912)*cj3);
IkReal x4440=(cj3*sj4);
IkReal x4441=((0.93)*cj4);
IkReal x4442=(cj3*pz);
IkReal x4443=((12.0)*x4442);
IkReal x4444=((0.93)*x4434);
IkReal x4445=((-0.428)*cj3);
IkReal x4446=((0.31)*x4434);
IkReal x4447=((4.0)*x4442);
IkReal x4448=(cj3*cj4*r22);
IkReal x4449=(x4435*x4441);
IkReal x4450=(x4435*x4439);
IkReal x4451=((4.11)*x4448);
IkReal x4452=(x4438*x4441);
IkReal x4453=(x4438*x4439);
IkReal x4454=((1.37)*x4448);
IkReal x4455=(x4435*x4436);
IkReal x4456=(x4435*x4437);
IkReal x4457=(x4436*x4438);
IkReal x4458=(x4437*x4438);
IkReal x4459=(x4438*x4440);
IkReal x4460=((4.11)*x4435*x4440);
IkReal x4461=((4.11)*x4459);
IkReal x4462=((1.37)*x4435*x4440);
IkReal x4463=((1.37)*x4459);
IkReal x4464=(x4456+x4455+x4454+x4462);
IkReal x4465=(x4449+x4451+x4450+x4460);
IkReal x4466=(x4443+x4444+x4453+x4452+x4461);
IkReal x4467=(x4446+x4447+x4457+x4458+x4463);
op[0]=(x4464+(((-1.0)*x4433))+(((-1.0)*x4467)));
op[1]=x4445;
op[2]=(x4465+(((-1.0)*x4433))+(((-1.0)*x4466)));
op[3]=((-0.856)*cj3);
op[4]=(x4433+x4465+(((-1.0)*x4466)));
op[5]=x4445;
op[6]=(x4433+x4464+(((-1.0)*x4467)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4468=((4.0)*pz);
IkReal x4469=((12.0)*pz);
IkReal x4470=(gconst2*sj4);
IkReal x4471=((0.31)*sj0);
IkReal x4472=((0.93)*cj4);
IkReal x4473=(cj0*r02);
IkReal x4474=(gconst1*r21);
IkReal x4475=(gconst1*sj4);
IkReal x4476=((0.93)*cj0);
IkReal x4477=((0.93)*sj0);
IkReal x4478=(cj4*r22);
IkReal x4479=((0.31)*cj0);
IkReal x4480=(gconst2*r20);
IkReal x4481=((0.304)*x4474);
IkReal x4482=((0.912)*x4474);
IkReal x4483=((4.11)*sj4*x4474);
IkReal x4484=((1.37)*sj4*x4474);
IkReal x4485=(r11*x4471*x4475);
IkReal x4486=(r11*x4475*x4477);
IkReal x4487=(r01*x4475*x4476);
IkReal x4488=(r01*x4475*x4479);
IkReal x4489=(x4486+x4487+x4482+x4483+x4469);
IkReal x4490=(x4484+x4485+x4481+x4488+x4468);
IkReal x4491=(((r10*x4470*x4477))+(((4.11)*r20*x4470))+(((4.11)*x4478))+((r00*x4470*x4476))+((r12*sj0*x4472))+((x4472*x4473))+(((0.912)*x4480)));
IkReal x4492=((((1.37)*r20*x4470))+((r10*x4470*x4471))+(((1.37)*x4478))+(((0.31)*cj4*x4473))+((r00*x4470*x4479))+(((0.304)*x4480))+((cj4*r12*x4471)));
j1evalpoly[0]=((-1.138)+x4490+(((0.428)*htj1))+(((htj1*htj1)*(((-1.138)+x4489+(((-1.0)*x4491))))))+(((htj1*htj1*htj1*htj1)*(((1.138)+x4489+(((-1.0)*x4491))))))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x4492))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+x4490+(((-1.0)*x4492)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4493=x4354;
if((x4493) < -0.00001)
continue;
IkReal x4494=IKabs(IKsqrt(x4493));
IkReal x4501 = x4493;
if(IKabs(x4501)==0){
continue;
}
IkReal x4495=pow(x4501,-0.5);
IkReal x4496=((13.1578947368421)*x4495);
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(x4494,-1);
if(!x4502.valid){
continue;
}
IkReal x4497=x4502.value;
IkReal x4498=(r22*x4497);
if((((1.0)+(((-1.0)*(x4498*x4498))))) < -0.00001)
continue;
IkReal x4499=IKsqrt(((1.0)+(((-1.0)*(x4498*x4498)))));
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
if( (x4498) < -1-IKFAST_SINCOS_THRESH || (x4498) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4500=((((-1.0)*(x4503.value)))+(IKasin(x4498)));
sj5=gconst1;
cj5=gconst2;
j5=x4500;
IkReal gconst0=x4500;
IkReal gconst1=(((rxp1_2*x4496*x4499))+(((-1.0)*rxp0_2*x4496*x4498)));
IkReal gconst2=((((-1.0)*rxp0_2*x4496*x4499))+(((-1.0)*rxp1_2*x4496*x4498)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4504=x4354;
if((x4504) < -0.00001)
continue;
IkReal x4505=IKabs(IKsqrt(x4504));
IkReal x4512 = x4504;
if(IKabs(x4512)==0){
continue;
}
IkReal x4506=pow(x4512,-0.5);
IkReal x4507=((13.1578947368421)*x4506);
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(x4505,-1);
if(!x4513.valid){
continue;
}
IkReal x4508=x4513.value;
IkReal x4509=(r22*x4508);
if((((1.0)+(((-1.0)*(x4509*x4509))))) < -0.00001)
continue;
IkReal x4510=IKsqrt(((1.0)+(((-1.0)*(x4509*x4509)))));
if( (x4509) < -1-IKFAST_SINCOS_THRESH || (x4509) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
IkReal x4511=((IKasin(x4509))+(((-1.0)*(x4514.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4511;
IkReal gconst0=x4511;
IkReal gconst1=(((rxp1_2*x4507*x4510))+(((-1.0)*rxp0_2*x4507*x4509)));
IkReal gconst2=((((-1.0)*rxp0_2*x4507*x4510))+(((-1.0)*rxp1_2*x4507*x4509)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4515=x4354;
if((x4515) < -0.00001)
continue;
IkReal x4516=IKabs(IKsqrt(x4515));
IkReal x4523 = x4515;
if(IKabs(x4523)==0){
continue;
}
IkReal x4517=pow(x4523,-0.5);
IkReal x4518=((13.1578947368421)*x4517);
CheckValue<IkReal> x4524=IKPowWithIntegerCheck(x4516,-1);
if(!x4524.valid){
continue;
}
IkReal x4519=x4524.value;
IkReal x4520=(r22*x4519);
if((((1.0)+(((-1.0)*(x4520*x4520))))) < -0.00001)
continue;
IkReal x4521=IKsqrt(((1.0)+(((-1.0)*(x4520*x4520)))));
if( (x4520) < -1-IKFAST_SINCOS_THRESH || (x4520) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
IkReal x4522=((IKasin(x4520))+(((-1.0)*(x4525.value))));
sj5=gconst1;
cj5=gconst2;
j5=x4522;
IkReal gconst0=x4522;
IkReal gconst1=((((-1.0)*rxp0_2*x4518*x4520))+((rxp1_2*x4518*x4521)));
IkReal gconst2=((((-1.0)*rxp0_2*x4518*x4521))+(((-1.0)*rxp1_2*x4518*x4520)));
IkReal x4526=(cj3*sj3);
j2eval[0]=x4526;
j2eval[1]=IKsign(x4526);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4527=(gconst2*r21);
IkReal x4528=(cj4*r22);
IkReal x4529=((1.0)*cj1);
IkReal x4530=(r20*sj1);
IkReal x4531=(gconst2*sj4);
IkReal x4532=(gconst1*r21*sj4);
if( IKabs((((cj1*x4527))+((x4530*x4531))+((sj1*x4528))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x4527))+((gconst1*x4530))+(((-1.0)*x4528*x4529))+(((-1.0)*r20*x4529*x4531))+((cj1*x4532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x4527))+((x4530*x4531))+((sj1*x4528))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4532))))+IKsqr((((sj1*x4527))+((gconst1*x4530))+(((-1.0)*x4528*x4529))+(((-1.0)*r20*x4529*x4531))+((cj1*x4532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x4527))+((x4530*x4531))+((sj1*x4528))+((cj1*gconst1*r20))+(((-1.0)*sj1*x4532))), (((sj1*x4527))+((gconst1*x4530))+(((-1.0)*x4528*x4529))+(((-1.0)*r20*x4529*x4531))+((cj1*x4532))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4533=IKcos(j2);
IkReal x4534=IKsin(j2);
IkReal x4535=(r11*sj0);
IkReal x4536=(cj0*r01);
IkReal x4537=(gconst1*sj4);
IkReal x4538=((1.0)*cj0);
IkReal x4539=((1.0)*sj1);
IkReal x4540=(gconst2*sj4);
IkReal x4541=(r10*sj0);
IkReal x4542=((0.076)*gconst2);
IkReal x4543=((0.076)*gconst1);
IkReal x4544=((1.0)*sj0);
IkReal x4545=((0.3425)*sj1);
IkReal x4546=(cj0*r00);
IkReal x4547=((1.0)*r21);
IkReal x4548=(cj1*x4533);
IkReal x4549=(cj1*x4534);
IkReal x4550=(sj1*x4533);
IkReal x4551=(x4534*x4539);
evalcond[0]=(x4550+x4549+(((-1.0)*gconst2*x4547))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+x4548+(((-1.0)*x4551))+(((-1.0)*x4537*x4547))+((r20*x4540)));
evalcond[2]=(x4548+(((-1.0)*x4551))+((gconst2*x4536))+((gconst2*x4535))+((gconst1*x4546))+((gconst1*x4541)));
evalcond[3]=((((0.3425)*x4548))+(((0.0775)*x4550))+(((-1.0)*x4534*x4545))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*r20*x4542))+pz+((r21*x4543))+(((0.0775)*x4549)));
evalcond[4]=((((-1.0)*r00*x4538*x4540))+(((-1.0)*cj4*r12*x4544))+((x4536*x4537))+(((-1.0)*x4549))+(((-1.0)*x4533*x4539))+(((-1.0)*cj4*r02*x4538))+((x4535*x4537))+(((-1.0)*x4540*x4541)));
evalcond[5]=((((-1.0)*px*x4538))+(((-1.0)*x4533*x4545))+(((0.2845)*sj1))+(((-0.3425)*x4549))+((x4542*x4546))+(((-1.0)*x4535*x4543))+(((-1.0)*x4536*x4543))+(((-1.0)*py*x4544))+(((0.0535)*cj1))+(((0.0775)*x4548))+((x4541*x4542))+(((-0.0775)*sj1*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4552=((1.0)*r22);
IkReal x4553=(cj1*cj4);
IkReal x4554=(gconst2*r20);
IkReal x4555=(cj4*sj1);
IkReal x4556=(sj1*sj4);
IkReal x4557=(cj1*sj4);
IkReal x4558=((1.0)*gconst1*r21);
if( IKabs(((((-1.0)*x4556*x4558))+((x4553*x4554))+(((-1.0)*x4553*x4558))+(((-1.0)*x4552*x4557))+((r22*x4555))+((x4554*x4556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4552*x4556))+(((-1.0)*x4552*x4553))+(((-1.0)*x4555*x4558))+((gconst1*r21*x4557))+((x4554*x4555))+(((-1.0)*x4554*x4557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4556*x4558))+((x4553*x4554))+(((-1.0)*x4553*x4558))+(((-1.0)*x4552*x4557))+((r22*x4555))+((x4554*x4556))))+IKsqr(((((-1.0)*x4552*x4556))+(((-1.0)*x4552*x4553))+(((-1.0)*x4555*x4558))+((gconst1*r21*x4557))+((x4554*x4555))+(((-1.0)*x4554*x4557))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4556*x4558))+((x4553*x4554))+(((-1.0)*x4553*x4558))+(((-1.0)*x4552*x4557))+((r22*x4555))+((x4554*x4556))), ((((-1.0)*x4552*x4556))+(((-1.0)*x4552*x4553))+(((-1.0)*x4555*x4558))+((gconst1*r21*x4557))+((x4554*x4555))+(((-1.0)*x4554*x4557))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4559=IKcos(j2);
IkReal x4560=IKsin(j2);
IkReal x4561=(gconst1*sj4);
IkReal x4562=(cj0*r01);
IkReal x4563=((1.0)*cj4);
IkReal x4564=(gconst1*r21);
IkReal x4565=(cj0*r02);
IkReal x4566=(gconst2*r20);
IkReal x4567=((1.0)*sj1);
IkReal x4568=(r11*sj0);
IkReal x4569=((1.0)*sj4);
IkReal x4570=(cj4*gconst1);
IkReal x4571=((0.076)*gconst1);
IkReal x4572=((0.3425)*sj1);
IkReal x4573=(r12*sj0);
IkReal x4574=(cj1*x4559);
IkReal x4575=(gconst2*r10*sj0);
IkReal x4576=(cj0*gconst2*r00);
IkReal x4577=(cj1*x4560);
IkReal x4578=(sj1*x4560);
IkReal x4579=(x4559*x4567);
IkReal x4580=((1.0)*x4577);
IkReal x4581=(x4580+x4579);
evalcond[0]=(((cj4*r22))+((sj4*x4566))+x4574+(((-1.0)*r21*x4561))+(((-1.0)*x4560*x4567)));
evalcond[1]=((((-1.0)*x4581))+((cj4*x4566))+(((-1.0)*r22*x4569))+(((-1.0)*x4563*x4564)));
evalcond[2]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.076)*x4566))+(((0.0775)*sj1*x4559))+(((0.076)*x4564))+pz+(((0.3425)*x4574))+(((-1.0)*x4560*x4572))+(((0.0775)*x4577)));
evalcond[3]=(((sj4*x4565))+x4578+((sj4*x4573))+((x4568*x4570))+(((-1.0)*x4574))+(((-1.0)*x4563*x4575))+(((-1.0)*x4563*x4576))+((x4562*x4570)));
evalcond[4]=((((-1.0)*x4581))+(((-1.0)*x4569*x4576))+(((-1.0)*x4569*x4575))+((x4561*x4562))+((x4561*x4568))+(((-1.0)*x4563*x4565))+(((-1.0)*x4563*x4573)));
evalcond[5]=((((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.0775)*x4578))+(((0.076)*x4575))+(((0.076)*x4576))+(((-1.0)*x4568*x4571))+(((-0.3425)*x4577))+(((-1.0)*py*sj0))+(((-1.0)*x4562*x4571))+(((-1.0)*x4559*x4572))+(((0.0775)*x4574))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4582=((1.0)*cj1);
IkReal x4583=(cj4*r22);
IkReal x4584=(sj1*sj4);
IkReal x4585=(gconst2*r20);
IkReal x4586=(gconst2*r21);
IkReal x4587=(gconst1*r21);
IkReal x4588=(gconst1*r20);
IkReal x4589=((1.0)*sj1);
if( IKabs((((sj1*x4583))+(((-1.0)*x4584*x4587))+((x4584*x4585))+(((-1.0)*x4582*x4586))+(((-1.0)*x4582*x4588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*sj4*x4587))+(((-1.0)*x4586*x4589))+(((-1.0)*x4588*x4589))+(((-1.0)*x4582*x4583))+(((-1.0)*sj4*x4582*x4585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x4583))+(((-1.0)*x4584*x4587))+((x4584*x4585))+(((-1.0)*x4582*x4586))+(((-1.0)*x4582*x4588))))+IKsqr((((cj1*sj4*x4587))+(((-1.0)*x4586*x4589))+(((-1.0)*x4588*x4589))+(((-1.0)*x4582*x4583))+(((-1.0)*sj4*x4582*x4585))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x4583))+(((-1.0)*x4584*x4587))+((x4584*x4585))+(((-1.0)*x4582*x4586))+(((-1.0)*x4582*x4588))), (((cj1*sj4*x4587))+(((-1.0)*x4586*x4589))+(((-1.0)*x4588*x4589))+(((-1.0)*x4582*x4583))+(((-1.0)*sj4*x4582*x4585))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4590=IKcos(j2);
IkReal x4591=IKsin(j2);
IkReal x4592=(r11*sj0);
IkReal x4593=(cj0*r01);
IkReal x4594=(gconst1*sj4);
IkReal x4595=((1.0)*cj0);
IkReal x4596=((1.0)*sj1);
IkReal x4597=(gconst2*sj4);
IkReal x4598=(r10*sj0);
IkReal x4599=((0.076)*gconst2);
IkReal x4600=((0.076)*gconst1);
IkReal x4601=((1.0)*r21);
IkReal x4602=((1.0)*sj0);
IkReal x4603=((0.3425)*sj1);
IkReal x4604=(cj0*r00);
IkReal x4605=(cj1*x4590);
IkReal x4606=(cj1*x4591);
IkReal x4607=(sj1*x4591);
IkReal x4608=(x4590*x4596);
IkReal x4609=((1.0)*x4606);
IkReal x4610=(x4608+x4609);
evalcond[0]=((((-1.0)*gconst2*x4601))+(((-1.0)*x4610))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4594*x4601))+x4605+(((-1.0)*x4591*x4596))+((r20*x4597)));
evalcond[2]=(((gconst1*x4604))+(((-1.0)*x4605))+((gconst1*x4598))+x4607+((gconst2*x4593))+((gconst2*x4592)));
evalcond[3]=((((0.0775)*sj1*x4590))+((r21*x4600))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-1.0)*x4591*x4603))+(((0.3425)*x4605))+(((-1.0)*r20*x4599))+(((0.0775)*x4606)));
evalcond[4]=(((x4593*x4594))+(((-1.0)*cj4*r02*x4595))+(((-1.0)*r00*x4595*x4597))+(((-1.0)*x4610))+(((-1.0)*cj4*r12*x4602))+(((-1.0)*x4597*x4598))+((x4592*x4594)));
evalcond[5]=((((-1.0)*x4590*x4603))+(((-1.0)*px*x4595))+((x4599*x4604))+(((-1.0)*x4593*x4600))+((x4598*x4599))+(((0.2845)*sj1))+(((-1.0)*x4592*x4600))+(((-0.3425)*x4606))+(((0.0535)*cj1))+(((-0.0775)*x4607))+(((0.0775)*x4605))+(((-1.0)*py*x4602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4611=(cj1*gconst1);
IkReal x4612=(sj1*sj3);
IkReal x4613=(r22*sj4);
IkReal x4614=(gconst1*sj1);
IkReal x4615=(cj0*cj3);
IkReal x4616=(cj4*r20);
IkReal x4617=(gconst2*sj1);
IkReal x4618=(cj4*r21*sj3);
IkReal x4619=(cj3*r10*sj0);
IkReal x4620=((1.0)*cj1*gconst2);
IkReal x4621=(cj3*r11*sj0);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x4616*x4620))+((r01*x4615*x4617))+((x4611*x4618))+((x4614*x4619))+((x4617*x4621))+((r00*x4614*x4615))+((cj1*sj3*x4613)))),IkReal(((((-1.0)*x4611*x4619))+(((-1.0)*r01*x4615*x4620))+((cj4*gconst1*r21*x4612))+(((-1.0)*x4620*x4621))+(((-1.0)*gconst2*x4612*x4616))+(((-1.0)*r00*x4611*x4615))+((x4612*x4613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
CheckValue<IkReal> x4623=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4623.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4622.value)+(((1.5707963267949)*(x4623.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4624=IKcos(j2);
IkReal x4625=IKsin(j2);
IkReal x4626=(gconst2*sj0);
IkReal x4627=(cj3*sj1);
IkReal x4628=(cj0*r01);
IkReal x4629=(gconst1*sj4);
IkReal x4630=((1.0)*cj4);
IkReal x4631=(gconst1*r21);
IkReal x4632=(gconst2*r20);
IkReal x4633=(r12*sj0);
IkReal x4634=(r11*sj0);
IkReal x4635=((1.0)*sj4);
IkReal x4636=(cj0*r02);
IkReal x4637=(cj4*gconst1);
IkReal x4638=((0.076)*gconst1);
IkReal x4639=((1.0)*r21);
IkReal x4640=(cj1*x4624);
IkReal x4641=((1.0)*x4625);
IkReal x4642=(sj1*x4624);
IkReal x4643=(cj0*gconst2*r00);
IkReal x4644=(cj1*x4625);
IkReal x4645=(sj1*x4625);
evalcond[0]=(((sj3*x4642))+((sj3*x4644))+(((-1.0)*gconst1*r20))+(((-1.0)*gconst2*x4639)));
evalcond[1]=(((cj4*r22))+((sj4*x4632))+x4640+(((-1.0)*x4629*x4639))+(((-1.0)*sj1*x4641)));
evalcond[2]=(((x4624*x4627))+((cj4*x4632))+((cj3*x4644))+(((-1.0)*x4630*x4631))+(((-1.0)*r22*x4635)));
evalcond[3]=(((r11*x4626))+(((-1.0)*sj1*sj3*x4641))+((gconst2*x4628))+((gconst1*r10*sj0))+((cj0*gconst1*r00))+((sj3*x4640)));
evalcond[4]=((((0.3425)*x4640))+(((-0.3425)*x4645))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x4642))+(((0.0775)*x4644))+pz+(((-0.076)*x4632))+(((0.076)*x4631)));
evalcond[5]=(((sj4*x4633))+((sj4*x4636))+((cj3*x4640))+(((-1.0)*x4630*x4643))+(((-1.0)*r10*x4626*x4630))+((x4634*x4637))+(((-1.0)*x4627*x4641))+((x4628*x4637)));
evalcond[6]=((((-1.0)*cj1*x4641))+(((-1.0)*r10*x4626*x4635))+(((-1.0)*x4642))+(((-1.0)*x4630*x4636))+(((-1.0)*x4630*x4633))+((x4629*x4634))+((x4628*x4629))+(((-1.0)*x4635*x4643)));
evalcond[7]=((((0.076)*x4643))+(((-0.3425)*x4642))+(((-0.3425)*x4644))+(((-0.0775)*x4645))+(((-1.0)*x4634*x4638))+(((0.2845)*sj1))+(((-1.0)*x4628*x4638))+(((0.0775)*x4640))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*r10*x4626))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4646=(cj1*cj3);
IkReal x4647=(cj4*r22);
IkReal x4648=(gconst1*r21);
IkReal x4649=(cj3*sj1);
IkReal x4650=(r22*sj4);
IkReal x4651=(cj4*sj1);
IkReal x4652=(gconst2*r20);
IkReal x4653=((1.0)*sj4);
IkReal x4654=(cj1*cj4);
CheckValue<IkReal> x4655=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x4655.valid){
continue;
}
CheckValue<IkReal> x4656 = IKatan2WithCheck(IkReal((((sj4*x4649*x4652))+(((-1.0)*x4648*x4649*x4653))+((x4647*x4649))+((x4648*x4654))+((cj1*x4650))+(((-1.0)*x4652*x4654)))),IkReal(((((-1.0)*x4646*x4647))+(((-1.0)*x4646*x4652*x4653))+((x4648*x4651))+((sj4*x4646*x4648))+((sj1*x4650))+(((-1.0)*x4651*x4652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4656.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4655.value)))+(x4656.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4657=IKcos(j2);
IkReal x4658=IKsin(j2);
IkReal x4659=(gconst2*sj0);
IkReal x4660=(cj3*sj1);
IkReal x4661=(cj0*r01);
IkReal x4662=(gconst1*sj4);
IkReal x4663=((1.0)*cj4);
IkReal x4664=(gconst1*r21);
IkReal x4665=(gconst2*r20);
IkReal x4666=(r12*sj0);
IkReal x4667=(r11*sj0);
IkReal x4668=((1.0)*sj4);
IkReal x4669=(cj0*r02);
IkReal x4670=(cj4*gconst1);
IkReal x4671=((0.076)*gconst1);
IkReal x4672=((1.0)*r21);
IkReal x4673=(cj1*x4657);
IkReal x4674=((1.0)*x4658);
IkReal x4675=(sj1*x4657);
IkReal x4676=(cj0*gconst2*r00);
IkReal x4677=(cj1*x4658);
IkReal x4678=(sj1*x4658);
evalcond[0]=(((sj3*x4675))+((sj3*x4677))+(((-1.0)*gconst2*x4672))+(((-1.0)*gconst1*r20)));
evalcond[1]=((((-1.0)*x4662*x4672))+((cj4*r22))+x4673+((sj4*x4665))+(((-1.0)*sj1*x4674)));
evalcond[2]=((((-1.0)*x4663*x4664))+((cj3*x4677))+(((-1.0)*r22*x4668))+((cj4*x4665))+((x4657*x4660)));
evalcond[3]=(((sj3*x4673))+((r11*x4659))+(((-1.0)*sj1*sj3*x4674))+((gconst2*x4661))+((gconst1*r10*sj0))+((cj0*gconst1*r00)));
evalcond[4]=((((-0.3425)*x4678))+(((0.3425)*x4673))+(((0.076)*x4664))+(((0.0535)*sj1))+(((0.0775)*x4677))+(((0.0775)*x4675))+(((-0.2845)*cj1))+(((-0.076)*x4665))+pz);
evalcond[5]=(((x4667*x4670))+(((-1.0)*x4663*x4676))+(((-1.0)*x4660*x4674))+((cj3*x4673))+((x4661*x4670))+((sj4*x4666))+((sj4*x4669))+(((-1.0)*r10*x4659*x4663)));
evalcond[6]=((((-1.0)*cj1*x4674))+(((-1.0)*x4663*x4669))+(((-1.0)*x4663*x4666))+((x4662*x4667))+(((-1.0)*x4675))+((x4661*x4662))+(((-1.0)*x4668*x4676))+(((-1.0)*r10*x4659*x4668)));
evalcond[7]=((((-0.3425)*x4677))+(((-0.3425)*x4675))+(((0.076)*x4676))+(((-1.0)*x4661*x4671))+(((-0.0775)*x4678))+(((0.2845)*sj1))+(((0.0775)*x4673))+(((-1.0)*x4667*x4671))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*r10*x4659))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4679=(cj1*r21);
IkReal x4680=(sj3*sj4);
IkReal x4681=(gconst2*r20);
IkReal x4682=((1.0)*cj1);
IkReal x4683=(r21*sj1);
IkReal x4684=(gconst1*r20);
IkReal x4685=(cj4*r22*sj3);
CheckValue<IkReal> x4686=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x4686.valid){
continue;
}
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal((((sj1*x4680*x4681))+((gconst2*x4679))+(((-1.0)*gconst1*x4680*x4683))+((sj1*x4685))+((cj1*x4684)))),IkReal(((((-1.0)*x4682*x4685))+((gconst1*x4679*x4680))+((gconst2*x4683))+(((-1.0)*x4680*x4681*x4682))+((sj1*x4684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4686.value)))+(x4687.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4688=IKcos(j2);
IkReal x4689=IKsin(j2);
IkReal x4690=(gconst2*sj0);
IkReal x4691=(cj3*sj1);
IkReal x4692=(cj0*r01);
IkReal x4693=(gconst1*sj4);
IkReal x4694=((1.0)*cj4);
IkReal x4695=(gconst1*r21);
IkReal x4696=(gconst2*r20);
IkReal x4697=(r12*sj0);
IkReal x4698=(r11*sj0);
IkReal x4699=((1.0)*sj4);
IkReal x4700=(cj0*r02);
IkReal x4701=(cj4*gconst1);
IkReal x4702=((0.076)*gconst1);
IkReal x4703=((1.0)*r21);
IkReal x4704=(cj1*x4688);
IkReal x4705=((1.0)*x4689);
IkReal x4706=(sj1*x4688);
IkReal x4707=(cj0*gconst2*r00);
IkReal x4708=(cj1*x4689);
IkReal x4709=(sj1*x4689);
evalcond[0]=((((-1.0)*gconst2*x4703))+((sj3*x4706))+((sj3*x4708))+(((-1.0)*gconst1*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x4693*x4703))+x4704+(((-1.0)*sj1*x4705))+((sj4*x4696)));
evalcond[2]=(((cj3*x4708))+(((-1.0)*x4694*x4695))+(((-1.0)*r22*x4699))+((cj4*x4696))+((x4688*x4691)));
evalcond[3]=((((-1.0)*sj1*sj3*x4705))+((gconst2*x4692))+((sj3*x4704))+((gconst1*r10*sj0))+((r11*x4690))+((cj0*gconst1*r00)));
evalcond[4]=((((-0.076)*x4696))+(((0.0535)*sj1))+(((0.3425)*x4704))+(((0.076)*x4695))+(((0.0775)*x4706))+(((0.0775)*x4708))+(((-0.2845)*cj1))+pz+(((-0.3425)*x4709)));
evalcond[5]=(((cj3*x4704))+((sj4*x4700))+((x4698*x4701))+(((-1.0)*x4694*x4707))+(((-1.0)*r10*x4690*x4694))+(((-1.0)*x4691*x4705))+((sj4*x4697))+((x4692*x4701)));
evalcond[6]=((((-1.0)*x4706))+((x4693*x4698))+(((-1.0)*x4694*x4700))+(((-1.0)*cj1*x4705))+(((-1.0)*r10*x4690*x4699))+(((-1.0)*x4694*x4697))+(((-1.0)*x4699*x4707))+((x4692*x4693)));
evalcond[7]=((((-0.0775)*x4709))+(((0.076)*r10*x4690))+(((0.076)*x4707))+(((0.2845)*sj1))+(((0.0775)*x4704))+(((-1.0)*x4698*x4702))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x4706))+(((-0.3425)*x4708))+(((-1.0)*cj0*px))+(((-1.0)*x4692*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4710=((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))));
if((x4710) < -0.00001)
continue;
IkReal x4711=IKabs(IKsqrt(x4710));
IkReal x4717 = x4710;
if(IKabs(x4717)==0){
continue;
}
IkReal x4712=pow(x4717,-0.5);
IkReal x4713=((13.1578947368421)*x4712);
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(x4711,-1);
if(!x4718.valid){
continue;
}
IkReal x4714=x4718.value;
IkReal x4715=(r22*x4714);
if((((1.0)+(((-1.0)*(x4715*x4715))))) < -0.00001)
continue;
IkReal x4716=IKsqrt(((1.0)+(((-1.0)*(x4715*x4715)))));
if( (x4715) < -1-IKFAST_SINCOS_THRESH || (x4715) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(x4715))))+(((-1.0)*(x4719.value))));
IkReal gconst4=((((-1.0)*rxp0_2*x4713*x4715))+(((-1.0)*rxp1_2*x4713*x4716)));
IkReal gconst5=(((rxp0_2*x4713*x4716))+(((-1.0)*rxp1_2*x4713*x4715)));
if((((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x4720=IKPowWithIntegerCheck(IKabs(IKsqrt(((((173.130193905817)*(rxp0_2*rxp0_2)))+(((173.130193905817)*(rxp1_2*rxp1_2)))))),-1);
if(!x4720.valid){
continue;
}
if( ((r22*(x4720.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x4720.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x4721 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x4720.value))))+(x4721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4722=((0.076)*cj3);
IkReal x4723=((1.0)*cj3);
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(((((-1.0)*py*x4723))+(((-1.0)*gconst4*r11*x4722))+((gconst5*r10*x4722)))),IkReal(((((-1.0)*px*x4723))+((gconst5*r00*x4722))+(((-1.0)*gconst4*r01*x4722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
CheckValue<IkReal> x4725=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*rxp1_2))+((r22*(((((-0.076)*(gconst4*gconst4)))+(((-0.076)*(gconst5*gconst5)))))))+(((-1.0)*gconst4*rxp0_2)))),-1);
if(!x4725.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4724.value)+(((1.5707963267949)*(x4725.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4726=IKcos(j0);
IkReal x4727=IKsin(j0);
IkReal x4728=((1.0)*sj4);
IkReal x4729=((0.076)*gconst4);
IkReal x4730=((1.0)*cj4);
IkReal x4731=(r10*x4726);
IkReal x4732=(r02*x4727);
IkReal x4733=(r01*x4727);
IkReal x4734=(r12*x4726);
IkReal x4735=(r11*x4726);
IkReal x4736=((1.0)*gconst4*x4727);
IkReal x4737=(gconst5*r00*x4727);
IkReal x4738=(gconst4*x4735);
evalcond[0]=(cj3+(((-1.0)*gconst5*x4733))+((gconst4*x4731))+((gconst5*x4735))+(((-1.0)*r00*x4736)));
evalcond[1]=(((x4729*x4733))+(((-1.0)*py*x4726))+(((-1.0)*x4729*x4735))+((px*x4727))+(((0.076)*gconst5*x4731))+(((-0.076)*x4737)));
evalcond[2]=((((-1.0)*gconst4*x4728*x4733))+((cj4*x4732))+(((-1.0)*x4730*x4734))+(((-1.0)*gconst5*x4728*x4731))+((sj4*x4738))+((sj4*x4737)));
evalcond[3]=(((cj4*x4738))+((cj4*x4737))+(((-1.0)*sj3))+(((-1.0)*gconst5*x4730*x4731))+(((-1.0)*x4728*x4732))+(((-1.0)*gconst4*x4730*x4733))+((sj4*x4734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x4739=x4710;
if((x4739) < -0.00001)
continue;
IkReal x4740=IKabs(IKsqrt(x4739));
IkReal x4747 = x4739;
if(IKabs(x4747)==0){
continue;
}
IkReal x4741=pow(x4747,-0.5);
IkReal x4742=((13.1578947368421)*x4741);
CheckValue<IkReal> x4748=IKPowWithIntegerCheck(x4740,-1);
if(!x4748.valid){
continue;
}
IkReal x4743=x4748.value;
IkReal x4744=(r22*x4743);
if((((1.0)+(((-1.0)*(x4744*x4744))))) < -0.00001)
continue;
IkReal x4745=IKsqrt(((1.0)+(((-1.0)*(x4744*x4744)))));
CheckValue<IkReal> x4749 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4749.valid){
continue;
}
if( (x4744) < -1-IKFAST_SINCOS_THRESH || (x4744) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4746=((((1.0)*(x4749.value)))+(((1.0)*(IKasin(x4744)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4746)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4746)));
IkReal gconst4=((((-1.0)*rxp0_2*x4742*x4744))+(((-1.0)*rxp1_2*x4742*x4745)));
IkReal gconst5=((((-1.0)*rxp1_2*x4742*x4744))+((rxp0_2*x4742*x4745)));
IkReal x4750=((1.138)*cj3);
IkReal x4751=((12.0)*pz);
IkReal x4752=((0.31)*cj4);
IkReal x4753=(r12*sj0);
IkReal x4754=(gconst5*r20);
IkReal x4755=(gconst4*r21);
IkReal x4756=((0.93)*cj4);
IkReal x4757=(cj0*r02);
IkReal x4758=((4.11)*sj4);
IkReal x4759=((4.0)*pz);
IkReal x4760=((0.912)*cj3);
IkReal x4761=((0.304)*cj3);
IkReal x4762=((0.31)*sj4);
IkReal x4763=((0.93)*sj4);
IkReal x4764=((1.37)*sj4);
IkReal x4765=(cj3*x4751);
IkReal x4766=(r22*x4763);
IkReal x4767=((0.912)*x4755);
IkReal x4768=(cj3*x4764);
IkReal x4769=(gconst5*r10*sj0);
IkReal x4770=(cj0*gconst4*r01);
IkReal x4771=(gconst4*r11*sj0);
IkReal x4772=((4.11)*cj4*r22);
IkReal x4773=((1.37)*cj4*r22);
IkReal x4774=(cj0*gconst5*r00);
IkReal x4775=(x4754*x4756);
IkReal x4776=(cj3*x4772);
IkReal x4777=(x4754*x4760);
IkReal x4778=(x4755*x4756);
IkReal x4779=(x4755*x4760);
IkReal x4780=(x4755*x4758);
IkReal x4781=(cj3*x4754*x4758);
IkReal x4782=(cj3*x4780);
IkReal x4783=(x4763*x4770);
IkReal x4784=(x4763*x4771);
IkReal x4785=(x4776+x4777+x4775+x4781);
IkReal x4786=(x4751+x4767+x4784+x4783+x4780);
IkReal x4787=(x4778+x4779+x4765+x4766+x4782);
IkReal x4788=((((0.912)*x4754))+((x4756*x4757))+((x4753*x4756))+((x4754*x4758))+x4772+((x4763*x4774))+((x4763*x4769)));
j1eval[0]=((1.712)+(IKabs(((-1.138)+x4786+(((-1.0)*x4788)))))+(IKabs((x4785+(((-1.0)*x4750))+(((-1.0)*x4787)))))+(IKabs((x4750+x4785+(((-1.0)*x4787)))))+(IKabs(((((-1.0)*cj3*x4759))+(((-1.0)*r22*x4762))+(((-1.0)*x4755*x4768))+(((-1.0)*x4755*x4761))+((cj3*x4773))+(((-1.0)*x4752*x4755))+((x4754*x4768))+((x4754*x4761))+(((-1.0)*x4750))+((x4752*x4754)))))+(IKabs(((1.138)+x4786+(((-1.0)*x4788)))))+(((1.712)*(IKabs(cj3))))+(IKabs(((1.138)+(((0.304)*x4755))+(((-1.0)*x4754*x4764))+(((-1.0)*x4762*x4769))+(((-1.0)*x4762*x4774))+x4759+((x4762*x4771))+((x4762*x4770))+(((-1.0)*x4752*x4757))+(((-1.0)*x4752*x4753))+(((-1.0)*x4773))+((x4755*x4764))+(((-0.304)*x4754))))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x4789=((1.138)*cj3);
IkReal x4790=(gconst5*r20);
IkReal x4791=((0.31)*cj4);
IkReal x4792=((4.11)*cj3);
IkReal x4793=(r22*sj4);
IkReal x4794=((0.304)*cj3);
IkReal x4795=(cj4*r22);
IkReal x4796=((1.37)*cj3);
IkReal x4797=((0.912)*cj3);
IkReal x4798=(gconst4*r21);
IkReal x4799=(cj3*pz);
IkReal x4800=((0.93)*cj4);
IkReal x4801=((12.0)*x4799);
IkReal x4802=((0.93)*x4793);
IkReal x4803=((-0.428)*cj3);
IkReal x4804=((0.31)*x4793);
IkReal x4805=((4.0)*x4799);
IkReal x4806=(x4790*x4800);
IkReal x4807=(x4792*x4795);
IkReal x4808=(x4790*x4797);
IkReal x4809=(x4798*x4800);
IkReal x4810=(x4797*x4798);
IkReal x4811=(x4790*x4794);
IkReal x4812=(x4795*x4796);
IkReal x4813=(x4790*x4791);
IkReal x4814=(x4794*x4798);
IkReal x4815=(x4791*x4798);
IkReal x4816=(cj3*sj4*x4798);
IkReal x4817=(sj4*x4790*x4792);
IkReal x4818=(sj4*x4792*x4798);
IkReal x4819=(sj4*x4790*x4796);
IkReal x4820=(sj4*x4796*x4798);
IkReal x4821=(x4817+x4806+x4807+x4808);
IkReal x4822=(x4813+x4812+x4811+x4819);
IkReal x4823=(x4815+x4814+x4820+x4804+x4805);
IkReal x4824=(x4810+x4818+x4801+x4802+x4809);
op[0]=((((-1.0)*x4823))+x4822+(((-1.0)*x4789)));
op[1]=x4803;
op[2]=((((-1.0)*x4824))+x4821+(((-1.0)*x4789)));
op[3]=((-0.856)*cj3);
op[4]=((((-1.0)*x4824))+x4789+x4821);
op[5]=x4803;
op[6]=((((-1.0)*x4823))+x4789+x4822);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x4825=((4.0)*pz);
IkReal x4826=((12.0)*pz);
IkReal x4827=(gconst4*r21);
IkReal x4828=(gconst5*r20);
IkReal x4829=((0.93)*cj4);
IkReal x4830=(cj0*r02);
IkReal x4831=((4.11)*sj4);
IkReal x4832=((0.31)*sj4);
IkReal x4833=(r12*sj0);
IkReal x4834=((1.37)*sj4);
IkReal x4835=((0.93)*sj4);
IkReal x4836=((0.31)*cj4);
IkReal x4837=(cj4*r22);
IkReal x4838=((0.304)*x4827);
IkReal x4839=((0.912)*x4827);
IkReal x4840=(gconst4*r11*sj0);
IkReal x4841=(cj0*gconst5*r00);
IkReal x4842=(gconst5*r10*sj0);
IkReal x4843=(cj0*gconst4*r01);
IkReal x4844=(x4827*x4834);
IkReal x4845=(x4827*x4831);
IkReal x4846=(x4832*x4843);
IkReal x4847=(x4835*x4843);
IkReal x4848=(x4835*x4840);
IkReal x4849=(x4832*x4840);
IkReal x4850=(x4826+x4839+x4848+x4845+x4847);
IkReal x4851=(x4825+x4838+x4849+x4844+x4846);
IkReal x4852=(((x4835*x4842))+((x4835*x4841))+(((4.11)*x4837))+((x4829*x4833))+((x4829*x4830))+(((0.912)*x4828))+((x4828*x4831)));
IkReal x4853=((((0.304)*x4828))+((x4832*x4841))+((x4832*x4842))+((x4833*x4836))+(((1.37)*x4837))+((x4828*x4834))+((x4830*x4836)));
j1evalpoly[0]=((-1.138)+(((htj1*htj1)*(((-1.138)+(((-1.0)*x4852))+x4850))))+(((htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x4852))+x4850))))+(((0.428)*htj1))+(((-1.0)*x4853))+(((0.856)*(htj1*htj1*htj1)))+(((0.428)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((1.138)+(((-1.0)*x4853))+x4851))))+x4851);
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[2];
IkReal x4854=x4710;
if((x4854) < -0.00001)
continue;
IkReal x4855=IKabs(IKsqrt(x4854));
IkReal x4862 = x4854;
if(IKabs(x4862)==0){
continue;
}
IkReal x4856=pow(x4862,-0.5);
IkReal x4857=((13.1578947368421)*x4856);
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(x4855,-1);
if(!x4863.valid){
continue;
}
IkReal x4858=x4863.value;
IkReal x4859=(r22*x4858);
if((((1.0)+(((-1.0)*(x4859*x4859))))) < -0.00001)
continue;
IkReal x4860=IKsqrt(((1.0)+(((-1.0)*(x4859*x4859)))));
CheckValue<IkReal> x4864 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4864.valid){
continue;
}
if( (x4859) < -1-IKFAST_SINCOS_THRESH || (x4859) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4861=((((1.0)*(x4864.value)))+(((1.0)*(IKasin(x4859)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4861)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4861)));
IkReal gconst4=((((-1.0)*rxp1_2*x4857*x4860))+(((-1.0)*rxp0_2*x4857*x4859)));
IkReal gconst5=((((-1.0)*rxp1_2*x4857*x4859))+((rxp0_2*x4857*x4860)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4865=x4710;
if((x4865) < -0.00001)
continue;
IkReal x4866=IKabs(IKsqrt(x4865));
IkReal x4873 = x4865;
if(IKabs(x4873)==0){
continue;
}
IkReal x4867=pow(x4873,-0.5);
IkReal x4868=((13.1578947368421)*x4867);
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(x4866,-1);
if(!x4874.valid){
continue;
}
IkReal x4869=x4874.value;
IkReal x4870=(r22*x4869);
if((((1.0)+(((-1.0)*(x4870*x4870))))) < -0.00001)
continue;
IkReal x4871=IKsqrt(((1.0)+(((-1.0)*(x4870*x4870)))));
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
if( (x4870) < -1-IKFAST_SINCOS_THRESH || (x4870) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4872=((((1.0)*(x4875.value)))+(((1.0)*(IKasin(x4870)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4872)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4872)));
IkReal gconst4=((((-1.0)*rxp0_2*x4868*x4870))+(((-1.0)*rxp1_2*x4868*x4871)));
IkReal gconst5=(((rxp0_2*x4868*x4871))+(((-1.0)*rxp1_2*x4868*x4870)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x4876=x4710;
if((x4876) < -0.00001)
continue;
IkReal x4877=IKabs(IKsqrt(x4876));
IkReal x4884 = x4876;
if(IKabs(x4884)==0){
continue;
}
IkReal x4878=pow(x4884,-0.5);
IkReal x4879=((13.1578947368421)*x4878);
CheckValue<IkReal> x4885=IKPowWithIntegerCheck(x4877,-1);
if(!x4885.valid){
continue;
}
IkReal x4880=x4885.value;
IkReal x4881=(r22*x4880);
if((((1.0)+(((-1.0)*(x4881*x4881))))) < -0.00001)
continue;
IkReal x4882=IKsqrt(((1.0)+(((-1.0)*(x4881*x4881)))));
CheckValue<IkReal> x4886 = IKatan2WithCheck(IkReal(((-13.1578947368421)*rxp1_2)),IkReal(((-13.1578947368421)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x4886.valid){
continue;
}
if( (x4881) < -1-IKFAST_SINCOS_THRESH || (x4881) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x4883=((((1.0)*(x4886.value)))+(((1.0)*(IKasin(x4881)))));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x4883)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x4883)));
IkReal gconst4=((((-1.0)*rxp0_2*x4879*x4881))+(((-1.0)*rxp1_2*x4879*x4882)));
IkReal gconst5=((((-1.0)*rxp1_2*x4879*x4881))+((rxp0_2*x4879*x4882)));
IkReal x4887=(cj3*sj3);
j2eval[0]=x4887;
j2eval[1]=IKsign(x4887);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4888=((1.0)*cj1);
IkReal x4889=(cj4*r22);
IkReal x4890=(gconst5*r21);
IkReal x4891=(cj1*gconst4);
IkReal x4892=(r21*sj4);
IkReal x4893=(gconst4*sj1);
IkReal x4894=(gconst5*r20*sj4);
if( IKabs((((r20*x4891))+(((-1.0)*x4892*x4893))+((sj1*x4889))+((sj1*x4894))+((cj1*x4890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4888*x4894))+((r20*x4893))+((x4891*x4892))+(((-1.0)*x4888*x4889))+((sj1*x4890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x4891))+(((-1.0)*x4892*x4893))+((sj1*x4889))+((sj1*x4894))+((cj1*x4890))))+IKsqr(((((-1.0)*x4888*x4894))+((r20*x4893))+((x4891*x4892))+(((-1.0)*x4888*x4889))+((sj1*x4890))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x4891))+(((-1.0)*x4892*x4893))+((sj1*x4889))+((sj1*x4894))+((cj1*x4890))), ((((-1.0)*x4888*x4894))+((r20*x4893))+((x4891*x4892))+(((-1.0)*x4888*x4889))+((sj1*x4890))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4895=IKcos(j2);
IkReal x4896=IKsin(j2);
IkReal x4897=(gconst5*sj4);
IkReal x4898=(gconst4*sj0);
IkReal x4899=((0.076)*gconst4);
IkReal x4900=((1.0)*cj0);
IkReal x4901=((1.0)*sj0);
IkReal x4902=(gconst5*sj0);
IkReal x4903=(cj0*r01);
IkReal x4904=(cj0*r00);
IkReal x4905=((0.076)*gconst5);
IkReal x4906=((1.0)*r21);
IkReal x4907=(gconst4*sj4);
IkReal x4908=(cj1*x4895);
IkReal x4909=(sj1*x4895);
IkReal x4910=(cj1*x4896);
IkReal x4911=(sj1*x4896);
IkReal x4912=((1.0)*x4911);
evalcond[0]=(x4910+x4909+(((-1.0)*gconst5*x4906))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4908+((cj4*r22))+(((-1.0)*x4912))+((r20*x4897))+(((-1.0)*x4906*x4907)));
evalcond[2]=(x4908+(((-1.0)*x4912))+((r11*x4902))+((gconst4*x4904))+((gconst5*x4903))+((r10*x4898)));
evalcond[3]=(((r21*x4899))+(((-0.3425)*x4911))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x4910))+(((-1.0)*r20*x4905))+(((0.3425)*x4908))+(((0.0775)*x4909)));
evalcond[4]=((((-1.0)*cj4*r12*x4901))+(((-1.0)*x4910))+((r11*sj4*x4898))+(((-1.0)*x4909))+((x4903*x4907))+(((-1.0)*cj4*r02*x4900))+(((-1.0)*r10*x4897*x4901))+(((-1.0)*r00*x4897*x4900)));
evalcond[5]=((((-1.0)*x4899*x4903))+(((-0.3425)*x4909))+(((-0.076)*r11*x4898))+(((-0.3425)*x4910))+((x4904*x4905))+(((0.2845)*sj1))+(((0.076)*r10*x4902))+(((-1.0)*px*x4900))+(((0.0535)*cj1))+(((-1.0)*py*x4901))+(((-0.0775)*x4911))+(((0.0775)*x4908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4913=((1.0)*r22);
IkReal x4914=(cj1*cj4);
IkReal x4915=(sj1*sj4);
IkReal x4916=(gconst5*r20);
IkReal x4917=(cj1*sj4);
IkReal x4918=(cj4*sj1);
IkReal x4919=((1.0)*gconst4*r21);
if( IKabs(((((-1.0)*x4915*x4919))+(((-1.0)*x4913*x4917))+((x4915*x4916))+((x4914*x4916))+(((-1.0)*x4914*x4919))+((r22*x4918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4918*x4919))+(((-1.0)*x4913*x4914))+(((-1.0)*x4913*x4915))+((x4916*x4918))+((gconst4*r21*x4917))+(((-1.0)*x4916*x4917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4915*x4919))+(((-1.0)*x4913*x4917))+((x4915*x4916))+((x4914*x4916))+(((-1.0)*x4914*x4919))+((r22*x4918))))+IKsqr(((((-1.0)*x4918*x4919))+(((-1.0)*x4913*x4914))+(((-1.0)*x4913*x4915))+((x4916*x4918))+((gconst4*r21*x4917))+(((-1.0)*x4916*x4917))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4915*x4919))+(((-1.0)*x4913*x4917))+((x4915*x4916))+((x4914*x4916))+(((-1.0)*x4914*x4919))+((r22*x4918))), ((((-1.0)*x4918*x4919))+(((-1.0)*x4913*x4914))+(((-1.0)*x4913*x4915))+((x4916*x4918))+((gconst4*r21*x4917))+(((-1.0)*x4916*x4917))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4920=IKcos(j2);
IkReal x4921=IKsin(j2);
IkReal x4922=(gconst5*sj4);
IkReal x4923=((1.0)*cj4);
IkReal x4924=((0.076)*gconst4);
IkReal x4925=(cj0*r02);
IkReal x4926=((1.0)*sj1);
IkReal x4927=((1.0)*cj0);
IkReal x4928=((1.0)*sj0);
IkReal x4929=(gconst4*r21);
IkReal x4930=(gconst5*r20);
IkReal x4931=((0.3425)*sj1);
IkReal x4932=((1.0)*sj4);
IkReal x4933=(r12*sj0);
IkReal x4934=(cj1*x4920);
IkReal x4935=(cj0*gconst5*r00);
IkReal x4936=(gconst4*r11*sj0);
IkReal x4937=(cj0*gconst4*r01);
IkReal x4938=(cj1*x4921);
IkReal x4939=(sj1*x4921);
IkReal x4940=(gconst5*r10*sj0);
IkReal x4941=(x4920*x4926);
IkReal x4942=((1.0)*x4938);
IkReal x4943=(x4941+x4942);
evalcond[0]=(x4934+((r20*x4922))+((cj4*r22))+(((-1.0)*x4921*x4926))+(((-1.0)*x4929*x4932)));
evalcond[1]=(((cj4*x4930))+(((-1.0)*x4943))+(((-1.0)*r22*x4932))+(((-1.0)*x4923*x4929)));
evalcond[2]=((((0.3425)*x4934))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x4924))+(((0.0775)*sj1*x4920))+pz+(((-0.076)*x4930))+(((-1.0)*x4921*x4931))+(((0.0775)*x4938)));
evalcond[3]=(x4939+(((-1.0)*x4934))+((sj4*x4925))+((cj4*x4937))+((cj4*x4936))+(((-1.0)*x4923*x4940))+(((-1.0)*x4923*x4935))+((sj4*x4933)));
evalcond[4]=((((-1.0)*r00*x4922*x4927))+(((-1.0)*x4943))+(((-1.0)*x4923*x4933))+(((-1.0)*r10*x4922*x4928))+(((-1.0)*x4923*x4925))+((sj4*x4936))+((sj4*x4937)));
evalcond[5]=((((0.2845)*sj1))+(((0.076)*x4935))+(((-0.0775)*x4939))+(((0.0535)*cj1))+(((-1.0)*r11*sj0*x4924))+(((-1.0)*x4920*x4931))+(((-1.0)*px*x4927))+(((0.0775)*x4934))+(((-1.0)*cj0*r01*x4924))+(((-0.3425)*x4938))+(((0.076)*x4940))+(((-1.0)*py*x4928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4944=((1.0)*cj1);
IkReal x4945=(cj4*r22);
IkReal x4946=((1.0)*sj1);
IkReal x4947=(gconst4*r20);
IkReal x4948=(gconst5*r21);
IkReal x4949=(gconst5*r20*sj4);
IkReal x4950=(gconst4*r21*sj4);
if( IKabs(((((-1.0)*x4946*x4950))+((sj1*x4949))+((sj1*x4945))+(((-1.0)*x4944*x4948))+(((-1.0)*x4944*x4947)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x4946*x4947))+(((-1.0)*x4946*x4948))+((cj1*x4950))+(((-1.0)*x4944*x4949))+(((-1.0)*x4944*x4945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x4946*x4950))+((sj1*x4949))+((sj1*x4945))+(((-1.0)*x4944*x4948))+(((-1.0)*x4944*x4947))))+IKsqr(((((-1.0)*x4946*x4947))+(((-1.0)*x4946*x4948))+((cj1*x4950))+(((-1.0)*x4944*x4949))+(((-1.0)*x4944*x4945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x4946*x4950))+((sj1*x4949))+((sj1*x4945))+(((-1.0)*x4944*x4948))+(((-1.0)*x4944*x4947))), ((((-1.0)*x4946*x4947))+(((-1.0)*x4946*x4948))+((cj1*x4950))+(((-1.0)*x4944*x4949))+(((-1.0)*x4944*x4945))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x4951=IKcos(j2);
IkReal x4952=IKsin(j2);
IkReal x4953=(gconst5*sj4);
IkReal x4954=(gconst4*sj0);
IkReal x4955=((1.0)*sj1);
IkReal x4956=((1.0)*cj0);
IkReal x4957=((1.0)*sj0);
IkReal x4958=(gconst5*sj0);
IkReal x4959=(cj0*r00);
IkReal x4960=((0.076)*gconst5);
IkReal x4961=(gconst4*r21);
IkReal x4962=(cj1*x4951);
IkReal x4963=(sj1*x4951);
IkReal x4964=(cj0*gconst4*r01);
IkReal x4965=(cj1*x4952);
IkReal x4966=(sj1*x4952);
IkReal x4967=(x4951*x4955);
IkReal x4968=((1.0)*x4965);
IkReal x4969=(x4968+x4967);
evalcond[0]=((((-1.0)*x4969))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4962+((cj4*r22))+(((-1.0)*x4952*x4955))+((r20*x4953))+(((-1.0)*sj4*x4961)));
evalcond[2]=(x4966+((gconst4*x4959))+((r10*x4954))+((r11*x4958))+(((-1.0)*x4962))+((cj0*gconst5*r01)));
evalcond[3]=((((0.0775)*x4965))+(((0.0775)*x4963))+(((-1.0)*r20*x4960))+(((0.076)*x4961))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x4966))+(((0.3425)*x4962))+pz);
evalcond[4]=((((-1.0)*cj4*r02*x4956))+(((-1.0)*x4969))+((r11*sj4*x4954))+((sj4*x4964))+(((-1.0)*r00*x4953*x4956))+(((-1.0)*r10*x4953*x4957))+(((-1.0)*cj4*r12*x4957)));
evalcond[5]=(((x4959*x4960))+(((-0.0775)*x4966))+(((0.0775)*x4962))+(((-1.0)*px*x4956))+(((0.2845)*sj1))+(((-0.076)*r11*x4954))+(((-0.076)*x4964))+(((-0.3425)*x4965))+(((-0.3425)*x4963))+(((0.076)*r10*x4958))+(((0.0535)*cj1))+(((-1.0)*py*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4970=(sj1*sj3);
IkReal x4971=(r22*sj4);
IkReal x4972=(cj3*sj1);
IkReal x4973=(cj1*sj3);
IkReal x4974=(cj0*gconst5*r01);
IkReal x4975=(gconst4*r10*sj0);
IkReal x4976=((1.0)*cj1*cj3);
IkReal x4977=(gconst5*r11*sj0);
IkReal x4978=(cj0*gconst4*r00);
IkReal x4979=(cj4*gconst4*r21);
IkReal x4980=((1.0)*cj4*gconst5*r20);
CheckValue<IkReal> x4981 = IKatan2WithCheck(IkReal(((((-1.0)*x4973*x4980))+((x4973*x4979))+((x4971*x4973))+((x4972*x4978))+((x4972*x4975))+((x4972*x4974))+((x4972*x4977)))),IkReal(((((-1.0)*x4975*x4976))+((x4970*x4971))+((x4970*x4979))+(((-1.0)*x4976*x4977))+(((-1.0)*x4976*x4978))+(((-1.0)*x4970*x4980))+(((-1.0)*x4974*x4976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x4982.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4981.value)+(((1.5707963267949)*(x4982.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x4983=IKcos(j2);
IkReal x4984=IKsin(j2);
IkReal x4985=(gconst5*sj4);
IkReal x4986=((1.0)*cj4);
IkReal x4987=(r10*sj0);
IkReal x4988=(cj3*sj1);
IkReal x4989=((0.076)*gconst4);
IkReal x4990=(cj0*r01);
IkReal x4991=(r12*sj0);
IkReal x4992=((1.0)*cj0);
IkReal x4993=(cj0*r02);
IkReal x4994=(gconst4*r21);
IkReal x4995=(gconst5*r20);
IkReal x4996=((1.0)*sj4);
IkReal x4997=(cj1*x4983);
IkReal x4998=(cj0*gconst5*r00);
IkReal x4999=(gconst4*r11*sj0);
IkReal x5000=((1.0)*x4984);
IkReal x5001=(sj1*x4983);
IkReal x5002=(cj1*x4984);
IkReal x5003=(sj1*x4984);
evalcond[0]=((((-1.0)*gconst5*r21))+((sj3*x5001))+((sj3*x5002))+(((-1.0)*gconst4*r20)));
evalcond[1]=(x4997+((cj4*r22))+(((-1.0)*sj1*x5000))+(((-1.0)*x4994*x4996))+((r20*x4985)));
evalcond[2]=((((-1.0)*x4986*x4994))+(((-1.0)*r22*x4996))+((cj3*x5002))+((cj4*x4995))+((x4983*x4988)));
evalcond[3]=(((gconst5*x4990))+((cj0*gconst4*r00))+((gconst4*x4987))+((gconst5*r11*sj0))+(((-1.0)*sj1*sj3*x5000))+((sj3*x4997)));
evalcond[4]=((((-0.076)*x4995))+(((-0.3425)*x5003))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x4997))+((r21*x4989))+pz+(((0.0775)*x5001))+(((0.0775)*x5002)));
evalcond[5]=((((-1.0)*gconst5*x4986*x4987))+(((-1.0)*x4988*x5000))+(((-1.0)*x4986*x4998))+((cj3*x4997))+((sj4*x4991))+((sj4*x4993))+((cj4*gconst4*x4990))+((cj4*x4999)));
evalcond[6]=((((-1.0)*x4986*x4991))+(((-1.0)*x4986*x4993))+((gconst4*sj4*x4990))+(((-1.0)*x5001))+((sj4*x4999))+(((-1.0)*x4985*x4987))+(((-1.0)*cj1*x5000))+(((-1.0)*r00*x4985*x4992)));
evalcond[7]=((((-0.3425)*x5001))+(((-0.3425)*x5002))+(((0.076)*gconst5*x4987))+(((0.2845)*sj1))+(((0.0775)*x4997))+(((-0.0775)*x5003))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((0.076)*x4998))+(((-1.0)*px*x4992))+(((-1.0)*r11*sj0*x4989))+(((-1.0)*x4989*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5004=(cj1*cj4);
IkReal x5005=(gconst4*r21);
IkReal x5006=(cj3*r22);
IkReal x5007=(cj4*sj1);
IkReal x5008=(gconst5*r20);
IkReal x5009=(sj1*sj4);
IkReal x5010=((1.0)*cj3);
IkReal x5011=(cj1*sj4);
CheckValue<IkReal> x5012=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5012.valid){
continue;
}
CheckValue<IkReal> x5013 = IKatan2WithCheck(IkReal(((((-1.0)*x5005*x5009*x5010))+(((-1.0)*x5004*x5008))+((cj3*x5008*x5009))+((r22*x5011))+((x5006*x5007))+((x5004*x5005)))),IkReal((((cj3*x5005*x5011))+(((-1.0)*x5004*x5006))+(((-1.0)*x5007*x5008))+((r22*x5009))+(((-1.0)*x5008*x5010*x5011))+((x5005*x5007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5013.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5012.value)))+(x5013.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5014=IKcos(j2);
IkReal x5015=IKsin(j2);
IkReal x5016=(gconst5*sj4);
IkReal x5017=((1.0)*cj4);
IkReal x5018=(r10*sj0);
IkReal x5019=(cj3*sj1);
IkReal x5020=((0.076)*gconst4);
IkReal x5021=(cj0*r01);
IkReal x5022=(r12*sj0);
IkReal x5023=((1.0)*cj0);
IkReal x5024=(cj0*r02);
IkReal x5025=(gconst4*r21);
IkReal x5026=(gconst5*r20);
IkReal x5027=((1.0)*sj4);
IkReal x5028=(cj1*x5014);
IkReal x5029=(cj0*gconst5*r00);
IkReal x5030=(gconst4*r11*sj0);
IkReal x5031=((1.0)*x5015);
IkReal x5032=(sj1*x5014);
IkReal x5033=(cj1*x5015);
IkReal x5034=(sj1*x5015);
evalcond[0]=((((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20))+((sj3*x5033))+((sj3*x5032)));
evalcond[1]=((((-1.0)*x5025*x5027))+((r20*x5016))+((cj4*r22))+x5028+(((-1.0)*sj1*x5031)));
evalcond[2]=(((x5014*x5019))+((cj4*x5026))+(((-1.0)*x5017*x5025))+((cj3*x5033))+(((-1.0)*r22*x5027)));
evalcond[3]=(((gconst5*x5021))+((cj0*gconst4*r00))+((gconst4*x5018))+((gconst5*r11*sj0))+((sj3*x5028))+(((-1.0)*sj1*sj3*x5031)));
evalcond[4]=((((-0.3425)*x5034))+(((-0.076)*x5026))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x5028))+pz+(((0.0775)*x5033))+(((0.0775)*x5032))+((r21*x5020)));
evalcond[5]=((((-1.0)*gconst5*x5017*x5018))+(((-1.0)*x5019*x5031))+((cj4*x5030))+((sj4*x5022))+((sj4*x5024))+((cj4*gconst4*x5021))+((cj3*x5028))+(((-1.0)*x5017*x5029)));
evalcond[6]=((((-1.0)*r00*x5016*x5023))+(((-1.0)*x5032))+((sj4*x5030))+(((-1.0)*cj1*x5031))+(((-1.0)*x5017*x5022))+(((-1.0)*x5017*x5024))+(((-1.0)*x5016*x5018))+((gconst4*sj4*x5021)));
evalcond[7]=((((-1.0)*px*x5023))+(((-0.3425)*x5033))+(((-0.3425)*x5032))+(((0.076)*x5029))+(((0.2845)*sj1))+(((-1.0)*r11*sj0*x5020))+(((-0.0775)*x5034))+(((0.0535)*cj1))+(((0.076)*gconst5*x5018))+(((-1.0)*x5020*x5021))+(((-1.0)*py*sj0))+(((0.0775)*x5028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5035=(gconst5*sj1);
IkReal x5036=(cj1*gconst4);
IkReal x5037=(cj1*gconst5);
IkReal x5038=(sj1*sj3);
IkReal x5039=(cj4*r22);
IkReal x5040=(r21*sj4);
IkReal x5041=(r20*sj3*sj4);
CheckValue<IkReal> x5042=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043 = IKatan2WithCheck(IkReal((((r20*x5036))+((x5038*x5039))+(((-1.0)*gconst4*x5038*x5040))+((x5035*x5041))+((r21*x5037)))),IkReal((((gconst4*r20*sj1))+(((-1.0)*x5037*x5041))+((sj3*x5036*x5040))+((r21*x5035))+(((-1.0)*cj1*sj3*x5039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5043.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5042.value)))+(x5043.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5044=IKcos(j2);
IkReal x5045=IKsin(j2);
IkReal x5046=(gconst5*sj4);
IkReal x5047=((1.0)*cj4);
IkReal x5048=(r10*sj0);
IkReal x5049=(cj3*sj1);
IkReal x5050=((0.076)*gconst4);
IkReal x5051=(cj0*r01);
IkReal x5052=(r12*sj0);
IkReal x5053=((1.0)*cj0);
IkReal x5054=(cj0*r02);
IkReal x5055=(gconst4*r21);
IkReal x5056=(gconst5*r20);
IkReal x5057=((1.0)*sj4);
IkReal x5058=(cj1*x5044);
IkReal x5059=(cj0*gconst5*r00);
IkReal x5060=(gconst4*r11*sj0);
IkReal x5061=((1.0)*x5045);
IkReal x5062=(sj1*x5044);
IkReal x5063=(cj1*x5045);
IkReal x5064=(sj1*x5045);
evalcond[0]=(((sj3*x5062))+((sj3*x5063))+(((-1.0)*gconst5*r21))+(((-1.0)*gconst4*r20)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x5055*x5057))+((r20*x5046))+x5058+(((-1.0)*sj1*x5061)));
evalcond[2]=(((cj3*x5063))+(((-1.0)*r22*x5057))+((cj4*x5056))+((x5044*x5049))+(((-1.0)*x5047*x5055)));
evalcond[3]=(((gconst5*x5051))+((cj0*gconst4*r00))+((gconst5*r11*sj0))+((gconst4*x5048))+((sj3*x5058))+(((-1.0)*sj1*sj3*x5061)));
evalcond[4]=(((r21*x5050))+(((-0.3425)*x5064))+(((-0.076)*x5056))+(((0.0775)*x5063))+(((0.0775)*x5062))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.3425)*x5058)));
evalcond[5]=(((cj3*x5058))+(((-1.0)*gconst5*x5047*x5048))+(((-1.0)*x5049*x5061))+((sj4*x5052))+((sj4*x5054))+((cj4*gconst4*x5051))+(((-1.0)*x5047*x5059))+((cj4*x5060)));
evalcond[6]=((((-1.0)*x5046*x5048))+((sj4*x5060))+(((-1.0)*r00*x5046*x5053))+((gconst4*sj4*x5051))+(((-1.0)*cj1*x5061))+(((-1.0)*x5062))+(((-1.0)*x5047*x5054))+(((-1.0)*x5047*x5052)));
evalcond[7]=((((-1.0)*r11*sj0*x5050))+(((-0.3425)*x5063))+(((-0.3425)*x5062))+(((0.076)*x5059))+(((0.2845)*sj1))+(((0.076)*gconst5*x5048))+(((0.0775)*x5058))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-1.0)*px*x5053))+(((-0.0775)*x5064))+(((-1.0)*x5050*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5065=((1.0)*sj3);
IkReal x5066=((0.076)*sj4);
IkReal x5067=((0.076)*cj5*sj3);
IkReal x5068=((0.076)*sj3*sj5);
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*rxp0_2))+(((-1.0)*cj5*r21*x5066))+(((-1.0)*r20*sj5*x5066))+((cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x5069.valid){
continue;
}
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal(((((-1.0)*py*x5065))+(((-1.0)*r11*x5068))+((r10*x5067)))),IkReal(((((-1.0)*px*x5065))+((r00*x5067))+(((-1.0)*r01*x5068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5069.value)))+(x5070.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5071=IKcos(j0);
IkReal x5072=IKsin(j0);
IkReal x5073=(sj4*sj5);
IkReal x5074=(cj4*sj5);
IkReal x5075=((1.0)*cj4);
IkReal x5076=((0.076)*sj5);
IkReal x5077=((1.0)*x5072);
IkReal x5078=(r11*x5071);
IkReal x5079=(r12*x5071);
IkReal x5080=(cj5*r00*x5072);
IkReal x5081=(cj5*r10*x5071);
evalcond[0]=(((cj5*x5078))+cj3+((r10*sj5*x5071))+(((-1.0)*cj5*r01*x5077))+(((-1.0)*r00*sj5*x5077)));
evalcond[1]=((((0.076)*x5081))+((px*x5072))+(((-1.0)*py*x5071))+(((-1.0)*x5076*x5078))+((r01*x5072*x5076))+(((-0.076)*x5080)));
evalcond[2]=(((sj4*x5080))+((cj4*r02*x5072))+(((-1.0)*sj4*x5081))+((x5073*x5078))+(((-1.0)*r01*x5073*x5077))+(((-1.0)*x5075*x5079)));
evalcond[3]=((((-1.0)*sj3))+(((-1.0)*x5075*x5081))+((cj4*x5080))+(((-1.0)*r01*x5074*x5077))+((x5074*x5078))+((sj4*x5079))+(((-1.0)*r02*sj4*x5077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5082=((1.138)*sj3);
IkReal x5083=((1.138)*cj3);
IkReal x5084=((0.31)*cj5);
IkReal x5085=(cj4*r20);
IkReal x5086=((0.93)*sj5);
IkReal x5087=(cj4*r21);
IkReal x5088=(r22*sj4);
IkReal x5089=((0.912)*sj3);
IkReal x5090=(cj5*r20);
IkReal x5091=(r21*sj5);
IkReal x5092=((4.11)*sj4);
IkReal x5093=((0.93)*cj5);
IkReal x5094=((0.304)*cj3);
IkReal x5095=(pz*sj3);
IkReal x5096=((0.31)*sj5);
IkReal x5097=((0.304)*sj3);
IkReal x5098=((0.912)*cj3);
IkReal x5099=((1.37)*sj3);
IkReal x5100=(cj4*r22);
IkReal x5101=(cj3*pz);
IkReal x5102=((1.37)*cj3);
IkReal x5103=(r21*x5093);
IkReal x5104=((12.0)*x5095);
IkReal x5105=(r20*x5086);
IkReal x5106=((12.0)*x5101);
IkReal x5107=((0.93)*x5088);
IkReal x5108=((4.11)*sj3*x5100);
IkReal x5109=(x5089*x5090);
IkReal x5110=(x5089*x5091);
IkReal x5111=((4.11)*cj3*x5100);
IkReal x5112=(x5090*x5098);
IkReal x5113=(x5085*x5093);
IkReal x5114=(x5091*x5098);
IkReal x5115=(x5086*x5087);
IkReal x5116=((1.37)*sj4*x5091);
IkReal x5117=(sj3*x5090*x5092);
IkReal x5118=(sj3*x5091*x5092);
IkReal x5119=(cj3*x5090*x5092);
IkReal x5120=(cj3*x5091*x5092);
IkReal x5121=(x5108+x5109+x5117);
IkReal x5122=(x5111+x5113+x5112+x5119);
IkReal x5123=(x5103+x5104+x5105+x5110+x5118);
IkReal x5124=(x5106+x5107+x5115+x5114+x5120);
j1eval[0]=((IKabs((((sj4*x5090*x5102))+((x5084*x5085))+(((-1.0)*x5091*x5094))+(((-1.0)*x5083))+((x5090*x5094))+(((-1.0)*sj4*x5091*x5102))+(((-0.31)*x5088))+(((-4.0)*x5101))+((x5100*x5102))+(((-1.0)*x5087*x5096)))))+(IKabs((x5121+(((-1.0)*x5082))+(((-1.0)*x5123)))))+(IKabs((x5122+x5083+(((-1.0)*x5124)))))+(IKabs((x5121+x5082+(((-1.0)*x5123)))))+(IKabs((x5122+(((-1.0)*x5083))+(((-1.0)*x5124)))))+(((1.712)*(IKabs(cj3))))+(IKabs(((((-1.0)*x5091*x5097))+((x5099*x5100))+(((-1.0)*sj4*x5091*x5099))+(((-1.0)*x5082))+((x5090*x5097))+(((-4.0)*x5095))+((sj4*x5090*x5099))+(((-1.0)*r20*x5096))+(((-1.0)*r21*x5084)))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5125=((1.138)*sj3);
IkReal x5126=(r20*sj5);
IkReal x5127=(pz*sj3);
IkReal x5128=((1.37)*sj4);
IkReal x5129=(cj5*r21);
IkReal x5130=((4.11)*sj4);
IkReal x5131=((0.93)*x5129);
IkReal x5132=((12.0)*x5127);
IkReal x5133=((0.93)*x5126);
IkReal x5134=((-0.428)*sj3);
IkReal x5135=((0.31)*x5126);
IkReal x5136=((4.0)*x5127);
IkReal x5137=((0.31)*x5129);
IkReal x5138=(r21*sj3*sj5);
IkReal x5139=(cj5*r20*sj3);
IkReal x5140=(cj4*r22*sj3);
IkReal x5141=((4.11)*x5140);
IkReal x5142=((0.912)*x5139);
IkReal x5143=((0.912)*x5138);
IkReal x5144=((1.37)*x5140);
IkReal x5145=((0.304)*x5139);
IkReal x5146=((0.304)*x5138);
IkReal x5147=(x5130*x5139);
IkReal x5148=(x5130*x5138);
IkReal x5149=(x5128*x5139);
IkReal x5150=(x5128*x5138);
IkReal x5151=(x5147+x5142+x5141);
IkReal x5152=(x5149+x5144+x5145);
IkReal x5153=(x5150+x5146+x5137+x5136+x5135);
IkReal x5154=(x5148+x5143+x5133+x5132+x5131);
op[0]=(x5152+(((-1.0)*x5125))+(((-1.0)*x5153)));
op[1]=x5134;
op[2]=(x5151+(((-1.0)*x5125))+(((-1.0)*x5154)));
op[3]=((-0.856)*sj3);
op[4]=(x5151+x5125+(((-1.0)*x5154)));
op[5]=x5134;
op[6]=(x5152+x5125+(((-1.0)*x5153)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5155=((1.138)*cj3);
IkReal x5156=(cj5*r20);
IkReal x5157=((0.31)*cj4);
IkReal x5158=(r21*sj5);
IkReal x5159=(cj3*sj4);
IkReal x5160=(r22*sj4);
IkReal x5161=((0.93)*cj4);
IkReal x5162=((0.304)*cj3);
IkReal x5163=((0.912)*cj3);
IkReal x5164=((0.428)*cj3);
IkReal x5165=(cj3*pz);
IkReal x5166=((12.0)*x5165);
IkReal x5167=((0.93)*x5160);
IkReal x5168=((0.31)*x5160);
IkReal x5169=((4.0)*x5165);
IkReal x5170=(cj3*cj4*r22);
IkReal x5171=(x5156*x5162);
IkReal x5172=((1.37)*x5170);
IkReal x5173=((4.11)*x5170);
IkReal x5174=(x5156*x5163);
IkReal x5175=(x5156*x5161);
IkReal x5176=(x5158*x5163);
IkReal x5177=(x5158*x5161);
IkReal x5178=(x5156*x5157);
IkReal x5179=(x5158*x5162);
IkReal x5180=(x5157*x5158);
IkReal x5181=((1.37)*x5156*x5159);
IkReal x5182=((4.11)*x5156*x5159);
IkReal x5183=((4.11)*x5158*x5159);
IkReal x5184=((1.37)*x5158*x5159);
IkReal x5185=(x5182+x5173+x5175+x5174);
IkReal x5186=(x5181+x5172+x5171+x5178);
IkReal x5187=(x5183+x5166+x5167+x5177+x5176);
IkReal x5188=(x5180+x5184+x5168+x5169+x5179);
j1evalpoly[0]=((((-1.0)*htj1*x5164))+(((htj1*htj1*htj1*htj1)*((x5185+(((-1.0)*x5155))+(((-1.0)*x5187))))))+x5155+x5186+(((-1.0)*x5164*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5186+(((-1.0)*x5155))+(((-1.0)*x5188))))))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((-1.0)*x5188))+(((htj1*htj1)*((x5155+x5185+(((-1.0)*x5187)))))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5189=(cj5*r20);
IkReal x5190=(r20*sj5);
IkReal x5191=(r21*sj5);
IkReal x5192=(cj5*r21);
IkReal x5193=(cj1*sj3*sj4);
IkReal x5194=(cj4*r22*sj3);
IkReal x5195=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x5192))+((sj1*x5190))+(((-1.0)*x5189*x5193))+((x5191*x5193))+(((-1.0)*cj1*x5194)))))+(IKabs((((sj1*x5194))+(((-1.0)*x5191*x5195))+((cj1*x5190))+((cj1*x5192))+((x5189*x5195))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5196=(cj4*r22);
IkReal x5197=((1.0)*cj1);
IkReal x5198=(r20*sj1);
IkReal x5199=(cj5*sj4);
IkReal x5200=(cj5*r21);
IkReal x5201=(r21*sj4*sj5);
if( IKabs((((sj1*x5196))+((cj1*r20*sj5))+(((-1.0)*sj1*x5201))+((cj1*x5200))+((x5198*x5199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5201))+((sj1*x5200))+(((-1.0)*x5196*x5197))+((sj5*x5198))+(((-1.0)*r20*x5197*x5199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5196))+((cj1*r20*sj5))+(((-1.0)*sj1*x5201))+((cj1*x5200))+((x5198*x5199))))+IKsqr((((cj1*x5201))+((sj1*x5200))+(((-1.0)*x5196*x5197))+((sj5*x5198))+(((-1.0)*r20*x5197*x5199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5196))+((cj1*r20*sj5))+(((-1.0)*sj1*x5201))+((cj1*x5200))+((x5198*x5199))), (((cj1*x5201))+((sj1*x5200))+(((-1.0)*x5196*x5197))+((sj5*x5198))+(((-1.0)*r20*x5197*x5199))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5202=IKcos(j2);
IkReal x5203=IKsin(j2);
IkReal x5204=(r10*sj0);
IkReal x5205=((0.076)*cj5);
IkReal x5206=(cj0*r00);
IkReal x5207=((0.076)*sj5);
IkReal x5208=(r11*sj0);
IkReal x5209=((1.0)*sj5);
IkReal x5210=((1.0)*cj0);
IkReal x5211=(cj0*r01);
IkReal x5212=((1.0)*sj1);
IkReal x5213=((0.3425)*sj1);
IkReal x5214=(sj4*sj5);
IkReal x5215=((1.0)*sj0);
IkReal x5216=(cj1*x5202);
IkReal x5217=((1.0)*cj5*sj4);
IkReal x5218=(cj1*x5203);
IkReal x5219=(sj1*x5202);
IkReal x5220=(x5203*x5212);
evalcond[0]=(x5218+x5219+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5209)));
evalcond[1]=((((-1.0)*r21*sj4*x5209))+((cj4*r22))+((cj5*r20*sj4))+x5216+(((-1.0)*x5220)));
evalcond[2]=(((cj5*x5208))+((cj5*x5211))+x5216+(((-1.0)*x5220))+((sj5*x5204))+((sj5*x5206)));
CheckValue<IkReal> x5221=IKPowWithIntegerCheck(cj4,-1);
if(!x5221.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x5218))+(((0.0775)*x5219))+(((0.3425)*x5216))+(((-1.0)*x5203*x5213))+(((-0.076)*r22*sj4*(x5221.value))));
evalcond[4]=(((x5208*x5214))+(((-1.0)*x5206*x5217))+(((-1.0)*cj4*r12*x5215))+(((-1.0)*cj4*r02*x5210))+(((-1.0)*x5202*x5212))+((x5211*x5214))+(((-1.0)*x5218))+(((-1.0)*x5204*x5217)));
evalcond[5]=(((x5205*x5206))+((x5204*x5205))+(((0.2845)*sj1))+(((-0.0775)*sj1*x5203))+(((-1.0)*py*x5215))+(((0.0535)*cj1))+(((-1.0)*x5202*x5213))+(((0.0775)*x5216))+(((-1.0)*x5207*x5208))+(((-0.3425)*x5218))+(((-1.0)*px*x5210))+(((-1.0)*x5207*x5211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5222=((1.0)*cj1);
IkReal x5223=(cj4*r22);
IkReal x5224=(cj5*r21);
IkReal x5225=((1.0)*sj1);
IkReal x5226=(r20*sj5);
IkReal x5227=(r21*sj4*sj5);
IkReal x5228=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x5222*x5224))+(((-1.0)*x5222*x5226))+(((-1.0)*x5225*x5227))+((sj1*x5223))+((sj1*x5228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5227))+(((-1.0)*x5222*x5223))+(((-1.0)*x5222*x5228))+(((-1.0)*x5224*x5225))+(((-1.0)*x5225*x5226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5222*x5224))+(((-1.0)*x5222*x5226))+(((-1.0)*x5225*x5227))+((sj1*x5223))+((sj1*x5228))))+IKsqr((((cj1*x5227))+(((-1.0)*x5222*x5223))+(((-1.0)*x5222*x5228))+(((-1.0)*x5224*x5225))+(((-1.0)*x5225*x5226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5222*x5224))+(((-1.0)*x5222*x5226))+(((-1.0)*x5225*x5227))+((sj1*x5223))+((sj1*x5228))), (((cj1*x5227))+(((-1.0)*x5222*x5223))+(((-1.0)*x5222*x5228))+(((-1.0)*x5224*x5225))+(((-1.0)*x5225*x5226))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5229=IKcos(j2);
IkReal x5230=IKsin(j2);
IkReal x5231=(r10*sj0);
IkReal x5232=((0.076)*cj5);
IkReal x5233=(cj0*r00);
IkReal x5234=((0.076)*sj5);
IkReal x5235=(r11*sj0);
IkReal x5236=((1.0)*sj5);
IkReal x5237=((1.0)*cj0);
IkReal x5238=(cj0*r01);
IkReal x5239=((1.0)*sj1);
IkReal x5240=((0.3425)*sj1);
IkReal x5241=(sj4*sj5);
IkReal x5242=((1.0)*sj0);
IkReal x5243=(cj1*x5229);
IkReal x5244=((1.0)*cj5*sj4);
IkReal x5245=(cj1*x5230);
IkReal x5246=(sj1*x5230);
IkReal x5247=(x5229*x5239);
IkReal x5248=((1.0)*x5245);
IkReal x5249=(x5248+x5247);
evalcond[0]=((((-1.0)*x5249))+(((-1.0)*r20*x5236))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+x5243+(((-1.0)*r21*sj4*x5236))+(((-1.0)*x5230*x5239)));
evalcond[2]=(((sj5*x5231))+((sj5*x5233))+(((-1.0)*x5243))+x5246+((cj5*x5235))+((cj5*x5238)));
CheckValue<IkReal> x5250=IKPowWithIntegerCheck(cj4,-1);
if(!x5250.valid){
continue;
}
evalcond[3]=((((0.0775)*x5245))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*sj1*x5229))+pz+(((-1.0)*x5230*x5240))+(((0.3425)*x5243))+(((-0.076)*r22*sj4*(x5250.value))));
evalcond[4]=((((-1.0)*x5249))+((x5235*x5241))+((x5238*x5241))+(((-1.0)*cj4*r02*x5237))+(((-1.0)*x5231*x5244))+(((-1.0)*cj4*r12*x5242))+(((-1.0)*x5233*x5244)));
evalcond[5]=((((0.0775)*x5243))+(((-1.0)*x5234*x5235))+(((-1.0)*x5234*x5238))+(((-1.0)*py*x5242))+(((0.2845)*sj1))+(((-1.0)*px*x5237))+((x5232*x5233))+(((-1.0)*x5229*x5240))+(((-0.0775)*x5246))+((x5231*x5232))+(((0.0535)*cj1))+(((-0.3425)*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5251=(cj4*r22);
IkReal x5252=((1.0)*cj1);
IkReal x5253=(sj1*sj4);
IkReal x5254=(cj5*r20);
IkReal x5255=(r21*sj5);
IkReal x5256=(cj4*sj1);
IkReal x5257=(cj1*x5255);
if( IKabs((((cj4*x5257))+((x5253*x5254))+((sj1*x5251))+(((-1.0)*cj4*x5252*x5254))+(((-1.0)*x5253*x5255))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5255*x5256))+((r22*x5253))+(((-1.0)*x5254*x5256))+((sj4*x5257))+(((-1.0)*x5251*x5252))+(((-1.0)*sj4*x5252*x5254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5257))+((x5253*x5254))+((sj1*x5251))+(((-1.0)*cj4*x5252*x5254))+(((-1.0)*x5253*x5255))+((cj1*r22*sj4))))+IKsqr((((x5255*x5256))+((r22*x5253))+(((-1.0)*x5254*x5256))+((sj4*x5257))+(((-1.0)*x5251*x5252))+(((-1.0)*sj4*x5252*x5254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5257))+((x5253*x5254))+((sj1*x5251))+(((-1.0)*cj4*x5252*x5254))+(((-1.0)*x5253*x5255))+((cj1*r22*sj4))), (((x5255*x5256))+((r22*x5253))+(((-1.0)*x5254*x5256))+((sj4*x5257))+(((-1.0)*x5251*x5252))+(((-1.0)*sj4*x5252*x5254))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5258=IKcos(j2);
IkReal x5259=IKsin(j2);
IkReal x5260=((1.0)*sj4);
IkReal x5261=((0.076)*sj5);
IkReal x5262=(r11*sj0);
IkReal x5263=((1.0)*cj4);
IkReal x5264=(cj0*r02);
IkReal x5265=(cj0*r01);
IkReal x5266=(cj5*r20);
IkReal x5267=((1.0)*sj1);
IkReal x5268=(sj4*sj5);
IkReal x5269=(r21*sj5);
IkReal x5270=(cj4*sj5);
IkReal x5271=(r12*sj0);
IkReal x5272=(cj1*x5258);
IkReal x5273=(cj5*r10*sj0);
IkReal x5274=(cj0*cj5*r00);
IkReal x5275=(cj1*x5259);
IkReal x5276=(sj1*x5259);
IkReal x5277=(sj1*x5258);
IkReal x5278=(x5259*x5267);
evalcond[0]=(((cj4*r22))+x5272+(((-1.0)*x5278))+((sj4*x5266))+(((-1.0)*x5260*x5269)));
evalcond[1]=((((-1.0)*x5263*x5269))+((cj4*x5266))+x5275+x5277+(((-1.0)*r22*x5260)));
evalcond[2]=((((-0.3425)*x5276))+(((-0.076)*x5266))+(((0.0775)*x5275))+(((0.0775)*x5277))+(((0.0535)*sj1))+(((-0.2845)*cj1))+((r21*x5261))+(((0.3425)*x5272))+pz);
evalcond[3]=(((x5262*x5270))+(((-1.0)*x5263*x5273))+(((-1.0)*x5263*x5274))+x5272+(((-1.0)*x5278))+((sj4*x5264))+((x5265*x5270))+((sj4*x5271)));
evalcond[4]=((((-1.0)*x5263*x5264))+(((-1.0)*x5258*x5267))+((x5262*x5268))+(((-1.0)*x5263*x5271))+(((-1.0)*x5260*x5273))+(((-1.0)*x5260*x5274))+((x5265*x5268))+(((-1.0)*x5275)));
evalcond[5]=((((0.076)*x5273))+(((0.076)*x5274))+(((-0.3425)*x5275))+(((-0.3425)*x5277))+(((0.0775)*x5272))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-1.0)*x5261*x5265))+(((-1.0)*x5261*x5262))+(((-1.0)*py*sj0))+(((-0.0775)*x5276))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5279=((1.0)*cj4);
IkReal x5280=(r22*sj1);
IkReal x5281=((1.0)*sj4);
IkReal x5282=(cj1*r22);
IkReal x5283=(cj1*r21*sj5);
IkReal x5284=(cj5*r20*sj1);
IkReal x5285=(r21*sj1*sj5);
IkReal x5286=(cj1*cj5*r20);
if( IKabs(((((-1.0)*x5281*x5282))+(((-1.0)*x5281*x5285))+(((-1.0)*x5279*x5283))+((cj4*x5286))+((cj4*x5280))+((sj4*x5284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5281*x5286))+(((-1.0)*x5279*x5285))+(((-1.0)*x5279*x5282))+((cj4*x5284))+((sj4*x5283))+(((-1.0)*x5280*x5281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x5281*x5282))+(((-1.0)*x5281*x5285))+(((-1.0)*x5279*x5283))+((cj4*x5286))+((cj4*x5280))+((sj4*x5284))))+IKsqr(((((-1.0)*x5281*x5286))+(((-1.0)*x5279*x5285))+(((-1.0)*x5279*x5282))+((cj4*x5284))+((sj4*x5283))+(((-1.0)*x5280*x5281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x5281*x5282))+(((-1.0)*x5281*x5285))+(((-1.0)*x5279*x5283))+((cj4*x5286))+((cj4*x5280))+((sj4*x5284))), ((((-1.0)*x5281*x5286))+(((-1.0)*x5279*x5285))+(((-1.0)*x5279*x5282))+((cj4*x5284))+((sj4*x5283))+(((-1.0)*x5280*x5281))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5287=IKcos(j2);
IkReal x5288=IKsin(j2);
IkReal x5289=(sj0*sj4);
IkReal x5290=(cj5*r10);
IkReal x5291=((0.076)*sj0);
IkReal x5292=((1.0)*sj4);
IkReal x5293=(r11*sj5);
IkReal x5294=((0.076)*sj5);
IkReal x5295=((1.0)*cj4);
IkReal x5296=(cj0*r02);
IkReal x5297=(cj0*r01);
IkReal x5298=((1.0)*sj1);
IkReal x5299=(r21*sj5);
IkReal x5300=(cj5*r20);
IkReal x5301=(cj1*x5287);
IkReal x5302=(cj0*cj5*r00);
IkReal x5303=(cj1*x5288);
IkReal x5304=(sj1*x5288);
IkReal x5305=(sj1*x5287);
IkReal x5306=(x5287*x5298);
IkReal x5307=((1.0)*x5303);
IkReal x5308=(x5306+x5307);
evalcond[0]=(((cj4*r22))+x5301+(((-1.0)*x5288*x5298))+(((-1.0)*x5292*x5299))+((sj4*x5300)));
evalcond[1]=((((-1.0)*r22*x5292))+(((-1.0)*x5308))+(((-1.0)*x5295*x5299))+((cj4*x5300)));
evalcond[2]=((((-0.3425)*x5304))+(((0.0535)*sj1))+((r21*x5294))+(((-0.2845)*cj1))+(((-0.076)*x5300))+pz+(((0.3425)*x5301))+(((0.0775)*x5303))+(((0.0775)*x5305)));
evalcond[3]=(((r12*x5289))+((cj4*sj0*x5293))+(((-1.0)*x5295*x5302))+x5304+((cj4*sj5*x5297))+(((-1.0)*x5301))+(((-1.0)*sj0*x5290*x5295))+((sj4*x5296)));
evalcond[4]=((((-1.0)*x5292*x5302))+(((-1.0)*x5308))+((x5289*x5293))+(((-1.0)*x5289*x5290))+(((-1.0)*x5295*x5296))+((sj4*sj5*x5297))+(((-1.0)*r12*sj0*x5295)));
evalcond[5]=((((-0.3425)*x5303))+(((-0.3425)*x5305))+((x5290*x5291))+(((0.2845)*sj1))+(((0.076)*x5302))+(((-0.0775)*x5304))+(((0.0535)*cj1))+(((-1.0)*x5294*x5297))+(((-1.0)*py*sj0))+(((0.0775)*x5301))+(((-1.0)*x5291*x5293))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5309=(cj1*cj4);
IkReal x5310=(r21*sj5);
IkReal x5311=((1.0)*cj3);
IkReal x5312=(cj5*r20);
IkReal x5313=(cj1*sj4);
IkReal x5314=(sj1*sj4);
IkReal x5315=(cj4*sj1);
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((((r22*x5313))+((cj3*r22*x5315))+((cj3*x5312*x5314))+(((-1.0)*x5309*x5312))+((x5309*x5310))+(((-1.0)*x5310*x5311*x5314)))),IkReal((((r22*x5314))+(((-1.0)*r22*x5309*x5311))+((x5310*x5315))+(((-1.0)*x5312*x5315))+(((-1.0)*x5311*x5312*x5313))+((cj3*x5310*x5313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5317.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5316.value)+(((1.5707963267949)*(x5317.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5318=IKcos(j2);
IkReal x5319=IKsin(j2);
IkReal x5320=(r10*sj0);
IkReal x5321=((0.076)*cj5);
IkReal x5322=((1.0)*sj1);
IkReal x5323=(cj0*r00);
IkReal x5324=((0.076)*sj5);
IkReal x5325=(r11*sj0);
IkReal x5326=((1.0)*sj0);
IkReal x5327=((1.0)*sj5);
IkReal x5328=((1.0)*cj4);
IkReal x5329=(cj0*r01);
IkReal x5330=(cj0*r02);
IkReal x5331=(sj4*sj5);
IkReal x5332=(cj4*sj5);
IkReal x5333=(cj5*r20);
IkReal x5334=(cj1*x5318);
IkReal x5335=((1.0)*cj5*sj4);
IkReal x5336=(cj3*x5319);
IkReal x5337=(cj1*x5319);
IkReal x5338=(sj1*x5318);
IkReal x5339=(sj1*x5319);
evalcond[0]=((((-1.0)*r20*x5327))+((sj3*x5337))+((sj3*x5338))+(((-1.0)*cj5*r21)));
evalcond[1]=(((sj4*x5333))+((cj4*r22))+x5334+(((-1.0)*x5319*x5322))+(((-1.0)*r21*sj4*x5327)));
evalcond[2]=((((-1.0)*cj4*r21*x5327))+((cj1*x5336))+((cj4*x5333))+(((-1.0)*r22*sj4))+((cj3*x5338)));
evalcond[3]=(((cj5*x5329))+((cj5*x5325))+(((-1.0)*sj3*x5319*x5322))+((sj3*x5334))+((sj5*x5320))+((sj5*x5323)));
evalcond[4]=((((-1.0)*r20*x5321))+(((0.3425)*x5334))+(((0.0535)*sj1))+(((0.0775)*x5337))+(((0.0775)*x5338))+(((-0.2845)*cj1))+(((-0.3425)*x5339))+pz+((r21*x5324)));
evalcond[5]=(((x5325*x5332))+((sj4*x5330))+(((-1.0)*cj5*x5320*x5328))+((r12*sj0*sj4))+(((-1.0)*x5322*x5336))+(((-1.0)*cj5*x5323*x5328))+((cj3*x5334))+((x5329*x5332)));
evalcond[6]=((((-1.0)*x5318*x5322))+(((-1.0)*x5320*x5335))+((x5325*x5331))+(((-1.0)*x5337))+(((-1.0)*x5323*x5335))+(((-1.0)*x5328*x5330))+(((-1.0)*cj4*r12*x5326))+((x5329*x5331)));
evalcond[7]=((((-1.0)*py*x5326))+(((0.2845)*sj1))+(((0.0775)*x5334))+((x5320*x5321))+((x5321*x5323))+(((-0.3425)*x5337))+(((-0.3425)*x5338))+(((0.0535)*cj1))+(((-1.0)*x5324*x5329))+(((-1.0)*x5324*x5325))+(((-1.0)*cj0*px))+(((-0.0775)*x5339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5340=((1.0)*cj1);
IkReal x5341=(sj0*sj1);
IkReal x5342=(cj5*r11);
IkReal x5343=(r10*sj5);
IkReal x5344=(r20*sj5);
IkReal x5345=(cj5*r21);
IkReal x5346=(cj0*cj5*r01);
IkReal x5347=(cj0*r00*sj5);
CheckValue<IkReal> x5348=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5348.valid){
continue;
}
CheckValue<IkReal> x5349 = IKatan2WithCheck(IkReal((((sj1*x5347))+((sj1*x5346))+((x5341*x5342))+((x5341*x5343))+((cj1*x5344))+((cj1*x5345)))),IkReal(((((-1.0)*sj0*x5340*x5343))+(((-1.0)*sj0*x5340*x5342))+((sj1*x5345))+((sj1*x5344))+(((-1.0)*x5340*x5347))+(((-1.0)*x5340*x5346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5348.value)))+(x5349.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5350=IKcos(j2);
IkReal x5351=IKsin(j2);
IkReal x5352=(r10*sj0);
IkReal x5353=((0.076)*cj5);
IkReal x5354=((1.0)*sj1);
IkReal x5355=(cj0*r00);
IkReal x5356=((0.076)*sj5);
IkReal x5357=(r11*sj0);
IkReal x5358=((1.0)*sj0);
IkReal x5359=((1.0)*sj5);
IkReal x5360=((1.0)*cj4);
IkReal x5361=(cj0*r01);
IkReal x5362=(cj0*r02);
IkReal x5363=(sj4*sj5);
IkReal x5364=(cj4*sj5);
IkReal x5365=(cj5*r20);
IkReal x5366=(cj1*x5350);
IkReal x5367=((1.0)*cj5*sj4);
IkReal x5368=(cj3*x5351);
IkReal x5369=(cj1*x5351);
IkReal x5370=(sj1*x5350);
IkReal x5371=(sj1*x5351);
evalcond[0]=((((-1.0)*r20*x5359))+((sj3*x5370))+(((-1.0)*cj5*r21))+((sj3*x5369)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x5351*x5354))+x5366+((sj4*x5365))+(((-1.0)*r21*sj4*x5359)));
evalcond[2]=(((cj1*x5368))+((cj3*x5370))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x5359))+((cj4*x5365)));
evalcond[3]=(((cj5*x5357))+(((-1.0)*sj3*x5351*x5354))+((sj5*x5352))+((sj5*x5355))+((sj3*x5366))+((cj5*x5361)));
evalcond[4]=((((-1.0)*r20*x5353))+(((-0.3425)*x5371))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x5369))+(((0.0775)*x5370))+(((0.3425)*x5366))+((r21*x5356)));
evalcond[5]=((((-1.0)*cj5*x5352*x5360))+((sj4*x5362))+((r12*sj0*sj4))+((x5357*x5364))+(((-1.0)*cj5*x5355*x5360))+((cj3*x5366))+(((-1.0)*x5354*x5368))+((x5361*x5364)));
evalcond[6]=((((-1.0)*x5360*x5362))+(((-1.0)*x5369))+(((-1.0)*x5350*x5354))+((x5357*x5363))+(((-1.0)*cj4*r12*x5358))+(((-1.0)*x5355*x5367))+(((-1.0)*x5352*x5367))+((x5361*x5363)));
evalcond[7]=((((-0.3425)*x5370))+(((-1.0)*x5356*x5357))+(((0.2845)*sj1))+(((-0.0775)*x5371))+(((-1.0)*py*x5358))+((x5353*x5355))+((x5352*x5353))+(((0.0535)*cj1))+(((0.0775)*x5366))+(((-1.0)*x5356*x5361))+(((-0.3425)*x5369))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5372=(cj5*r20);
IkReal x5373=(r20*sj5);
IkReal x5374=(r21*sj5);
IkReal x5375=(cj5*r21);
IkReal x5376=(cj1*sj3*sj4);
IkReal x5377=(cj4*r22*sj3);
IkReal x5378=(sj1*sj3*sj4);
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal((((x5372*x5378))+((sj1*x5377))+((cj1*x5375))+((cj1*x5373))+(((-1.0)*x5374*x5378)))),IkReal((((sj1*x5373))+((sj1*x5375))+(((-1.0)*x5372*x5376))+(((-1.0)*cj1*x5377))+((x5374*x5376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
CheckValue<IkReal> x5380=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5380.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x5379.value)+(((1.5707963267949)*(x5380.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5381=IKcos(j2);
IkReal x5382=IKsin(j2);
IkReal x5383=(r10*sj0);
IkReal x5384=((0.076)*cj5);
IkReal x5385=((1.0)*sj1);
IkReal x5386=(cj0*r00);
IkReal x5387=((0.076)*sj5);
IkReal x5388=(r11*sj0);
IkReal x5389=((1.0)*sj0);
IkReal x5390=((1.0)*sj5);
IkReal x5391=((1.0)*cj4);
IkReal x5392=(cj0*r01);
IkReal x5393=(cj0*r02);
IkReal x5394=(sj4*sj5);
IkReal x5395=(cj4*sj5);
IkReal x5396=(cj5*r20);
IkReal x5397=(cj1*x5381);
IkReal x5398=((1.0)*cj5*sj4);
IkReal x5399=(cj3*x5382);
IkReal x5400=(cj1*x5382);
IkReal x5401=(sj1*x5381);
IkReal x5402=(sj1*x5382);
evalcond[0]=((((-1.0)*r20*x5390))+(((-1.0)*cj5*r21))+((sj3*x5400))+((sj3*x5401)));
evalcond[1]=((((-1.0)*x5382*x5385))+((cj4*r22))+x5397+((sj4*x5396))+(((-1.0)*r21*sj4*x5390)));
evalcond[2]=(((cj1*x5399))+((cj4*x5396))+(((-1.0)*cj4*r21*x5390))+(((-1.0)*r22*sj4))+((cj3*x5401)));
evalcond[3]=(((cj5*x5388))+((cj5*x5392))+((sj3*x5397))+((sj5*x5383))+((sj5*x5386))+(((-1.0)*sj3*x5382*x5385)));
evalcond[4]=((((0.0775)*x5401))+(((0.0775)*x5400))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x5402))+(((-1.0)*r20*x5384))+pz+((r21*x5387))+(((0.3425)*x5397)));
evalcond[5]=((((-1.0)*cj5*x5383*x5391))+(((-1.0)*x5385*x5399))+((x5392*x5395))+((sj4*x5393))+((x5388*x5395))+(((-1.0)*cj5*x5386*x5391))+((r12*sj0*sj4))+((cj3*x5397)));
evalcond[6]=((((-1.0)*x5400))+((x5392*x5394))+((x5388*x5394))+(((-1.0)*x5391*x5393))+(((-1.0)*cj4*r12*x5389))+(((-1.0)*x5386*x5398))+(((-1.0)*x5383*x5398))+(((-1.0)*x5381*x5385)));
evalcond[7]=(((x5383*x5384))+(((-0.0775)*x5402))+(((0.2845)*sj1))+(((-0.3425)*x5401))+(((-0.3425)*x5400))+((x5384*x5386))+(((0.0535)*cj1))+(((-1.0)*py*x5389))+(((-1.0)*x5387*x5392))+(((0.0775)*x5397))+(((-1.0)*x5387*x5388))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5403=((1.0)*cj3);
IkReal x5404=(cj5*sj4);
IkReal x5405=(cj3*sj4*sj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+((r22*sj4))+(((-1.0)*cj4*cj5*r20)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5403*x5404))+(((-1.0)*cj4*r12*x5403))+((r11*x5405)))),IkReal(((((-1.0)*r00*x5403*x5404))+(((-1.0)*cj4*r02*x5403))+((r01*x5405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5408=IKcos(j0);
IkReal x5409=IKsin(j0);
IkReal x5410=(sj4*sj5);
IkReal x5411=(cj4*sj5);
IkReal x5412=((1.0)*cj4);
IkReal x5413=((0.076)*sj5);
IkReal x5414=((1.0)*x5409);
IkReal x5415=(r11*x5408);
IkReal x5416=(r12*x5408);
IkReal x5417=(cj5*r00*x5409);
IkReal x5418=(cj5*r10*x5408);
evalcond[0]=((((-1.0)*r00*sj5*x5414))+cj3+((r10*sj5*x5408))+(((-1.0)*cj5*r01*x5414))+((cj5*x5415)));
evalcond[1]=((((0.076)*x5418))+((px*x5409))+((r01*x5409*x5413))+(((-1.0)*py*x5408))+(((-0.076)*x5417))+(((-1.0)*x5413*x5415)));
evalcond[2]=((((-1.0)*x5412*x5416))+((x5410*x5415))+((cj4*r02*x5409))+((sj4*x5417))+(((-1.0)*r01*x5410*x5414))+(((-1.0)*sj4*x5418)));
evalcond[3]=((((-1.0)*x5412*x5418))+(((-1.0)*sj3))+(((-1.0)*r01*x5411*x5414))+((cj4*x5417))+((x5411*x5415))+((sj4*x5416))+(((-1.0)*r02*sj4*x5414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5419=((1.138)*sj3);
IkReal x5420=((1.138)*cj3);
IkReal x5421=((0.31)*cj5);
IkReal x5422=(cj4*r20);
IkReal x5423=((0.93)*sj5);
IkReal x5424=(cj4*r21);
IkReal x5425=(r22*sj4);
IkReal x5426=((0.912)*sj3);
IkReal x5427=(cj5*r20);
IkReal x5428=(r21*sj5);
IkReal x5429=((4.11)*sj4);
IkReal x5430=((0.93)*cj5);
IkReal x5431=((0.304)*cj3);
IkReal x5432=(pz*sj3);
IkReal x5433=((0.31)*sj5);
IkReal x5434=((0.304)*sj3);
IkReal x5435=((0.912)*cj3);
IkReal x5436=((1.37)*sj3);
IkReal x5437=(cj4*r22);
IkReal x5438=(cj3*pz);
IkReal x5439=((1.37)*cj3);
IkReal x5440=(r21*x5430);
IkReal x5441=((12.0)*x5432);
IkReal x5442=(r20*x5423);
IkReal x5443=((12.0)*x5438);
IkReal x5444=((0.93)*x5425);
IkReal x5445=((4.11)*sj3*x5437);
IkReal x5446=(x5426*x5427);
IkReal x5447=(x5426*x5428);
IkReal x5448=((4.11)*cj3*x5437);
IkReal x5449=(x5427*x5435);
IkReal x5450=(x5422*x5430);
IkReal x5451=(x5428*x5435);
IkReal x5452=(x5423*x5424);
IkReal x5453=((1.37)*sj4*x5428);
IkReal x5454=(sj3*x5427*x5429);
IkReal x5455=(sj3*x5428*x5429);
IkReal x5456=(cj3*x5427*x5429);
IkReal x5457=(cj3*x5428*x5429);
IkReal x5458=(x5454+x5446+x5445);
IkReal x5459=(x5450+x5456+x5449+x5448);
IkReal x5460=(x5455+x5442+x5441+x5440+x5447);
IkReal x5461=(x5451+x5452+x5457+x5443+x5444);
j1eval[0]=((IKabs((x5458+x5419+(((-1.0)*x5460)))))+(IKabs(((((-1.0)*x5420))+x5459+(((-1.0)*x5461)))))+(IKabs((x5458+(((-1.0)*x5419))+(((-1.0)*x5460)))))+(IKabs(((((-1.0)*x5420))+(((-1.0)*x5428*x5431))+(((-0.31)*x5425))+(((-1.0)*x5424*x5433))+((x5427*x5431))+((x5421*x5422))+(((-1.0)*sj4*x5428*x5439))+(((-4.0)*x5438))+((sj4*x5427*x5439))+((x5437*x5439)))))+(IKabs((x5420+x5459+(((-1.0)*x5461)))))+(IKabs(((((-1.0)*x5428*x5434))+((x5427*x5434))+(((-1.0)*sj4*x5428*x5436))+(((-1.0)*r20*x5433))+((x5436*x5437))+(((-1.0)*x5419))+(((-1.0)*r21*x5421))+(((-4.0)*x5432))+((sj4*x5427*x5436)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3)))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5462=((1.138)*sj3);
IkReal x5463=(r20*sj5);
IkReal x5464=(pz*sj3);
IkReal x5465=((1.37)*sj4);
IkReal x5466=(cj5*r21);
IkReal x5467=((4.11)*sj4);
IkReal x5468=((0.93)*x5466);
IkReal x5469=((12.0)*x5464);
IkReal x5470=((0.93)*x5463);
IkReal x5471=((-0.428)*sj3);
IkReal x5472=((0.31)*x5463);
IkReal x5473=((4.0)*x5464);
IkReal x5474=((0.31)*x5466);
IkReal x5475=(r21*sj3*sj5);
IkReal x5476=(cj5*r20*sj3);
IkReal x5477=(cj4*r22*sj3);
IkReal x5478=((4.11)*x5477);
IkReal x5479=((0.912)*x5476);
IkReal x5480=((0.912)*x5475);
IkReal x5481=((1.37)*x5477);
IkReal x5482=((0.304)*x5476);
IkReal x5483=((0.304)*x5475);
IkReal x5484=(x5467*x5476);
IkReal x5485=(x5467*x5475);
IkReal x5486=(x5465*x5476);
IkReal x5487=(x5465*x5475);
IkReal x5488=(x5478+x5479+x5484);
IkReal x5489=(x5486+x5482+x5481);
IkReal x5490=(x5474+x5472+x5473+x5487+x5483);
IkReal x5491=(x5469+x5468+x5470+x5485+x5480);
op[0]=(x5489+(((-1.0)*x5490))+(((-1.0)*x5462)));
op[1]=x5471;
op[2]=(x5488+(((-1.0)*x5491))+(((-1.0)*x5462)));
op[3]=((-0.856)*sj3);
op[4]=(x5462+x5488+(((-1.0)*x5491)));
op[5]=x5471;
op[6]=(x5462+x5489+(((-1.0)*x5490)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5492=((1.138)*cj3);
IkReal x5493=(cj5*r20);
IkReal x5494=((0.31)*cj4);
IkReal x5495=(r21*sj5);
IkReal x5496=(cj3*sj4);
IkReal x5497=(r22*sj4);
IkReal x5498=((0.93)*cj4);
IkReal x5499=((0.304)*cj3);
IkReal x5500=((0.912)*cj3);
IkReal x5501=((0.428)*cj3);
IkReal x5502=(cj3*pz);
IkReal x5503=((12.0)*x5502);
IkReal x5504=((0.93)*x5497);
IkReal x5505=((0.31)*x5497);
IkReal x5506=((4.0)*x5502);
IkReal x5507=(cj3*cj4*r22);
IkReal x5508=(x5493*x5499);
IkReal x5509=((1.37)*x5507);
IkReal x5510=((4.11)*x5507);
IkReal x5511=(x5493*x5500);
IkReal x5512=(x5493*x5498);
IkReal x5513=(x5495*x5500);
IkReal x5514=(x5495*x5498);
IkReal x5515=(x5493*x5494);
IkReal x5516=(x5495*x5499);
IkReal x5517=(x5494*x5495);
IkReal x5518=((1.37)*x5493*x5496);
IkReal x5519=((4.11)*x5493*x5496);
IkReal x5520=((4.11)*x5495*x5496);
IkReal x5521=((1.37)*x5495*x5496);
IkReal x5522=(x5519+x5511+x5510+x5512);
IkReal x5523=(x5508+x5509+x5518+x5515);
IkReal x5524=(x5520+x5504+x5503+x5513+x5514);
IkReal x5525=(x5521+x5506+x5505+x5517+x5516);
j1evalpoly[0]=(x5523+(((-1.0)*x5501*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x5525))+x5492+(((-1.0)*htj1*x5501))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x5523+(((-1.0)*x5525))+(((-1.0)*x5492))))))+(((htj1*htj1*htj1*htj1)*((x5522+(((-1.0)*x5524))+(((-1.0)*x5492))))))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1)*((x5522+(((-1.0)*x5524))+x5492)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5526=(cj5*r20);
IkReal x5527=(r20*sj5);
IkReal x5528=(r21*sj5);
IkReal x5529=(cj5*r21);
IkReal x5530=(cj1*sj3*sj4);
IkReal x5531=(cj4*r22*sj3);
IkReal x5532=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((x5528*x5530))+(((-1.0)*x5526*x5530))+((sj1*x5529))+((sj1*x5527))+(((-1.0)*cj1*x5531)))))+(IKabs((((x5526*x5532))+((cj1*x5527))+((cj1*x5529))+((sj1*x5531))+(((-1.0)*x5528*x5532))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5533=(cj4*r22);
IkReal x5534=((1.0)*cj1);
IkReal x5535=(r20*sj1);
IkReal x5536=(cj5*sj4);
IkReal x5537=(cj5*r21);
IkReal x5538=(r21*sj4*sj5);
if( IKabs((((cj1*r20*sj5))+(((-1.0)*sj1*x5538))+((cj1*x5537))+((x5535*x5536))+((sj1*x5533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x5535))+((cj1*x5538))+(((-1.0)*r20*x5534*x5536))+((sj1*x5537))+(((-1.0)*x5533*x5534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*sj5))+(((-1.0)*sj1*x5538))+((cj1*x5537))+((x5535*x5536))+((sj1*x5533))))+IKsqr((((sj5*x5535))+((cj1*x5538))+(((-1.0)*r20*x5534*x5536))+((sj1*x5537))+(((-1.0)*x5533*x5534))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*sj5))+(((-1.0)*sj1*x5538))+((cj1*x5537))+((x5535*x5536))+((sj1*x5533))), (((sj5*x5535))+((cj1*x5538))+(((-1.0)*r20*x5534*x5536))+((sj1*x5537))+(((-1.0)*x5533*x5534))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5539=IKcos(j2);
IkReal x5540=IKsin(j2);
IkReal x5541=(r10*sj0);
IkReal x5542=((0.076)*cj5);
IkReal x5543=(cj0*r00);
IkReal x5544=((0.076)*sj5);
IkReal x5545=(r11*sj0);
IkReal x5546=((1.0)*sj5);
IkReal x5547=((1.0)*cj0);
IkReal x5548=(cj0*r01);
IkReal x5549=((1.0)*sj1);
IkReal x5550=((0.3425)*sj1);
IkReal x5551=(sj4*sj5);
IkReal x5552=((1.0)*sj0);
IkReal x5553=(cj1*x5539);
IkReal x5554=((1.0)*cj5*sj4);
IkReal x5555=(cj1*x5540);
IkReal x5556=(sj1*x5539);
IkReal x5557=(x5540*x5549);
evalcond[0]=(x5555+x5556+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5546)));
evalcond[1]=(x5553+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x5546))+(((-1.0)*x5557)));
evalcond[2]=(x5553+((sj5*x5541))+((sj5*x5543))+((cj5*x5545))+((cj5*x5548))+(((-1.0)*x5557)));
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(cj4,-1);
if(!x5558.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x5555))+(((0.0775)*x5556))+pz+(((-1.0)*x5540*x5550))+(((0.3425)*x5553))+(((-0.076)*r22*sj4*(x5558.value))));
evalcond[4]=((((-1.0)*x5555))+(((-1.0)*x5539*x5549))+(((-1.0)*x5543*x5554))+(((-1.0)*x5541*x5554))+(((-1.0)*cj4*r02*x5547))+((x5548*x5551))+((x5545*x5551))+(((-1.0)*cj4*r12*x5552)));
evalcond[5]=(((x5542*x5543))+(((-1.0)*x5539*x5550))+(((-0.3425)*x5555))+(((0.2845)*sj1))+((x5541*x5542))+(((0.0775)*x5553))+(((-1.0)*x5544*x5548))+(((-1.0)*x5544*x5545))+(((0.0535)*cj1))+(((-0.0775)*sj1*x5540))+(((-1.0)*px*x5547))+(((-1.0)*py*x5552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5559=((1.0)*cj1);
IkReal x5560=(cj4*r22);
IkReal x5561=(cj5*r21);
IkReal x5562=((1.0)*sj1);
IkReal x5563=(r20*sj5);
IkReal x5564=(r21*sj4*sj5);
IkReal x5565=(cj5*r20*sj4);
if( IKabs((((sj1*x5560))+((sj1*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5559*x5561))+(((-1.0)*x5559*x5563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5564))+(((-1.0)*x5562*x5563))+(((-1.0)*x5559*x5565))+(((-1.0)*x5559*x5560))+(((-1.0)*x5561*x5562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5560))+((sj1*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5559*x5561))+(((-1.0)*x5559*x5563))))+IKsqr((((cj1*x5564))+(((-1.0)*x5562*x5563))+(((-1.0)*x5559*x5565))+(((-1.0)*x5559*x5560))+(((-1.0)*x5561*x5562))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5560))+((sj1*x5565))+(((-1.0)*x5562*x5564))+(((-1.0)*x5559*x5561))+(((-1.0)*x5559*x5563))), (((cj1*x5564))+(((-1.0)*x5562*x5563))+(((-1.0)*x5559*x5565))+(((-1.0)*x5559*x5560))+(((-1.0)*x5561*x5562))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5566=IKcos(j2);
IkReal x5567=IKsin(j2);
IkReal x5568=(r10*sj0);
IkReal x5569=((0.076)*cj5);
IkReal x5570=(cj0*r00);
IkReal x5571=((0.076)*sj5);
IkReal x5572=(r11*sj0);
IkReal x5573=((1.0)*sj5);
IkReal x5574=((1.0)*cj0);
IkReal x5575=(cj0*r01);
IkReal x5576=((1.0)*sj1);
IkReal x5577=((0.3425)*sj1);
IkReal x5578=(sj4*sj5);
IkReal x5579=((1.0)*sj0);
IkReal x5580=(cj1*x5566);
IkReal x5581=((1.0)*cj5*sj4);
IkReal x5582=(cj1*x5567);
IkReal x5583=(sj1*x5567);
IkReal x5584=(x5566*x5576);
IkReal x5585=((1.0)*x5582);
IkReal x5586=(x5584+x5585);
evalcond[0]=((((-1.0)*x5586))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x5573)));
evalcond[1]=(x5580+((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*x5567*x5576))+(((-1.0)*r21*sj4*x5573)));
evalcond[2]=(x5583+(((-1.0)*x5580))+((sj5*x5570))+((sj5*x5568))+((cj5*x5572))+((cj5*x5575)));
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(cj4,-1);
if(!x5587.valid){
continue;
}
evalcond[3]=((((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((0.0775)*x5582))+(((0.0775)*sj1*x5566))+(((-1.0)*x5567*x5577))+(((0.3425)*x5580))+(((-0.076)*r22*sj4*(x5587.value))));
evalcond[4]=((((-1.0)*cj4*r02*x5574))+((x5572*x5578))+((x5575*x5578))+(((-1.0)*x5568*x5581))+(((-1.0)*x5586))+(((-1.0)*cj4*r12*x5579))+(((-1.0)*x5570*x5581)));
evalcond[5]=(((x5569*x5570))+(((-0.0775)*x5583))+(((-1.0)*py*x5579))+(((-0.3425)*x5582))+(((0.2845)*sj1))+(((-1.0)*x5571*x5572))+(((-1.0)*x5571*x5575))+(((0.0535)*cj1))+(((0.0775)*x5580))+((x5568*x5569))+(((-1.0)*x5566*x5577))+(((-1.0)*px*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5588=(cj4*r22);
IkReal x5589=((1.0)*cj1);
IkReal x5590=(sj1*sj4);
IkReal x5591=(cj5*r20);
IkReal x5592=(r21*sj5);
IkReal x5593=(cj4*sj1);
IkReal x5594=(cj1*x5592);
if( IKabs((((sj1*x5588))+((x5590*x5591))+((cj4*x5594))+(((-1.0)*cj4*x5589*x5591))+(((-1.0)*x5590*x5592))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5588*x5589))+((x5592*x5593))+(((-1.0)*x5591*x5593))+(((-1.0)*sj4*x5589*x5591))+((r22*x5590))+((sj4*x5594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5588))+((x5590*x5591))+((cj4*x5594))+(((-1.0)*cj4*x5589*x5591))+(((-1.0)*x5590*x5592))+((cj1*r22*sj4))))+IKsqr(((((-1.0)*x5588*x5589))+((x5592*x5593))+(((-1.0)*x5591*x5593))+(((-1.0)*sj4*x5589*x5591))+((r22*x5590))+((sj4*x5594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5588))+((x5590*x5591))+((cj4*x5594))+(((-1.0)*cj4*x5589*x5591))+(((-1.0)*x5590*x5592))+((cj1*r22*sj4))), ((((-1.0)*x5588*x5589))+((x5592*x5593))+(((-1.0)*x5591*x5593))+(((-1.0)*sj4*x5589*x5591))+((r22*x5590))+((sj4*x5594))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5595=IKcos(j2);
IkReal x5596=IKsin(j2);
IkReal x5597=((1.0)*sj4);
IkReal x5598=((0.076)*sj5);
IkReal x5599=(r11*sj0);
IkReal x5600=((1.0)*cj4);
IkReal x5601=(cj0*r02);
IkReal x5602=(cj0*r01);
IkReal x5603=(cj5*r20);
IkReal x5604=((1.0)*sj1);
IkReal x5605=(sj4*sj5);
IkReal x5606=(r21*sj5);
IkReal x5607=(cj4*sj5);
IkReal x5608=(r12*sj0);
IkReal x5609=(cj1*x5595);
IkReal x5610=(cj5*r10*sj0);
IkReal x5611=(cj0*cj5*r00);
IkReal x5612=(cj1*x5596);
IkReal x5613=(sj1*x5596);
IkReal x5614=(sj1*x5595);
IkReal x5615=(x5596*x5604);
evalcond[0]=(x5609+((cj4*r22))+(((-1.0)*x5597*x5606))+((sj4*x5603))+(((-1.0)*x5615)));
evalcond[1]=(x5612+x5614+(((-1.0)*x5600*x5606))+(((-1.0)*r22*x5597))+((cj4*x5603)));
evalcond[2]=(((r21*x5598))+(((-0.3425)*x5613))+(((0.0535)*sj1))+(((-0.076)*x5603))+(((-0.2845)*cj1))+pz+(((0.3425)*x5609))+(((0.0775)*x5612))+(((0.0775)*x5614)));
evalcond[3]=(x5609+((x5602*x5607))+((sj4*x5608))+((sj4*x5601))+((x5599*x5607))+(((-1.0)*x5600*x5611))+(((-1.0)*x5600*x5610))+(((-1.0)*x5615)));
evalcond[4]=((((-1.0)*x5612))+(((-1.0)*x5597*x5611))+(((-1.0)*x5597*x5610))+((x5602*x5605))+(((-1.0)*x5600*x5601))+(((-1.0)*x5600*x5608))+((x5599*x5605))+(((-1.0)*x5595*x5604)));
evalcond[5]=((((-0.3425)*x5614))+(((-0.3425)*x5612))+(((0.2845)*sj1))+(((-1.0)*x5598*x5599))+(((0.0535)*cj1))+(((-1.0)*x5598*x5602))+(((-1.0)*py*sj0))+(((0.0775)*x5609))+(((-0.0775)*x5613))+(((0.076)*x5610))+(((0.076)*x5611))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5616=((1.0)*cj4);
IkReal x5617=(r22*sj1);
IkReal x5618=((1.0)*sj4);
IkReal x5619=(cj1*r22);
IkReal x5620=(cj1*r21*sj5);
IkReal x5621=(cj5*r20*sj1);
IkReal x5622=(r21*sj1*sj5);
IkReal x5623=(cj1*cj5*r20);
if( IKabs((((cj4*x5623))+(((-1.0)*x5618*x5622))+(((-1.0)*x5618*x5619))+((sj4*x5621))+(((-1.0)*x5616*x5620))+((cj4*x5617)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x5621))+(((-1.0)*x5618*x5623))+(((-1.0)*x5617*x5618))+((sj4*x5620))+(((-1.0)*x5616*x5619))+(((-1.0)*x5616*x5622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5623))+(((-1.0)*x5618*x5622))+(((-1.0)*x5618*x5619))+((sj4*x5621))+(((-1.0)*x5616*x5620))+((cj4*x5617))))+IKsqr((((cj4*x5621))+(((-1.0)*x5618*x5623))+(((-1.0)*x5617*x5618))+((sj4*x5620))+(((-1.0)*x5616*x5619))+(((-1.0)*x5616*x5622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5623))+(((-1.0)*x5618*x5622))+(((-1.0)*x5618*x5619))+((sj4*x5621))+(((-1.0)*x5616*x5620))+((cj4*x5617))), (((cj4*x5621))+(((-1.0)*x5618*x5623))+(((-1.0)*x5617*x5618))+((sj4*x5620))+(((-1.0)*x5616*x5619))+(((-1.0)*x5616*x5622))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5624=IKcos(j2);
IkReal x5625=IKsin(j2);
IkReal x5626=(sj0*sj4);
IkReal x5627=(cj5*r10);
IkReal x5628=((0.076)*sj0);
IkReal x5629=((1.0)*sj4);
IkReal x5630=(r11*sj5);
IkReal x5631=((0.076)*sj5);
IkReal x5632=((1.0)*cj4);
IkReal x5633=(cj0*r02);
IkReal x5634=(cj0*r01);
IkReal x5635=((1.0)*sj1);
IkReal x5636=(r21*sj5);
IkReal x5637=(cj5*r20);
IkReal x5638=(cj1*x5624);
IkReal x5639=(cj0*cj5*r00);
IkReal x5640=(cj1*x5625);
IkReal x5641=(sj1*x5625);
IkReal x5642=(sj1*x5624);
IkReal x5643=(x5624*x5635);
IkReal x5644=((1.0)*x5640);
IkReal x5645=(x5643+x5644);
evalcond[0]=(((sj4*x5637))+x5638+(((-1.0)*x5629*x5636))+((cj4*r22))+(((-1.0)*x5625*x5635)));
evalcond[1]=((((-1.0)*x5632*x5636))+(((-1.0)*r22*x5629))+(((-1.0)*x5645))+((cj4*x5637)));
evalcond[2]=((((0.0775)*x5640))+(((0.0775)*x5642))+(((0.0535)*sj1))+(((0.3425)*x5638))+(((-0.2845)*cj1))+(((-0.3425)*x5641))+pz+(((-0.076)*x5637))+((r21*x5631)));
evalcond[3]=((((-1.0)*x5632*x5639))+((sj4*x5633))+x5641+(((-1.0)*sj0*x5627*x5632))+(((-1.0)*x5638))+((cj4*sj5*x5634))+((r12*x5626))+((cj4*sj0*x5630)));
evalcond[4]=((((-1.0)*x5626*x5627))+(((-1.0)*r12*sj0*x5632))+(((-1.0)*x5632*x5633))+(((-1.0)*x5629*x5639))+((x5626*x5630))+(((-1.0)*x5645))+((sj4*sj5*x5634)));
evalcond[5]=((((-1.0)*x5628*x5630))+(((0.2845)*sj1))+(((0.076)*x5639))+(((0.0775)*x5638))+(((-0.3425)*x5640))+(((-0.3425)*x5642))+(((0.0535)*cj1))+(((-0.0775)*x5641))+(((-1.0)*py*sj0))+((x5627*x5628))+(((-1.0)*cj0*px))+(((-1.0)*x5631*x5634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5646=(cj1*cj4);
IkReal x5647=(r21*sj5);
IkReal x5648=((1.0)*cj3);
IkReal x5649=(cj5*r20);
IkReal x5650=(cj1*sj4);
IkReal x5651=(sj1*sj4);
IkReal x5652=(cj4*sj1);
CheckValue<IkReal> x5653=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5653.valid){
continue;
}
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(((((-1.0)*x5646*x5649))+(((-1.0)*x5647*x5648*x5651))+((r22*x5650))+((x5646*x5647))+((cj3*r22*x5652))+((cj3*x5649*x5651)))),IkReal(((((-1.0)*r22*x5646*x5648))+(((-1.0)*x5649*x5652))+((x5647*x5652))+((r22*x5651))+(((-1.0)*x5648*x5649*x5650))+((cj3*x5647*x5650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5653.value)))+(x5654.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5655=IKcos(j2);
IkReal x5656=IKsin(j2);
IkReal x5657=(r10*sj0);
IkReal x5658=((0.076)*cj5);
IkReal x5659=((1.0)*sj1);
IkReal x5660=(cj0*r00);
IkReal x5661=((0.076)*sj5);
IkReal x5662=(r11*sj0);
IkReal x5663=((1.0)*sj0);
IkReal x5664=((1.0)*sj5);
IkReal x5665=((1.0)*cj4);
IkReal x5666=(cj0*r01);
IkReal x5667=(cj0*r02);
IkReal x5668=(sj4*sj5);
IkReal x5669=(cj4*sj5);
IkReal x5670=(cj5*r20);
IkReal x5671=(cj1*x5655);
IkReal x5672=((1.0)*cj5*sj4);
IkReal x5673=(cj3*x5656);
IkReal x5674=(cj1*x5656);
IkReal x5675=(sj1*x5655);
IkReal x5676=(sj1*x5656);
evalcond[0]=((((-1.0)*r20*x5664))+(((-1.0)*cj5*r21))+((sj3*x5675))+((sj3*x5674)));
evalcond[1]=(x5671+((cj4*r22))+((sj4*x5670))+(((-1.0)*r21*sj4*x5664))+(((-1.0)*x5656*x5659)));
evalcond[2]=(((cj3*x5675))+((cj1*x5673))+(((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x5664))+((cj4*x5670)));
evalcond[3]=(((sj5*x5660))+(((-1.0)*sj3*x5656*x5659))+((cj5*x5662))+((cj5*x5666))+((sj5*x5657))+((sj3*x5671)));
evalcond[4]=((((0.0775)*x5675))+(((0.0775)*x5674))+(((-1.0)*r20*x5658))+(((0.0535)*sj1))+(((-0.2845)*cj1))+pz+(((-0.3425)*x5676))+(((0.3425)*x5671))+((r21*x5661)));
evalcond[5]=(((cj3*x5671))+(((-1.0)*x5659*x5673))+((r12*sj0*sj4))+((x5666*x5669))+(((-1.0)*cj5*x5657*x5665))+((x5662*x5669))+((sj4*x5667))+(((-1.0)*cj5*x5660*x5665)));
evalcond[6]=((((-1.0)*x5657*x5672))+(((-1.0)*x5674))+(((-1.0)*x5655*x5659))+((x5666*x5668))+(((-1.0)*x5665*x5667))+((x5662*x5668))+(((-1.0)*x5660*x5672))+(((-1.0)*cj4*r12*x5663)));
evalcond[7]=((((0.0775)*x5671))+((x5657*x5658))+(((0.2845)*sj1))+(((-1.0)*py*x5663))+(((0.0535)*cj1))+(((-1.0)*x5661*x5662))+(((-1.0)*x5661*x5666))+(((-0.3425)*x5675))+(((-0.3425)*x5674))+(((-0.0775)*x5676))+(((-1.0)*cj0*px))+((x5658*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5677=((1.0)*cj1);
IkReal x5678=(sj0*sj1);
IkReal x5679=(cj5*r11);
IkReal x5680=(r10*sj5);
IkReal x5681=(r20*sj5);
IkReal x5682=(cj5*r21);
IkReal x5683=(cj0*cj5*r01);
IkReal x5684=(cj0*r00*sj5);
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5685.valid){
continue;
}
CheckValue<IkReal> x5686 = IKatan2WithCheck(IkReal((((cj1*x5681))+((cj1*x5682))+((x5678*x5679))+((sj1*x5683))+((sj1*x5684))+((x5678*x5680)))),IkReal(((((-1.0)*sj0*x5677*x5679))+((sj1*x5682))+((sj1*x5681))+(((-1.0)*sj0*x5677*x5680))+(((-1.0)*x5677*x5683))+(((-1.0)*x5677*x5684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5686.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5685.value)))+(x5686.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5687=IKcos(j2);
IkReal x5688=IKsin(j2);
IkReal x5689=(r10*sj0);
IkReal x5690=((0.076)*cj5);
IkReal x5691=((1.0)*sj1);
IkReal x5692=(cj0*r00);
IkReal x5693=((0.076)*sj5);
IkReal x5694=(r11*sj0);
IkReal x5695=((1.0)*sj0);
IkReal x5696=((1.0)*sj5);
IkReal x5697=((1.0)*cj4);
IkReal x5698=(cj0*r01);
IkReal x5699=(cj0*r02);
IkReal x5700=(sj4*sj5);
IkReal x5701=(cj4*sj5);
IkReal x5702=(cj5*r20);
IkReal x5703=(cj1*x5687);
IkReal x5704=((1.0)*cj5*sj4);
IkReal x5705=(cj3*x5688);
IkReal x5706=(cj1*x5688);
IkReal x5707=(sj1*x5687);
IkReal x5708=(sj1*x5688);
evalcond[0]=((((-1.0)*cj5*r21))+((sj3*x5707))+((sj3*x5706))+(((-1.0)*r20*x5696)));
evalcond[1]=(((cj4*r22))+((sj4*x5702))+(((-1.0)*r21*sj4*x5696))+(((-1.0)*x5688*x5691))+x5703);
evalcond[2]=((((-1.0)*cj4*r21*x5696))+((cj4*x5702))+((cj1*x5705))+(((-1.0)*r22*sj4))+((cj3*x5707)));
evalcond[3]=(((sj5*x5689))+(((-1.0)*sj3*x5688*x5691))+((sj5*x5692))+((cj5*x5694))+((cj5*x5698))+((sj3*x5703)));
evalcond[4]=((((0.3425)*x5703))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((-0.3425)*x5708))+pz+(((0.0775)*x5707))+(((0.0775)*x5706))+((r21*x5693))+(((-1.0)*r20*x5690)));
evalcond[5]=((((-1.0)*cj5*x5692*x5697))+((x5694*x5701))+((r12*sj0*sj4))+(((-1.0)*cj5*x5689*x5697))+(((-1.0)*x5691*x5705))+((sj4*x5699))+((x5698*x5701))+((cj3*x5703)));
evalcond[6]=((((-1.0)*x5692*x5704))+(((-1.0)*x5706))+(((-1.0)*cj4*r12*x5695))+((x5694*x5700))+(((-1.0)*x5687*x5691))+(((-1.0)*x5697*x5699))+(((-1.0)*x5689*x5704))+((x5698*x5700)));
evalcond[7]=((((-0.0775)*x5708))+((x5690*x5692))+(((0.2845)*sj1))+(((-0.3425)*x5707))+(((-0.3425)*x5706))+(((0.0535)*cj1))+(((0.0775)*x5703))+((x5689*x5690))+(((-1.0)*py*x5695))+(((-1.0)*cj0*px))+(((-1.0)*x5693*x5694))+(((-1.0)*x5693*x5698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5709=(cj5*r20);
IkReal x5710=(r20*sj5);
IkReal x5711=(r21*sj5);
IkReal x5712=(cj5*r21);
IkReal x5713=(cj1*sj3*sj4);
IkReal x5714=(cj4*r22*sj3);
IkReal x5715=(sj1*sj3*sj4);
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x5716.valid){
continue;
}
CheckValue<IkReal> x5717 = IKatan2WithCheck(IkReal(((((-1.0)*x5711*x5715))+((cj1*x5712))+((cj1*x5710))+((sj1*x5714))+((x5709*x5715)))),IkReal((((x5711*x5713))+((sj1*x5710))+((sj1*x5712))+(((-1.0)*x5709*x5713))+(((-1.0)*cj1*x5714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5717.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5716.value)))+(x5717.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5718=IKcos(j2);
IkReal x5719=IKsin(j2);
IkReal x5720=(r10*sj0);
IkReal x5721=((0.076)*cj5);
IkReal x5722=((1.0)*sj1);
IkReal x5723=(cj0*r00);
IkReal x5724=((0.076)*sj5);
IkReal x5725=(r11*sj0);
IkReal x5726=((1.0)*sj0);
IkReal x5727=((1.0)*sj5);
IkReal x5728=((1.0)*cj4);
IkReal x5729=(cj0*r01);
IkReal x5730=(cj0*r02);
IkReal x5731=(sj4*sj5);
IkReal x5732=(cj4*sj5);
IkReal x5733=(cj5*r20);
IkReal x5734=(cj1*x5718);
IkReal x5735=((1.0)*cj5*sj4);
IkReal x5736=(cj3*x5719);
IkReal x5737=(cj1*x5719);
IkReal x5738=(sj1*x5718);
IkReal x5739=(sj1*x5719);
evalcond[0]=((((-1.0)*r20*x5727))+((sj3*x5737))+((sj3*x5738))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*x5719*x5722))+((sj4*x5733))+(((-1.0)*r21*sj4*x5727))+x5734);
evalcond[2]=(((cj3*x5738))+(((-1.0)*cj4*r21*x5727))+((cj1*x5736))+(((-1.0)*r22*sj4))+((cj4*x5733)));
evalcond[3]=(((sj3*x5734))+((sj5*x5720))+((sj5*x5723))+(((-1.0)*sj3*x5719*x5722))+((cj5*x5725))+((cj5*x5729)));
evalcond[4]=((((-1.0)*r20*x5721))+((r21*x5724))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.0775)*x5737))+(((0.0775)*x5738))+pz+(((0.3425)*x5734))+(((-0.3425)*x5739)));
evalcond[5]=(((cj3*x5734))+((x5725*x5732))+(((-1.0)*x5722*x5736))+(((-1.0)*cj5*x5723*x5728))+((r12*sj0*sj4))+((x5729*x5732))+(((-1.0)*cj5*x5720*x5728))+((sj4*x5730)));
evalcond[6]=((((-1.0)*x5728*x5730))+((x5725*x5731))+((x5729*x5731))+(((-1.0)*x5718*x5722))+(((-1.0)*cj4*r12*x5726))+(((-1.0)*x5720*x5735))+(((-1.0)*x5737))+(((-1.0)*x5723*x5735)));
evalcond[7]=(((x5721*x5723))+(((0.2845)*sj1))+(((-1.0)*py*x5726))+(((-1.0)*x5724*x5729))+(((-1.0)*x5724*x5725))+(((0.0775)*x5734))+(((0.0535)*cj1))+(((-0.0775)*x5739))+(((-0.3425)*x5738))+(((-0.3425)*x5737))+(((-1.0)*cj0*px))+((x5720*x5721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5740=((0.076)*cj3);
IkReal x5741=((1.0)*cj3);
CheckValue<IkReal> x5742=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((-0.076)*r22)))),-1);
if(!x5742.valid){
continue;
}
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal((((cj5*r10*x5740))+(((-1.0)*py*x5741))+(((-1.0)*r11*sj5*x5740)))),IkReal((((cj5*r00*x5740))+(((-1.0)*px*x5741))+(((-1.0)*r01*sj5*x5740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5742.value)))+(x5743.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5744=IKcos(j0);
IkReal x5745=IKsin(j0);
IkReal x5746=(sj4*sj5);
IkReal x5747=(cj4*sj5);
IkReal x5748=((1.0)*cj4);
IkReal x5749=((0.076)*sj5);
IkReal x5750=((1.0)*x5745);
IkReal x5751=(r11*x5744);
IkReal x5752=(r12*x5744);
IkReal x5753=(cj5*r00*x5745);
IkReal x5754=(cj5*r10*x5744);
evalcond[0]=(cj3+((cj5*x5751))+((r10*sj5*x5744))+(((-1.0)*r00*sj5*x5750))+(((-1.0)*cj5*r01*x5750)));
evalcond[1]=((((-1.0)*x5749*x5751))+(((0.076)*x5754))+(((-1.0)*py*x5744))+((r01*x5745*x5749))+(((-0.076)*x5753))+((px*x5745)));
evalcond[2]=(((cj4*r02*x5745))+(((-1.0)*sj4*x5754))+(((-1.0)*x5748*x5752))+((x5746*x5751))+((sj4*x5753))+(((-1.0)*r01*x5746*x5750)));
evalcond[3]=((((-1.0)*r01*x5747*x5750))+(((-1.0)*sj3))+((cj4*x5753))+(((-1.0)*r02*sj4*x5750))+(((-1.0)*x5748*x5754))+((x5747*x5751))+((sj4*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x5755=((1.138)*sj3);
IkReal x5756=((1.138)*cj3);
IkReal x5757=((0.31)*cj5);
IkReal x5758=(cj4*r20);
IkReal x5759=((0.93)*sj5);
IkReal x5760=(cj4*r21);
IkReal x5761=(r22*sj4);
IkReal x5762=((0.912)*sj3);
IkReal x5763=(cj5*r20);
IkReal x5764=(r21*sj5);
IkReal x5765=((4.11)*sj4);
IkReal x5766=((0.93)*cj5);
IkReal x5767=((0.304)*cj3);
IkReal x5768=(pz*sj3);
IkReal x5769=((0.31)*sj5);
IkReal x5770=((0.304)*sj3);
IkReal x5771=((0.912)*cj3);
IkReal x5772=((1.37)*sj3);
IkReal x5773=(cj4*r22);
IkReal x5774=(cj3*pz);
IkReal x5775=((1.37)*cj3);
IkReal x5776=(r21*x5766);
IkReal x5777=((12.0)*x5768);
IkReal x5778=(r20*x5759);
IkReal x5779=((12.0)*x5774);
IkReal x5780=((0.93)*x5761);
IkReal x5781=((4.11)*sj3*x5773);
IkReal x5782=(x5762*x5763);
IkReal x5783=(x5762*x5764);
IkReal x5784=((4.11)*cj3*x5773);
IkReal x5785=(x5763*x5771);
IkReal x5786=(x5758*x5766);
IkReal x5787=(x5764*x5771);
IkReal x5788=(x5759*x5760);
IkReal x5789=((1.37)*sj4*x5764);
IkReal x5790=(sj3*x5763*x5765);
IkReal x5791=(sj3*x5764*x5765);
IkReal x5792=(cj3*x5763*x5765);
IkReal x5793=(cj3*x5764*x5765);
IkReal x5794=(x5781+x5782+x5790);
IkReal x5795=(x5784+x5785+x5786+x5792);
IkReal x5796=(x5778+x5777+x5776+x5783+x5791);
IkReal x5797=(x5779+x5787+x5780+x5788+x5793);
j1eval[0]=((IKabs(((((-1.0)*x5796))+(((-1.0)*x5755))+x5794)))+(IKabs(((((-1.0)*x5797))+(((-1.0)*x5756))+x5795)))+(IKabs(((((-1.0)*x5796))+x5755+x5794)))+(IKabs(((((-1.0)*r20*x5769))+(((-1.0)*sj4*x5764*x5772))+(((-4.0)*x5768))+((sj4*x5763*x5772))+(((-1.0)*r21*x5757))+(((-1.0)*x5755))+((x5763*x5770))+(((-1.0)*x5764*x5770))+((x5772*x5773)))))+(IKabs(((((-0.31)*x5761))+(((-4.0)*x5774))+(((-1.0)*sj4*x5764*x5775))+((sj4*x5763*x5775))+(((-1.0)*x5760*x5769))+((x5757*x5758))+(((-1.0)*x5756))+(((-1.0)*x5764*x5767))+((x5763*x5767))+((x5773*x5775)))))+(((1.712)*(IKabs(cj3))))+(((1.712)*(IKabs(sj3))))+(IKabs(((((-1.0)*x5797))+x5756+x5795))));
if( IKabs(j1eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x5798=((1.138)*sj3);
IkReal x5799=(r20*sj5);
IkReal x5800=(pz*sj3);
IkReal x5801=((1.37)*sj4);
IkReal x5802=(cj5*r21);
IkReal x5803=((4.11)*sj4);
IkReal x5804=((0.93)*x5802);
IkReal x5805=((12.0)*x5800);
IkReal x5806=((0.93)*x5799);
IkReal x5807=((-0.428)*sj3);
IkReal x5808=((0.31)*x5799);
IkReal x5809=((4.0)*x5800);
IkReal x5810=((0.31)*x5802);
IkReal x5811=(r21*sj3*sj5);
IkReal x5812=(cj5*r20*sj3);
IkReal x5813=(cj4*r22*sj3);
IkReal x5814=((4.11)*x5813);
IkReal x5815=((0.912)*x5812);
IkReal x5816=((0.912)*x5811);
IkReal x5817=((1.37)*x5813);
IkReal x5818=((0.304)*x5812);
IkReal x5819=((0.304)*x5811);
IkReal x5820=(x5803*x5812);
IkReal x5821=(x5803*x5811);
IkReal x5822=(x5801*x5812);
IkReal x5823=(x5801*x5811);
IkReal x5824=(x5820+x5814+x5815);
IkReal x5825=(x5822+x5818+x5817);
IkReal x5826=(x5809+x5808+x5823+x5819+x5810);
IkReal x5827=(x5806+x5805+x5804+x5821+x5816);
op[0]=((((-1.0)*x5826))+(((-1.0)*x5798))+x5825);
op[1]=x5807;
op[2]=((((-1.0)*x5827))+(((-1.0)*x5798))+x5824);
op[3]=((-0.856)*sj3);
op[4]=((((-1.0)*x5827))+x5824+x5798);
op[5]=x5807;
op[6]=((((-1.0)*x5826))+x5825+x5798);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x5828=((1.138)*cj3);
IkReal x5829=(cj5*r20);
IkReal x5830=((0.31)*cj4);
IkReal x5831=(r21*sj5);
IkReal x5832=(cj3*sj4);
IkReal x5833=(r22*sj4);
IkReal x5834=((0.93)*cj4);
IkReal x5835=((0.304)*cj3);
IkReal x5836=((0.912)*cj3);
IkReal x5837=((0.428)*cj3);
IkReal x5838=(cj3*pz);
IkReal x5839=((12.0)*x5838);
IkReal x5840=((0.93)*x5833);
IkReal x5841=((0.31)*x5833);
IkReal x5842=((4.0)*x5838);
IkReal x5843=(cj3*cj4*r22);
IkReal x5844=(x5829*x5835);
IkReal x5845=((1.37)*x5843);
IkReal x5846=((4.11)*x5843);
IkReal x5847=(x5829*x5836);
IkReal x5848=(x5829*x5834);
IkReal x5849=(x5831*x5836);
IkReal x5850=(x5831*x5834);
IkReal x5851=(x5829*x5830);
IkReal x5852=(x5831*x5835);
IkReal x5853=(x5830*x5831);
IkReal x5854=((1.37)*x5829*x5832);
IkReal x5855=((4.11)*x5829*x5832);
IkReal x5856=((4.11)*x5831*x5832);
IkReal x5857=((1.37)*x5831*x5832);
IkReal x5858=(x5847+x5846+x5848+x5855);
IkReal x5859=(x5845+x5844+x5854+x5851);
IkReal x5860=(x5839+x5840+x5849+x5856+x5850);
IkReal x5861=(x5842+x5841+x5857+x5852+x5853);
j1evalpoly[0]=((((-1.0)*htj1*x5837))+(((-1.0)*x5861))+(((htj1*htj1)*(((((-1.0)*x5860))+x5828+x5858))))+(((-0.856)*cj3*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x5828))+(((-1.0)*x5861))+x5859))))+(((-1.0)*x5837*(htj1*htj1*htj1*htj1*htj1)))+x5828+x5859+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x5828))+(((-1.0)*x5860))+x5858)))));
if( IKabs(j1evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2eval[3];
IkReal x5862=(cj5*r20);
IkReal x5863=(r20*sj5);
IkReal x5864=(r21*sj5);
IkReal x5865=(cj5*r21);
IkReal x5866=(cj1*sj3*sj4);
IkReal x5867=(cj4*r22*sj3);
IkReal x5868=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs(((((-1.0)*x5864*x5868))+((cj1*x5863))+((cj1*x5865))+((sj1*x5867))+((x5862*x5868)))))+(IKabs((((sj1*x5863))+((sj1*x5865))+(((-1.0)*cj1*x5867))+(((-1.0)*x5862*x5866))+((x5864*x5866))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5869=(cj4*r22);
IkReal x5870=((1.0)*cj1);
IkReal x5871=(r20*sj1);
IkReal x5872=(cj5*sj4);
IkReal x5873=(cj5*r21);
IkReal x5874=(r21*sj4*sj5);
if( IKabs((((cj1*x5873))+((cj1*r20*sj5))+((sj1*x5869))+((x5871*x5872))+(((-1.0)*sj1*x5874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x5874))+((sj1*x5873))+(((-1.0)*r20*x5870*x5872))+(((-1.0)*x5869*x5870))+((sj5*x5871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x5873))+((cj1*r20*sj5))+((sj1*x5869))+((x5871*x5872))+(((-1.0)*sj1*x5874))))+IKsqr((((cj1*x5874))+((sj1*x5873))+(((-1.0)*r20*x5870*x5872))+(((-1.0)*x5869*x5870))+((sj5*x5871))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x5873))+((cj1*r20*sj5))+((sj1*x5869))+((x5871*x5872))+(((-1.0)*sj1*x5874))), (((cj1*x5874))+((sj1*x5873))+(((-1.0)*r20*x5870*x5872))+(((-1.0)*x5869*x5870))+((sj5*x5871))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5875=IKcos(j2);
IkReal x5876=IKsin(j2);
IkReal x5877=(r10*sj0);
IkReal x5878=((0.076)*cj5);
IkReal x5879=(cj0*r00);
IkReal x5880=((0.076)*sj5);
IkReal x5881=(r11*sj0);
IkReal x5882=((1.0)*sj5);
IkReal x5883=((1.0)*cj0);
IkReal x5884=(cj0*r01);
IkReal x5885=((1.0)*sj1);
IkReal x5886=((0.3425)*sj1);
IkReal x5887=(sj4*sj5);
IkReal x5888=((1.0)*sj0);
IkReal x5889=(cj1*x5875);
IkReal x5890=((1.0)*cj5*sj4);
IkReal x5891=(cj1*x5876);
IkReal x5892=(sj1*x5875);
IkReal x5893=(x5876*x5885);
evalcond[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5882))+x5891+x5892);
evalcond[1]=(((cj4*r22))+((cj5*r20*sj4))+(((-1.0)*r21*sj4*x5882))+(((-1.0)*x5893))+x5889);
evalcond[2]=(((cj5*x5884))+((cj5*x5881))+(((-1.0)*x5893))+x5889+((sj5*x5877))+((sj5*x5879)));
CheckValue<IkReal> x5894=IKPowWithIntegerCheck(cj4,-1);
if(!x5894.valid){
continue;
}
evalcond[3]=((((0.3425)*x5889))+(((0.0535)*sj1))+(((-1.0)*x5876*x5886))+(((-0.2845)*cj1))+pz+(((0.0775)*x5892))+(((0.0775)*x5891))+(((-0.076)*r22*sj4*(x5894.value))));
evalcond[4]=((((-1.0)*x5877*x5890))+(((-1.0)*cj4*r02*x5883))+(((-1.0)*x5891))+(((-1.0)*x5875*x5885))+((x5884*x5887))+((x5881*x5887))+(((-1.0)*cj4*r12*x5888))+(((-1.0)*x5879*x5890)));
evalcond[5]=((((-1.0)*px*x5883))+((x5878*x5879))+((x5877*x5878))+(((0.0775)*x5889))+(((-0.0775)*sj1*x5876))+(((0.2845)*sj1))+(((-1.0)*x5875*x5886))+(((-0.3425)*x5891))+(((-1.0)*x5880*x5881))+(((-1.0)*x5880*x5884))+(((-1.0)*py*x5888))+(((0.0535)*cj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5895=((1.0)*cj1);
IkReal x5896=(cj4*r22);
IkReal x5897=(cj5*r21);
IkReal x5898=((1.0)*sj1);
IkReal x5899=(r20*sj5);
IkReal x5900=(r21*sj4*sj5);
IkReal x5901=(cj5*r20*sj4);
if( IKabs((((sj1*x5901))+(((-1.0)*x5898*x5900))+((sj1*x5896))+(((-1.0)*x5895*x5897))+(((-1.0)*x5895*x5899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x5895*x5901))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5898))+(((-1.0)*x5895*x5896))+((cj1*x5900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x5901))+(((-1.0)*x5898*x5900))+((sj1*x5896))+(((-1.0)*x5895*x5897))+(((-1.0)*x5895*x5899))))+IKsqr(((((-1.0)*x5895*x5901))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5898))+(((-1.0)*x5895*x5896))+((cj1*x5900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x5901))+(((-1.0)*x5898*x5900))+((sj1*x5896))+(((-1.0)*x5895*x5897))+(((-1.0)*x5895*x5899))), ((((-1.0)*x5895*x5901))+(((-1.0)*x5898*x5899))+(((-1.0)*x5897*x5898))+(((-1.0)*x5895*x5896))+((cj1*x5900))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5902=IKcos(j2);
IkReal x5903=IKsin(j2);
IkReal x5904=(r10*sj0);
IkReal x5905=((0.076)*cj5);
IkReal x5906=(cj0*r00);
IkReal x5907=((0.076)*sj5);
IkReal x5908=(r11*sj0);
IkReal x5909=((1.0)*sj5);
IkReal x5910=((1.0)*cj0);
IkReal x5911=(cj0*r01);
IkReal x5912=((1.0)*sj1);
IkReal x5913=((0.3425)*sj1);
IkReal x5914=(sj4*sj5);
IkReal x5915=((1.0)*sj0);
IkReal x5916=(cj1*x5902);
IkReal x5917=((1.0)*cj5*sj4);
IkReal x5918=(cj1*x5903);
IkReal x5919=(sj1*x5903);
IkReal x5920=(x5902*x5912);
IkReal x5921=((1.0)*x5918);
IkReal x5922=(x5920+x5921);
evalcond[0]=((((-1.0)*r20*x5909))+(((-1.0)*x5922))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+(((-1.0)*r21*sj4*x5909))+((cj5*r20*sj4))+(((-1.0)*x5903*x5912))+x5916);
evalcond[2]=(((cj5*x5911))+((sj5*x5906))+((sj5*x5904))+((cj5*x5908))+x5919+(((-1.0)*x5916)));
CheckValue<IkReal> x5923=IKPowWithIntegerCheck(cj4,-1);
if(!x5923.valid){
continue;
}
evalcond[3]=((((0.0775)*sj1*x5902))+(((0.0535)*sj1))+(((-1.0)*x5903*x5913))+(((-0.2845)*cj1))+(((0.3425)*x5916))+pz+(((0.0775)*x5918))+(((-0.076)*r22*sj4*(x5923.value))));
evalcond[4]=((((-1.0)*cj4*r02*x5910))+((x5911*x5914))+(((-1.0)*x5904*x5917))+((x5908*x5914))+(((-1.0)*x5906*x5917))+(((-1.0)*x5922))+(((-1.0)*cj4*r12*x5915)));
evalcond[5]=((((-0.0775)*x5919))+(((-1.0)*x5902*x5913))+(((-1.0)*x5907*x5908))+(((-1.0)*x5907*x5911))+(((0.2845)*sj1))+(((-1.0)*py*x5915))+(((-1.0)*px*x5910))+(((0.0535)*cj1))+((x5905*x5906))+(((-0.3425)*x5918))+((x5904*x5905))+(((0.0775)*x5916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5924=(cj4*r22);
IkReal x5925=((1.0)*cj1);
IkReal x5926=(sj1*sj4);
IkReal x5927=(cj5*r20);
IkReal x5928=(r21*sj5);
IkReal x5929=(cj4*sj1);
IkReal x5930=(cj1*x5928);
if( IKabs((((cj4*x5930))+(((-1.0)*x5926*x5928))+((x5926*x5927))+(((-1.0)*cj4*x5925*x5927))+((sj1*x5924))+((cj1*r22*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x5926))+(((-1.0)*x5924*x5925))+((x5928*x5929))+(((-1.0)*sj4*x5925*x5927))+(((-1.0)*x5927*x5929))+((sj4*x5930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x5930))+(((-1.0)*x5926*x5928))+((x5926*x5927))+(((-1.0)*cj4*x5925*x5927))+((sj1*x5924))+((cj1*r22*sj4))))+IKsqr((((r22*x5926))+(((-1.0)*x5924*x5925))+((x5928*x5929))+(((-1.0)*sj4*x5925*x5927))+(((-1.0)*x5927*x5929))+((sj4*x5930))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*x5930))+(((-1.0)*x5926*x5928))+((x5926*x5927))+(((-1.0)*cj4*x5925*x5927))+((sj1*x5924))+((cj1*r22*sj4))), (((r22*x5926))+(((-1.0)*x5924*x5925))+((x5928*x5929))+(((-1.0)*sj4*x5925*x5927))+(((-1.0)*x5927*x5929))+((sj4*x5930))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5931=IKcos(j2);
IkReal x5932=IKsin(j2);
IkReal x5933=((1.0)*sj4);
IkReal x5934=((0.076)*sj5);
IkReal x5935=(r11*sj0);
IkReal x5936=((1.0)*cj4);
IkReal x5937=(cj0*r02);
IkReal x5938=(cj0*r01);
IkReal x5939=(cj5*r20);
IkReal x5940=((1.0)*sj1);
IkReal x5941=(sj4*sj5);
IkReal x5942=(r21*sj5);
IkReal x5943=(cj4*sj5);
IkReal x5944=(r12*sj0);
IkReal x5945=(cj1*x5931);
IkReal x5946=(cj5*r10*sj0);
IkReal x5947=(cj0*cj5*r00);
IkReal x5948=(cj1*x5932);
IkReal x5949=(sj1*x5932);
IkReal x5950=(sj1*x5931);
IkReal x5951=(x5932*x5940);
evalcond[0]=(((cj4*r22))+(((-1.0)*x5933*x5942))+(((-1.0)*x5951))+x5945+((sj4*x5939)));
evalcond[1]=(((cj4*x5939))+(((-1.0)*x5936*x5942))+x5950+x5948+(((-1.0)*r22*x5933)));
evalcond[2]=((((0.0535)*sj1))+(((0.3425)*x5945))+(((-0.2845)*cj1))+(((0.0775)*x5950))+((r21*x5934))+pz+(((-0.076)*x5939))+(((-0.3425)*x5949))+(((0.0775)*x5948)));
evalcond[3]=(((x5935*x5943))+(((-1.0)*x5936*x5946))+(((-1.0)*x5936*x5947))+((sj4*x5944))+(((-1.0)*x5951))+x5945+((sj4*x5937))+((x5938*x5943)));
evalcond[4]=((((-1.0)*x5948))+(((-1.0)*x5931*x5940))+((x5935*x5941))+(((-1.0)*x5936*x5944))+(((-1.0)*x5933*x5946))+(((-1.0)*x5933*x5947))+(((-1.0)*x5936*x5937))+((x5938*x5941)));
evalcond[5]=((((-1.0)*x5934*x5938))+(((-1.0)*x5934*x5935))+(((0.2845)*sj1))+(((0.076)*x5946))+(((0.076)*x5947))+(((-0.0775)*x5949))+(((-0.3425)*x5950))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x5948))+(((-1.0)*cj0*px))+(((0.0775)*x5945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5952=((1.0)*cj4);
IkReal x5953=(r22*sj1);
IkReal x5954=((1.0)*sj4);
IkReal x5955=(cj1*r22);
IkReal x5956=(cj1*r21*sj5);
IkReal x5957=(cj5*r20*sj1);
IkReal x5958=(r21*sj1*sj5);
IkReal x5959=(cj1*cj5*r20);
if( IKabs((((sj4*x5957))+(((-1.0)*x5952*x5956))+(((-1.0)*x5954*x5955))+(((-1.0)*x5954*x5958))+((cj4*x5959))+((cj4*x5953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x5956))+(((-1.0)*x5952*x5955))+(((-1.0)*x5952*x5958))+(((-1.0)*x5954*x5959))+(((-1.0)*x5953*x5954))+((cj4*x5957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x5957))+(((-1.0)*x5952*x5956))+(((-1.0)*x5954*x5955))+(((-1.0)*x5954*x5958))+((cj4*x5959))+((cj4*x5953))))+IKsqr((((sj4*x5956))+(((-1.0)*x5952*x5955))+(((-1.0)*x5952*x5958))+(((-1.0)*x5954*x5959))+(((-1.0)*x5953*x5954))+((cj4*x5957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x5957))+(((-1.0)*x5952*x5956))+(((-1.0)*x5954*x5955))+(((-1.0)*x5954*x5958))+((cj4*x5959))+((cj4*x5953))), (((sj4*x5956))+(((-1.0)*x5952*x5955))+(((-1.0)*x5952*x5958))+(((-1.0)*x5954*x5959))+(((-1.0)*x5953*x5954))+((cj4*x5957))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x5960=IKcos(j2);
IkReal x5961=IKsin(j2);
IkReal x5962=(sj0*sj4);
IkReal x5963=(cj5*r10);
IkReal x5964=((0.076)*sj0);
IkReal x5965=((1.0)*sj4);
IkReal x5966=(r11*sj5);
IkReal x5967=((0.076)*sj5);
IkReal x5968=((1.0)*cj4);
IkReal x5969=(cj0*r02);
IkReal x5970=(cj0*r01);
IkReal x5971=((1.0)*sj1);
IkReal x5972=(r21*sj5);
IkReal x5973=(cj5*r20);
IkReal x5974=(cj1*x5960);
IkReal x5975=(cj0*cj5*r00);
IkReal x5976=(cj1*x5961);
IkReal x5977=(sj1*x5961);
IkReal x5978=(sj1*x5960);
IkReal x5979=(x5960*x5971);
IkReal x5980=((1.0)*x5976);
IkReal x5981=(x5979+x5980);
evalcond[0]=(((cj4*r22))+(((-1.0)*x5961*x5971))+((sj4*x5973))+(((-1.0)*x5965*x5972))+x5974);
evalcond[1]=((((-1.0)*x5981))+(((-1.0)*r22*x5965))+((cj4*x5973))+(((-1.0)*x5968*x5972)));
evalcond[2]=((((0.0775)*x5978))+(((0.0775)*x5976))+(((0.0535)*sj1))+(((-0.2845)*cj1))+(((0.3425)*x5974))+((r21*x5967))+(((-0.076)*x5973))+pz+(((-0.3425)*x5977)));
evalcond[3]=((((-1.0)*sj0*x5963*x5968))+(((-1.0)*x5974))+((cj4*sj0*x5966))+((sj4*x5969))+((cj4*sj5*x5970))+((r12*x5962))+(((-1.0)*x5968*x5975))+x5977);
evalcond[4]=((((-1.0)*x5981))+(((-1.0)*r12*sj0*x5968))+((sj4*sj5*x5970))+((x5962*x5966))+(((-1.0)*x5962*x5963))+(((-1.0)*x5968*x5969))+(((-1.0)*x5965*x5975)));
evalcond[5]=((((0.0775)*x5974))+(((0.2845)*sj1))+(((0.076)*x5975))+(((-0.0775)*x5977))+((x5963*x5964))+(((0.0535)*cj1))+(((-1.0)*py*sj0))+(((-0.3425)*x5976))+(((-0.3425)*x5978))+(((-1.0)*x5967*x5970))+(((-1.0)*x5964*x5966))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x5982=(cj1*cj4);
IkReal x5983=(r21*sj5);
IkReal x5984=((1.0)*cj3);
IkReal x5985=(cj5*r20);
IkReal x5986=(cj1*sj4);
IkReal x5987=(sj1*sj4);
IkReal x5988=(cj4*sj1);
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x5989.valid){
continue;
}
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal((((cj3*x5985*x5987))+((x5982*x5983))+((cj3*r22*x5988))+(((-1.0)*x5982*x5985))+(((-1.0)*x5983*x5984*x5987))+((r22*x5986)))),IkReal((((cj3*x5983*x5986))+(((-1.0)*x5985*x5988))+((x5983*x5988))+(((-1.0)*x5984*x5985*x5986))+(((-1.0)*r22*x5982*x5984))+((r22*x5987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5989.value)))+(x5990.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x5991=IKcos(j2);
IkReal x5992=IKsin(j2);
IkReal x5993=(r10*sj0);
IkReal x5994=((0.076)*cj5);
IkReal x5995=((1.0)*sj1);
IkReal x5996=(cj0*r00);
IkReal x5997=((0.076)*sj5);
IkReal x5998=(r11*sj0);
IkReal x5999=((1.0)*sj0);
IkReal x6000=((1.0)*sj5);
IkReal x6001=((1.0)*cj4);
IkReal x6002=(cj0*r01);
IkReal x6003=(cj0*r02);
IkReal x6004=(sj4*sj5);
IkReal x6005=(cj4*sj5);
IkReal x6006=(cj5*r20);
IkReal x6007=(cj1*x5991);
IkReal x6008=((1.0)*cj5*sj4);
IkReal x6009=(cj3*x5992);
IkReal x6010=(cj1*x5992);
IkReal x6011=(sj1*x5991);
IkReal x6012=(sj1*x5992);
evalcond[0]=((((-1.0)*cj5*r21))+((sj3*x6010))+((sj3*x6011))+(((-1.0)*r20*x6000)));
evalcond[1]=((((-1.0)*x5992*x5995))+((cj4*r22))+x6007+(((-1.0)*r21*sj4*x6000))+((sj4*x6006)));
evalcond[2]=(((cj4*x6006))+((cj1*x6009))+(((-1.0)*r22*sj4))+((cj3*x6011))+(((-1.0)*cj4*r21*x6000)));
evalcond[3]=(((cj5*x6002))+((sj5*x5993))+((sj5*x5996))+(((-1.0)*sj3*x5992*x5995))+((sj3*x6007))+((cj5*x5998)));
evalcond[4]=((((-1.0)*r20*x5994))+((r21*x5997))+(((0.0535)*sj1))+(((-0.3425)*x6012))+(((0.3425)*x6007))+(((-0.2845)*cj1))+(((0.0775)*x6010))+(((0.0775)*x6011))+pz);
evalcond[5]=((((-1.0)*cj5*x5993*x6001))+((r12*sj0*sj4))+((x5998*x6005))+((sj4*x6003))+((x6002*x6005))+(((-1.0)*cj5*x5996*x6001))+(((-1.0)*x5995*x6009))+((cj3*x6007)));
evalcond[6]=((((-1.0)*x6010))+(((-1.0)*x5996*x6008))+(((-1.0)*x5993*x6008))+((x5998*x6004))+((x6002*x6004))+(((-1.0)*cj4*r12*x5999))+(((-1.0)*x5991*x5995))+(((-1.0)*x6001*x6003)));
evalcond[7]=((((-0.0775)*x6012))+(((0.0775)*x6007))+(((-0.3425)*x6010))+(((-0.3425)*x6011))+(((0.2845)*sj1))+(((-1.0)*x5997*x5998))+((x5994*x5996))+(((-1.0)*py*x5999))+(((-1.0)*x5997*x6002))+((x5993*x5994))+(((0.0535)*cj1))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6013=((1.0)*cj1);
IkReal x6014=(sj0*sj1);
IkReal x6015=(cj5*r11);
IkReal x6016=(r10*sj5);
IkReal x6017=(r20*sj5);
IkReal x6018=(cj5*r21);
IkReal x6019=(cj0*cj5*r01);
IkReal x6020=(cj0*r00*sj5);
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal((((sj1*x6019))+((cj1*x6018))+((cj1*x6017))+((sj1*x6020))+((x6014*x6015))+((x6014*x6016)))),IkReal(((((-1.0)*x6013*x6020))+(((-1.0)*sj0*x6013*x6015))+(((-1.0)*sj0*x6013*x6016))+((sj1*x6018))+((sj1*x6017))+(((-1.0)*x6013*x6019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6021.value)))+(x6022.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6023=IKcos(j2);
IkReal x6024=IKsin(j2);
IkReal x6025=(r10*sj0);
IkReal x6026=((0.076)*cj5);
IkReal x6027=((1.0)*sj1);
IkReal x6028=(cj0*r00);
IkReal x6029=((0.076)*sj5);
IkReal x6030=(r11*sj0);
IkReal x6031=((1.0)*sj0);
IkReal x6032=((1.0)*sj5);
IkReal x6033=((1.0)*cj4);
IkReal x6034=(cj0*r01);
IkReal x6035=(cj0*r02);
IkReal x6036=(sj4*sj5);
IkReal x6037=(cj4*sj5);
IkReal x6038=(cj5*r20);
IkReal x6039=(cj1*x6023);
IkReal x6040=((1.0)*cj5*sj4);
IkReal x6041=(cj3*x6024);
IkReal x6042=(cj1*x6024);
IkReal x6043=(sj1*x6023);
IkReal x6044=(sj1*x6024);
evalcond[0]=(((sj3*x6043))+((sj3*x6042))+(((-1.0)*cj5*r21))+(((-1.0)*r20*x6032)));
evalcond[1]=(((cj4*r22))+x6039+(((-1.0)*x6024*x6027))+(((-1.0)*r21*sj4*x6032))+((sj4*x6038)));
evalcond[2]=((((-1.0)*cj4*r21*x6032))+((cj4*x6038))+((cj3*x6043))+(((-1.0)*r22*sj4))+((cj1*x6041)));
evalcond[3]=(((sj5*x6028))+((sj5*x6025))+((cj5*x6034))+((cj5*x6030))+((sj3*x6039))+(((-1.0)*sj3*x6024*x6027)));
evalcond[4]=((((0.0535)*sj1))+(((-0.2845)*cj1))+(((-1.0)*r20*x6026))+(((0.3425)*x6039))+(((0.0775)*x6043))+(((0.0775)*x6042))+((r21*x6029))+pz+(((-0.3425)*x6044)));
evalcond[5]=(((r12*sj0*sj4))+(((-1.0)*x6027*x6041))+((sj4*x6035))+(((-1.0)*cj5*x6028*x6033))+((x6030*x6037))+(((-1.0)*cj5*x6025*x6033))+((x6034*x6037))+((cj3*x6039)));
evalcond[6]=((((-1.0)*x6028*x6040))+(((-1.0)*x6023*x6027))+(((-1.0)*cj4*r12*x6031))+(((-1.0)*x6042))+(((-1.0)*x6033*x6035))+((x6030*x6036))+((x6034*x6036))+(((-1.0)*x6025*x6040)));
evalcond[7]=((((-1.0)*x6029*x6030))+(((-1.0)*x6029*x6034))+(((-1.0)*py*x6031))+((x6026*x6028))+(((-0.0775)*x6044))+((x6025*x6026))+(((0.0775)*x6039))+(((0.2845)*sj1))+(((0.0535)*cj1))+(((-0.3425)*x6043))+(((-0.3425)*x6042))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x6045=(cj5*r20);
IkReal x6046=(r20*sj5);
IkReal x6047=(r21*sj5);
IkReal x6048=(cj5*r21);
IkReal x6049=(cj1*sj3*sj4);
IkReal x6050=(cj4*r22*sj3);
IkReal x6051=(sj1*sj3*sj4);
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053 = IKatan2WithCheck(IkReal(((((-1.0)*x6047*x6051))+((sj1*x6050))+((x6045*x6051))+((cj1*x6046))+((cj1*x6048)))),IkReal(((((-1.0)*x6045*x6049))+((sj1*x6048))+((sj1*x6046))+((x6047*x6049))+(((-1.0)*cj1*x6050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6053.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6052.value)))+(x6053.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x6054=IKcos(j2);
IkReal x6055=IKsin(j2);
IkReal x6056=(r10*sj0);
IkReal x6057=((0.076)*cj5);
IkReal x6058=((1.0)*sj1);
IkReal x6059=(cj0*r00);
IkReal x6060=((0.076)*sj5);
IkReal x6061=(r11*sj0);
IkReal x6062=((1.0)*sj0);
IkReal x6063=((1.0)*sj5);
IkReal x6064=((1.0)*cj4);
IkReal x6065=(cj0*r01);
IkReal x6066=(cj0*r02);
IkReal x6067=(sj4*sj5);
IkReal x6068=(cj4*sj5);
IkReal x6069=(cj5*r20);
IkReal x6070=(cj1*x6054);
IkReal x6071=((1.0)*cj5*sj4);
IkReal x6072=(cj3*x6055);
IkReal x6073=(cj1*x6055);
IkReal x6074=(sj1*x6054);
IkReal x6075=(sj1*x6055);
evalcond[0]=(((sj3*x6073))+((sj3*x6074))+(((-1.0)*r20*x6063))+(((-1.0)*cj5*r21)));
evalcond[1]=(((cj4*r22))+x6070+(((-1.0)*x6055*x6058))+(((-1.0)*r21*sj4*x6063))+((sj4*x6069)));
evalcond[2]=((((-1.0)*cj4*r21*x6063))+((cj3*x6074))+(((-1.0)*r22*sj4))+((cj4*x6069))+((cj1*x6072)));
evalcond[3]=(((sj3*x6070))+((sj5*x6059))+((sj5*x6056))+(((-1.0)*sj3*x6055*x6058))+((cj5*x6061))+((cj5*x6065)));
evalcond[4]=((((0.3425)*x6070))+(((0.0535)*sj1))+(((-1.0)*r20*x6057))+(((-0.2845)*cj1))+(((0.0775)*x6074))+(((0.0775)*x6073))+(((-0.3425)*x6075))+pz+((r21*x6060)));
evalcond[5]=((((-1.0)*cj5*x6059*x6064))+((x6061*x6068))+(((-1.0)*x6058*x6072))+((r12*sj0*sj4))+((cj3*x6070))+((x6065*x6068))+(((-1.0)*cj5*x6056*x6064))+((sj4*x6066)));
evalcond[6]=((((-1.0)*x6064*x6066))+((x6061*x6067))+(((-1.0)*x6073))+(((-1.0)*x6054*x6058))+(((-1.0)*cj4*r12*x6062))+(((-1.0)*x6056*x6071))+(((-1.0)*x6059*x6071))+((x6065*x6067)));
evalcond[7]=((((-0.0775)*x6075))+(((0.2845)*sj1))+((x6056*x6057))+(((-1.0)*py*x6062))+(((-1.0)*x6060*x6061))+(((-1.0)*x6060*x6065))+(((0.0775)*x6070))+(((0.0535)*cj1))+(((-0.3425)*x6074))+(((-0.3425)*x6073))+(((-1.0)*cj0*px))+((x6057*x6059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - xarm6 (3379fdfd964cc01516df751993807ca4)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
